//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct 25 2017 03:49:04).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "RCTEventEmitter.h"

@interface PartyManager : RCTEventEmitter
{
    // Error parsing type: , name: tokenDispatchQueue
    // Error parsing type: , name: tokenRequestMap
    // Error parsing type: , name: tokenRequestId
    // Error parsing type: , name: isXCommsInitialized
    // Error parsing type: , name: willTerminateHandler
    // Error parsing type: , name: didEnterBackgroundHandler
    // Error parsing type: , name: willEnterForegroundHandler
    // Error parsing type: , name: currentUserXuid
    // Error parsing type: , name: soundPlayers
    // Error parsing type: , name: xComms
}

+ (_Bool)requiresMainQueueSetup;
- (void).cxx_destruct;
- (id)init;
- (void)updateLanguageCode:(id)arg1 esolver:(CDUnknownBlockType)arg2 rejecter:(CDUnknownBlockType)arg3;
- (void)setAudioOutputDevice:(id)arg1 resolver:(CDUnknownBlockType)arg2 rejecter:(CDUnknownBlockType)arg3;
- (void)setAudioInputDevice:(id)arg1 resolver:(CDUnknownBlockType)arg2 rejecter:(CDUnknownBlockType)arg3;
- (void)getAudioOutputDevices:(CDUnknownBlockType)arg1 rejecter:(CDUnknownBlockType)arg2;
- (void)getAudioInputDevices:(CDUnknownBlockType)arg1 rejecter:(CDUnknownBlockType)arg2;
- (void)sendText:(id)arg1 resolver:(CDUnknownBlockType)arg2 rejecter:(CDUnknownBlockType)arg3;
- (void)setGlobalMute:(_Bool)arg1 resolver:(CDUnknownBlockType)arg2 rejecter:(CDUnknownBlockType)arg3;
- (void)getGlobalMute:(CDUnknownBlockType)arg1 rejecter:(CDUnknownBlockType)arg2;
- (void)setMemberMute:(id)arg1 toValue:(_Bool)arg2 resolver:(CDUnknownBlockType)arg3 rejecter:(CDUnknownBlockType)arg4;
- (void)setJoinability:(id)arg1 resolver:(CDUnknownBlockType)arg2 rejecter:(CDUnknownBlockType)arg3;
- (void)getJoinability:(CDUnknownBlockType)arg1 rejecter:(CDUnknownBlockType)arg2;
- (void)kickMember:(id)arg1 resolver:(CDUnknownBlockType)arg2 rejecter:(CDUnknownBlockType)arg3;
- (void)getMember:(id)arg1 resolver:(CDUnknownBlockType)arg2 rejecter:(CDUnknownBlockType)arg3;
- (void)getCurrentParty:(CDUnknownBlockType)arg1 rejecter:(CDUnknownBlockType)arg2;
- (void)getPartyPreviewForUser:(id)arg1 resolver:(CDUnknownBlockType)arg2 rejecter:(CDUnknownBlockType)arg3;
- (void)inviteToCurrentParty:(id)arg1 resolver:(CDUnknownBlockType)arg2 rejecter:(CDUnknownBlockType)arg3;
- (void)leaveCurrentParty:(CDUnknownBlockType)arg1 rejecter:(CDUnknownBlockType)arg2;
- (void)acceptPartyInvite:(id)arg1 resolver:(CDUnknownBlockType)arg2 rejecter:(CDUnknownBlockType)arg3;
- (void)joinParty:(id)arg1 resolver:(CDUnknownBlockType)arg2 rejecter:(CDUnknownBlockType)arg3;
- (void)createParty:(CDUnknownBlockType)arg1 rejecter:(CDUnknownBlockType)arg2;
- (void)fulfillTokenRequest:(long long)arg1 withToken:(id)arg2 andSignature:(id)arg3;
- (void)notifyUserSignedOut:(CDUnknownBlockType)arg1 rejecter:(CDUnknownBlockType)arg2;
- (void)notifyUserSignedIn:(id)arg1 resolver:(CDUnknownBlockType)arg2 rejecter:(CDUnknownBlockType)arg3;
- (id)supportedEvents;
- (void)willEnterForegroundWithNotification:(id)arg1;
- (void)didEnterBackgroundWithNotification:(id)arg1;
- (void)willTerminateWithNotification:(id)arg1;
- (void)stopObserving;
- (void)startObserving;

@end

