//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class IESMMAudioCleaner, IESMMAudioCompressor, IESMMAudioEqualizer, IESMMAudioExciter, IESMMAudioReverb, IESMMAudioReverbV2, IESMMAudioSingScore, IESMMAudioStereoWiden;

@interface IESMMAudioEffect : NSObject
{
    IESMMAudioCleaner *_audioCleaner;
    IESMMAudioReverb *_reverb;
    IESMMAudioStereoWiden *_stereoWiden;
    IESMMAudioEqualizer *_equalizer;
    IESMMAudioReverbV2 *_reverb2;
    IESMMAudioExciter *_exciter;
    IESMMAudioCompressor *_compressor;
    IESMMAudioSingScore *_singScore;
    double _sampleRate;
    float *_audioData;
    float *_singScoreData;
    float *_exciterOutput;
    float *_exciterOutputL;
    float *_exciterOutputR;
    int _exciterOutLength;
    int _audioDataLen;
    int _singScoreDataLen;
    int _exciterDataLen;
    _Bool _enableCleaner;
    _Bool _enableExciter;
    _Bool _enableCompressor;
    _Bool _enableSingScore;
    _Bool _useFloat;
    CDUnknownBlockType _scoreResultBlock;
}

@property(copy, nonatomic) CDUnknownBlockType scoreResultBlock; // @synthesize scoreResultBlock=_scoreResultBlock;
- (void).cxx_destruct;
- (void)dealloc;
- (void)flush;
- (void)enableCompressor:(_Bool)arg1;
- (void)enableExciter:(_Bool)arg1;
- (void)enableCleaner:(_Bool)arg1;
- (void)updateCompressFormat:(id)arg1;
- (void)updateExciterFormat:(id)arg1;
- (void)updateAudioCleanerFormat:(id)arg1;
- (void)updateReverb2Format:(id)arg1;
- (void)updateEqualizerFormat:(id)arg1;
- (void)updateReverbFormat:(id)arg1;
- (void)updateStereoWiden:(int)arg1;
- (void)singScorePitch:(int)arg1;
- (void)singScoreSeek:(double)arg1;
- (id)getMidiDataArray;
- (void)setSingScoreEnable:(_Bool)arg1 midiFilePath:(id)arg2 lyricTimes:(id)arg3;
@property(readonly, nonatomic) _Bool enableSingScore;
- (void)setSingScoreEnable:(_Bool)arg1 midiFilePath:(id)arg2 lyricFilePath:(id)arg3;
- (_Bool)p_doProcessAudioDataWithChannels:(int)arg1 samplesPerChannel:(int)arg2 intoAudioBuffer:(struct AudioBuffer)arg3;
- (_Bool)needProcess;
- (void)processBuffer:(struct AudioBuffer)arg1 samplePerCh:(int)arg2;
- (void)processSingScoreBuffer:(struct AudioBuffer)arg1 samplePerCh:(int)arg2;
- (void)processBufferList:(struct AudioBufferList *)arg1;
- (id)initWithSampleRate:(double)arg1 channels:(int)arg2 useFloat:(_Bool)arg3;

@end

