//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "HeimdallrModule.h"

@class NSArray, NSMutableArray, NSNumber, NSObject, NSString;
@protocol OS_dispatch_queue;

@interface HMDUITrackerManager : HeimdallrModule
{
    struct _opaque_pthread_mutex_t _mutex;
    struct _opaque_pthread_mutexattr_t _attr;
    struct _opaque_pthread_rwlock_t _recentScenesLock;
    _Bool _newVCPushing;
    _Bool _isNeedSaveEventsInBackground;
    NSMutableArray *_events;
    unsigned long long _flushCount;
    double _flushInterval;
    unsigned long long _uploadCount;
    double _uploadInterval;
    NSString *_scene;
    NSString *_lastScene;
    NSNumber *_sceneInPushing;
    double _lastFlushTimestamp;
    double _startTimestamp;
    NSObject<OS_dispatch_queue> *_syncQueue;
    NSMutableArray *_recentScenes;
    long long _hmdCountLimit;
    NSArray *_andConditions;
    struct HMDRecordLocalIDRange _uploadingRange;
}

+ (id)sharedManager;
@property(retain, nonatomic) NSArray *andConditions; // @synthesize andConditions=_andConditions;
@property(nonatomic) long long hmdCountLimit; // @synthesize hmdCountLimit=_hmdCountLimit;
@property(nonatomic) struct HMDRecordLocalIDRange uploadingRange; // @synthesize uploadingRange=_uploadingRange;
@property(retain, nonatomic) NSMutableArray *recentScenes; // @synthesize recentScenes=_recentScenes;
@property(nonatomic) _Bool isNeedSaveEventsInBackground; // @synthesize isNeedSaveEventsInBackground=_isNeedSaveEventsInBackground;
@property _Bool newVCPushing; // @synthesize newVCPushing=_newVCPushing;
@property(retain) NSObject<OS_dispatch_queue> *syncQueue; // @synthesize syncQueue=_syncQueue;
@property(nonatomic) double startTimestamp; // @synthesize startTimestamp=_startTimestamp;
@property(nonatomic) double lastFlushTimestamp; // @synthesize lastFlushTimestamp=_lastFlushTimestamp;
@property(retain) NSNumber *sceneInPushing; // @synthesize sceneInPushing=_sceneInPushing;
@property(copy) NSString *lastScene; // @synthesize lastScene=_lastScene;
@property(copy) NSString *scene; // @synthesize scene=_scene;
@property(nonatomic) double uploadInterval; // @synthesize uploadInterval=_uploadInterval;
@property(nonatomic) unsigned long long uploadCount; // @synthesize uploadCount=_uploadCount;
@property(nonatomic) double flushInterval; // @synthesize flushInterval=_flushInterval;
@property(nonatomic) unsigned long long flushCount; // @synthesize flushCount=_flushCount;
@property(retain, nonatomic) NSMutableArray *events; // @synthesize events=_events;
- (void).cxx_destruct;
- (id)sharedOperationTrace;
- (void)performanceDataDidReportSuccess:(_Bool)arg1;
- (id)fetchRecordsWithStartTime:(double)arg1 endTime:(double)arg2 limitCount:(long long)arg3;
- (id)performanceDataWithCountLimit:(long long)arg1;
- (void)cleanupPerformanceDataWithConfig:(id)arg1;
- (id)debugRealPerformanceDataWithConfig:(id)arg1;
- (id)getUITrackerDataWithRecords:(id)arg1;
- (unsigned long long)reporterPriority;
- (void)hmdSwitchToNewVCFrom:(id)arg1 to:(id)arg2;
- (void)didLeaveViewController:(id)arg1;
- (void)didAppearViewController:(id)arg1;
- (void)didEnterViewController:(id)arg1;
- (void)hmdTrackWithName:(id)arg1 event:(id)arg2 parameters:(id)arg3;
- (void)hmdTrackableContext:(id)arg1 eventWithName:(id)arg2 parameters:(id)arg3;
- (_Bool)performanceDataSource;
- (Class)storeClass;
- (void)updateConfig:(id)arg1;
- (void)cleanupWithConfig:(id)arg1;
- (void)setupWithHeimdallr:(id)arg1;
- (void)stop;
- (void)start;
- (void)applicationWillEnterForeground:(id)arg1;
- (void)applicationDidEnterBackground:(id)arg1;
- (id)ui_actionRecordsInAppTimeFrom:(double)arg1 to:(double)arg2 sessionID:(id)arg3 recordClass:(Class)arg4;
- (long long)dbMaxSize;
- (void)updateOperationTrace;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)dealloc;
- (id)init;
- (void)performanceSizeLimitedDataDidReportSuccess:(_Bool)arg1;
- (id)performanceDataWithLimitSize:(unsigned long long)arg1 limitCount:(long long)arg2 currentSize:(unsigned long long *)arg3;

@end

