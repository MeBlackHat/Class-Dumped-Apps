//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class NSArray, NSData, NSMutableDictionary, NSString, OnerAudioProcess, OnerAudioProcessContext, OnerDualStreamSetting, OnerStreamInfo;
@protocol RTCVendorDelegate;

@interface RTCVendor : NSObject
{
    _Bool _isVideoExtSource;
    _Bool _isVideoExtSink;
    _Bool _isVideoExtRender;
    _Bool _isAudioExtSource;
    _Bool _isAudioExtSink;
    _Bool _isAudioExtRender;
    _Bool _forceGlobalAPIServer;
    _Bool _useAudioPlayOutMixStream;
    int _audioInputSampleRate;
    int _audioOutputSampleRate;
    int _audioInputChannelNum;
    int _audioOutputChannelNum;
    OnerAudioProcess *_audioProcess;
    OnerAudioProcessContext *_audioProcessContext;
    NSString *_deviceId;
    NSMutableDictionary *_host2iplist;
    NSString *_appId;
    NSString *_token;
    NSData *_signature;
    long long _orientationMode;
    long long _frameRate;
    long long _videoKBitrate;
    id <RTCVendorDelegate> _delegate;
    long long _roleType;
    long long _profile;
    NSString *_userId;
    NSString *_roomId;
    NSArray *_apiServerHosts;
    NSString *_signalServerHost;
    long long _audioVolumeIndicationInterval;
    OnerStreamInfo *_lowStreamInfo;
    OnerDualStreamSetting *_dualStreamSetting;
    long long _audioPlayOutMixStreamSampleRate;
    long long _audioPlayOutMixStreamChannelNum;
    long long _audioPlayOutMixStreamVolume;
    unsigned long long _mirrorMode;
    long long _currentState;
    struct CGSize _videoSize;
}

+ (id)clientMessageString:(long long)arg1;
- (void).cxx_destruct;
@property long long currentState; // @synthesize currentState=_currentState;
@property(nonatomic) unsigned long long mirrorMode; // @synthesize mirrorMode=_mirrorMode;
@property(nonatomic) long long audioPlayOutMixStreamVolume; // @synthesize audioPlayOutMixStreamVolume=_audioPlayOutMixStreamVolume;
@property(nonatomic) long long audioPlayOutMixStreamChannelNum; // @synthesize audioPlayOutMixStreamChannelNum=_audioPlayOutMixStreamChannelNum;
@property(nonatomic) long long audioPlayOutMixStreamSampleRate; // @synthesize audioPlayOutMixStreamSampleRate=_audioPlayOutMixStreamSampleRate;
@property(nonatomic) _Bool useAudioPlayOutMixStream; // @synthesize useAudioPlayOutMixStream=_useAudioPlayOutMixStream;
@property(nonatomic) int audioOutputChannelNum; // @synthesize audioOutputChannelNum=_audioOutputChannelNum;
@property(nonatomic) int audioInputChannelNum; // @synthesize audioInputChannelNum=_audioInputChannelNum;
@property(nonatomic) int audioOutputSampleRate; // @synthesize audioOutputSampleRate=_audioOutputSampleRate;
@property(nonatomic) int audioInputSampleRate; // @synthesize audioInputSampleRate=_audioInputSampleRate;
@property _Bool forceGlobalAPIServer; // @synthesize forceGlobalAPIServer=_forceGlobalAPIServer;
@property _Bool isAudioExtRender; // @synthesize isAudioExtRender=_isAudioExtRender;
@property _Bool isAudioExtSink; // @synthesize isAudioExtSink=_isAudioExtSink;
@property _Bool isAudioExtSource; // @synthesize isAudioExtSource=_isAudioExtSource;
@property _Bool isVideoExtRender; // @synthesize isVideoExtRender=_isVideoExtRender;
@property _Bool isVideoExtSink; // @synthesize isVideoExtSink=_isVideoExtSink;
@property _Bool isVideoExtSource; // @synthesize isVideoExtSource=_isVideoExtSource;
@property(retain, nonatomic) OnerDualStreamSetting *dualStreamSetting; // @synthesize dualStreamSetting=_dualStreamSetting;
@property(retain, nonatomic) OnerStreamInfo *lowStreamInfo; // @synthesize lowStreamInfo=_lowStreamInfo;
@property(nonatomic) long long audioVolumeIndicationInterval; // @synthesize audioVolumeIndicationInterval=_audioVolumeIndicationInterval;
@property(retain, nonatomic) NSString *signalServerHost; // @synthesize signalServerHost=_signalServerHost;
@property(retain, nonatomic) NSArray *apiServerHosts; // @synthesize apiServerHosts=_apiServerHosts;
@property(retain, nonatomic) NSString *roomId; // @synthesize roomId=_roomId;
@property(retain, nonatomic) NSString *userId; // @synthesize userId=_userId;
@property(nonatomic) long long profile; // @synthesize profile=_profile;
@property(nonatomic) long long roleType; // @synthesize roleType=_roleType;
@property(nonatomic) __weak id <RTCVendorDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) long long videoKBitrate; // @synthesize videoKBitrate=_videoKBitrate;
@property(nonatomic) long long frameRate; // @synthesize frameRate=_frameRate;
@property(nonatomic) long long orientationMode; // @synthesize orientationMode=_orientationMode;
@property(nonatomic) struct CGSize videoSize; // @synthesize videoSize=_videoSize;
@property(retain, nonatomic) NSData *signature; // @synthesize signature=_signature;
@property(retain, nonatomic) NSString *token; // @synthesize token=_token;
@property(retain, nonatomic) NSString *appId; // @synthesize appId=_appId;
@property(retain) NSMutableDictionary *host2iplist; // @synthesize host2iplist=_host2iplist;
@property(retain, nonatomic) NSString *deviceId; // @synthesize deviceId=_deviceId;
@property(retain, nonatomic) OnerAudioProcessContext *audioProcessContext; // @synthesize audioProcessContext=_audioProcessContext;
@property(retain, nonatomic) OnerAudioProcess *audioProcess; // @synthesize audioProcess=_audioProcess;
- (id)_processAudioWithData:(void *)arg1 frameNum:(long long)arg2 sampleRate:(long long)arg3 channelNum:(long long)arg4;
- (void)adjustAudioMixingPlayoutSignalVolume:(int)arg1;
- (_Bool)pushAudioMixingStreamData:(void *)arg1 frameNum:(long long)arg2 sampleRate:(long long)arg3 channelNum:(long long)arg4;
- (int)getAudioMixingStreamCachedFrameNum;
- (_Bool)setAudioPlayoutMixStream:(_Bool)arg1 sampleRate:(long long)arg2 channelNum:(long long)arg3;
- (void)enableWebSdkInteroperability:(_Bool)arg1;
- (long long)sendMessage:(id)arg1 message:(id)arg2;
- (void)setMediaServerAddr:(id)arg1;
- (int)pullExternalAudioFrame:(void *)arg1 size:(int)arg2;
- (int)pushExternalAudioFrame:(void *)arg1 size:(int)arg2 timestamp:(double)arg3;
- (void)audioExtRenderEnable:(_Bool)arg1 sampleRate:(int)arg2 playoutChannelNum:(int)arg3;
- (void)audioExtSinkEnable:(_Bool)arg1;
- (void)audioExtSourceEnable:(_Bool)arg1 sampleRate:(int)arg2 recordChannelNum:(int)arg3;
- (int)pushExternalVideoFrame:(struct __CVBuffer *)arg1 time:(CDStruct_1b6d18a9)arg2 rotation:(long long)arg3 extendedData:(id)arg4 supplementaryInfo:(id)arg5;
- (void)videoExtRenderEnable:(_Bool)arg1;
- (void)videoExtSinkEnable:(_Bool)arg1;
- (void)videoExtSourceEnable:(_Bool)arg1 useTexture:(_Bool)arg2 pushMode:(_Bool)arg3;
- (id)lowStreamInfoFromUserSetting;
- (long long)getClientType;
- (int)disableLastmileTest;
- (int)enableLastmileTest;
- (int)unloadEffect:(int)arg1;
- (int)stopAllEffects;
- (int)stopEffect:(int)arg1;
- (int)playEffect:(int)arg1 filePath:(id)arg2 loopCount:(int)arg3 pitch:(double)arg4 pan:(double)arg5 gain:(double)arg6 publish:(_Bool)arg7;
- (int)preloadEffect:(int)arg1 filePath:(id)arg2;
- (int)resumeAudioMixing;
- (int)pauseAudioMixing;
- (int)stopAudioMixing;
- (int)startAudioMixing:(id)arg1 loopback:(_Bool)arg2 replace:(_Bool)arg3 cycle:(long long)arg4;
- (void)setCameraCapturerConfiguration:(id)arg1;
- (_Bool)setAudioFrameObserver:(id)arg1;
- (int)setParameters:(id)arg1;
- (void)setLogFile:(id)arg1;
- (void)adjustRecordingSignalVolume:(long long)arg1;
- (void)adjustPlaybackSignalVolume:(long long)arg1;
- (int)enableAudioVolumeIndication:(long long)arg1 smooth:(long long)arg2;
- (int)enableInEarMonitoring:(_Bool)arg1;
- (_Bool)isSpeakerphoneEnabled;
- (int)setEnableSpeakerphone:(_Bool)arg1;
- (int)setDefaultAudioRoutetoSpeakerphone:(_Bool)arg1;
- (int)setDefaultMuteAllRemoteAudioStreams:(_Bool)arg1;
- (int)muteAllRemoteAudioStreams:(_Bool)arg1;
- (int)muteRemoteAudioStream:(id)arg1 mute:(_Bool)arg2;
- (int)muteLocalAudioStream:(_Bool)arg1;
- (int)enableLocalAudio:(_Bool)arg1;
- (void)disableAudio;
- (void)enableAudio;
- (int)removePublishStreamUrl:(id)arg1;
- (int)addPublishStreamUrl:(id)arg1 transcodingEnabled:(_Bool)arg2;
- (int)setLiveTranscoding:(id)arg1;
- (int)setupRemoteSubscribeFallbackOption:(long long)arg1;
- (int)setupLocalPublishFallbackOption:(long long)arg1;
- (void)setVideoLowStreamResolution:(struct CGSize)arg1 andFrameRate:(long long)arg2 maxKbps:(long long)arg3 orientationMode:(long long)arg4;
- (int)setRemoteVideoStream:(id)arg1 type:(long long)arg2;
- (int)setRemoteDefaultVideoStreamType:(long long)arg1;
- (void)enableRecvDualStream:(_Bool)arg1;
- (void)enableSendDualStream:(_Bool)arg1;
- (int)setDefaultMuteAllRemoteVideoStreams:(_Bool)arg1;
- (int)muteAllRemoteVideoStreams:(_Bool)arg1;
- (int)muteRemoteVideoStream:(id)arg1 mute:(_Bool)arg2;
- (int)muteLocalVideoStream:(_Bool)arg1;
- (int)enableLocalVideo:(_Bool)arg1;
- (void)disableVideo;
- (void)enableVideo;
- (int)stopPreview;
- (int)startPreview;
- (int)setupRemoteVideo:(id)arg1;
- (int)setLocalVideoMirrorMode:(unsigned long long)arg1;
- (int)setupLocalVideo:(id)arg1;
- (int)switchCamera;
- (int)leaveChannel:(CDUnknownBlockType)arg1;
- (int)joinChannelByKey:(id)arg1 channelName:(id)arg2 info:(id)arg3 uid:(id)arg4;
- (int)setChannelProfile:(long long)arg1;
- (void)destroySubEngineKit;
- (id)subEngineKitVersion;
- (int)setClientRole:(long long)arg1;
- (int)setVideoResolution:(struct CGSize)arg1 andFrameRate:(long long)arg2 maxKbps:(long long)arg3 orientationMode:(long long)arg4;
- (int)setupWithAppId:(id)arg1 signature:(id)arg2 delegate:(id)arg3;
- (int)setupWithAppId:(id)arg1 token:(id)arg2 delegate:(id)arg3;
- (int)setSettingBeforeCreateSubEngine:(id)arg1;

@end

