//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "VEUnitObject.h"

#import "IESMMHashProtocol-Protocol.h"
#import "IVEClipPreprocessBinProtocol-Protocol.h"
#import "IVEUnitObject-Protocol.h"
#import "VEProcessSampleDelegate-Protocol.h"

@class HTSVideoData, NSString;

@interface VECrossPlatClipPreprocessAdapter : VEUnitObject <IVEUnitObject, VEProcessSampleDelegate, IESMMHashProtocol, IVEClipPreprocessBinProtocol>
{
    struct IVEClipPreprocessBinAdapter *clippreprocessBin_;
    // Error parsing type: ^{TTVideoEditor=^^?BBB^{TEStreamingTimeline}^{TESequence}^{TEStreamingEngine}^{TEStreamingEngine}{atomic_flag=AB}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> > > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::less<std::__1::basic_string<char> >, true> >=Q}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}iii^qi^{TEBundle}ii^{ITECallbackClient}^{ITECallbackClient}^{ITECallbackClient}{TEFilterManager=I{map<unsigned int, std::__1::vector<TEFilter *, std::__1::allocator<TEFilter *> >, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::vector<TEFilter *, std::__1::allocator<TEFilter *> > > > >={__tree<std::__1::__value_type<unsigned int, std::__1::vector<TEFilter *, std::__1::allocator<TEFilter *> > >, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<TEFilter *, std::__1::allocator<TEFilter *> > >, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::vector<TEFilter *, std::__1::allocator<TEFilter *> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::vector<TEFilter *, std::__1::allocator<TEFilter *> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<TEFilter *, std::__1::allocator<TEFilter *> > >, std::__1::less<unsigned int>, true> >=Q}}}{map<unsigned int, TEFilter *, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, TEFilter *> > >={__tree<std::__1::__value_type<unsigned int, TEFilter *>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, TEFilter *>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, TEFilter *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, TEFilter *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, TEFilter *>, std::__1::less<unsigned int>, true> >=Q}}}{map<std::__1::basic_string<char>, std::__1::vector<TEFilter *, std::__1::allocator<TEFilter *> >, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::vector<TEFilter *, std::__1::allocator<TEFilter *> > > > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<TEFilter *, std::__1::allocator<TEFilter *> > >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<TEFilter *, std::__1::allocator<TEFilter *> > >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<TEFilter *, std::__1::allocator<TEFilter *> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<TEFilter *, std::__1::allocator<TEFilter *> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<TEFilter *, std::__1::allocator<TEFilter *> > >, std::__1::less<std::__1::basic_string<char> >, true> >=Q}}}^{TESequence}{map<unsigned int, std::__1::vector<TEFilter *, std::__1::allocator<TEFilter *> >, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::vector<TEFilter *, std::__1::allocator<TEFilter *> > > > >={__tree<std::__1::__value_type<unsigned int, std::__1::vector<TEFilter *, std::__1::allocator<TEFilter *> > >, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<TEFilter *, std::__1::allocator<TEFilter *> > >, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::vector<TEFilter *, std::__1::allocator<TEFilter *> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::vector<TEFilter *, std::__1::allocator<TEFilter *> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<TEFilter *, std::__1::allocator<TEFilter *> > >, std::__1::less<unsigned int>, true> >=Q}}}}fBBBBBBB{deque<char *, std::__1::allocator<char *> >={__split_buffer<char **, std::__1::allocator<char **> >=^^*^^*^^*{__compressed_pair<char ***, std::__1::allocator<char **> >=^^*}}Q{__compressed_pair<unsigned long, std::__1::allocator<char *> >=Q}}{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}Q{__compressed_pair<unsigned long, std::__1::allocator<double> >=Q}}iBqqi^{VideoCompileEncodeSetting}^{VideoCompileEncodeSetting}B^{TEStickerEffect}B^{MV_INFO}^{MV_AUDIO_INFO}^viBB^{thread}B^{TEBingoEffect}}, name: videoEditor_
    _Bool _bUseFilter;
    NSString *_route;
    HTSVideoData *_videoData;
}

@property(retain, nonatomic) HTSVideoData *videoData; // @synthesize videoData=_videoData;
@property(nonatomic) _Bool bUseFilter; // @synthesize bUseFilter=_bUseFilter;
@property(retain, nonatomic) NSString *route; // @synthesize route=_route;
- (void).cxx_destruct;
- (void)setTransformData:(id)arg1;
- (void)setTransformFullRangeInfo:(_Bool)arg1;
- (void)setConfig:(id)arg1 updateVideoDataType:(long long)arg2;
-     // Error parsing type: v24@0:8^{VEEditorAdapter=^^?{TEMessageQueue={list<TEMsg, std::__1::allocator<TEMsg> >={__list_node_base<TEMsg, void *>=^{__list_node_base<TEMsg, void *>}^{__list_node_base<TEMsg, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<TEMsg, void *> > >=Q}}}^{TEThread}BBB{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_cond_t=q[40c]}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}^{_opaque_pthread_t}^^?i^^?^^?BB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}^{TEOpenGLVideoFrameAllocator}^{TEOpenGLImageFrameAllocator}^{TESharedGLContext}^{TEVideoGraph}{vector<core::TEUnitBin *, std::__1::allocator<core::TEUnitBin *> >=^^{TEUnitBin}^^{TEUnitBin}{__compressed_pair<core::TEUnitBin **, std::__1::allocator<core::TEUnitBin *> >=^^{TEUnitBin}}}{map<_GUID, core::TEUnitBin *, std::__1::less<_GUID>, std::__1::allocator<std::__1::pair<const _GUID, core::TEUnitBin *> > >={__tree<std::__1::__value_type<_GUID, core::TEUnitBin *>, std::__1::__map_value_compare<_GUID, std::__1::__value_type<_GUID, core::TEUnitBin *>, std::__1::less<_GUID>, true>, std::__1::allocator<std::__1::__value_type<_GUID, core::TEUnitBin *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<_GUID, core::TEUnitBin *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<_GUID, std::__1::__value_type<_GUID, core::TEUnitBin *>, std::__1::less<_GUID>, true> >=Q}}}i^{TEDriveBin}^{TEDecodeBin}^{TEVideoOutputBin}^{TEGLSourceBin}^{TERejustFrameRateBin}{TESmartPtr<TEStickerEffect>=^{TEStickerEffect}}^{TETrackCompositeBin}^{TEClipPreprocessBin}^{TESequenceBin}^{TEClipEffectBin}^{TETrackCompositeBin}{TESmartPtr<TEStickerEffect>=^{TEStickerEffect}}{TESmartPtr<TENewEngineStickerEffect>=^{TENewEngineStickerEffect}}{TESmartPtr<TENewEngineStickerEffect>=^{TENewEngineStickerEffect}}{TESmartPtr<TEStickerEffect>=^{TEStickerEffect}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}^{VEDriveBinAdapter}^{VEDecodeBinAdapter}^{VEClipPreprocessBinAdapter}^{VESequenceBinAdaptor}^{VEClipEffectBinAdapter}^{TTVideoEditor}{TESizei=ii}{TESizei=ii}q{mutex={_opaque_pthread_mutex_t=q[56c]}}{condition_variable={_opaque_pthread_cond_t=q[40c]}}{atomic<bool>=AB}{atomic<bool>=AB}{atomic<bool>=AB}{atomic<bool>=AB}{atomic<bool>=AB}{atomic<bool>=AB}{atomic<bool>=AB}{atomic<bool>=AB}{atomic<bool>=AB}^{TEGLInstanceTaskQueue}{TEVODescriptor={TESmartPtr<ITEStreamingTimeline>=^{ITEStreamingTimeline}}{vector<STEStreamingClip *, std::__1::allocator<STEStreamingClip *> >=^^{STEStreamingClip}^^{STEStreamingClip}{__compressed_pair<STEStreamingClip **, std::__1::allocator<STEStreamingClip *> >=^^{STEStreamingClip}}}^{STEStreamingClip}iqqqBIIIiBi{tagSTEVideoResolution=II{tagSTERational=ii}{tagSTERational=ii}ii}{time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > >={duration<long long, std::__1::ratio<1, 1000000000> >=q}}qi{vector<long long, std::__1::allocator<long long> >=^q^q{__compressed_pair<long long *, std::__1::allocator<long long> >=^q}}^v}qq{TESmartPtr<ITEStreamingTimeline>=^{ITEStreamingTimeline}}BiB{tagSTERational=ii}i@@@@}16, name: setEditorAdapter:

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

