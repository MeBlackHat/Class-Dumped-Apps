//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "AudioCapturerDelegate-Protocol.h"

@class LSAudioBufferQueue, LSGLContext, LSGLEffectFilter, LSGLPictureInput, LSGLPictureMixer, LSGLPictureOutput, LSGLPreviewView, LSGLSplitFilter, LiveStreamAudioRecord, LiveStreamCaptureConfig, LiveStreamSession, NSArray, NSMutableDictionary, NSString;
@protocol OS_dispatch_queue;

@interface LiveStreamCapture : NSObject <AudioCapturerDelegate>
{
    // Error parsing type: ^{AudioDevice={mutex={_opaque_pthread_mutex_t=q[56c]}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{condition_variable={_opaque_pthread_cond_t=q[40c]}}@^{OpaqueAudioComponentInstance}^{OpaqueAudioComponentInstance}^{OpaqueAudioComponent}^{AudioBufferList}ddiBBBBBBB@{AudioStreamBasicDescription=dIIIIIIII}{atomic<bool>=AB}BBBB{function<void (AudioBufferList *, int, int, int, int, void *)>={type=[24C]}^{__base<void (AudioBufferList *, int, int, int, int, void *)>}}{function<void (AudioBufferList *, const AudioTimeStamp *, int, AudioBufferList *, AudioBufferList *, void *)>={type=[24C]}^{__base<void (AudioBufferList *, const AudioTimeStamp *, int, AudioBufferList *, AudioBufferList *, void *)>}}^v^v^vqq{queue<AudioBufferList *, std::__1::deque<AudioBufferList *, std::__1::allocator<AudioBufferList *> > >={deque<AudioBufferList *, std::__1::allocator<AudioBufferList *> >={__split_buffer<AudioBufferList **, std::__1::allocator<AudioBufferList **> >=^^^{AudioBufferList}^^^{AudioBufferList}^^^{AudioBufferList}{__compressed_pair<AudioBufferList ***, std::__1::allocator<AudioBufferList **> >=^^^{AudioBufferList}}}Q{__compressed_pair<unsigned long, std::__1::allocator<AudioBufferList *> >=Q}}}{queue<AudioTimeStamp *, std::__1::deque<AudioTimeStamp *, std::__1::allocator<AudioTimeStamp *> > >={deque<AudioTimeStamp *, std::__1::allocator<AudioTimeStamp *> >={__split_buffer<AudioTimeStamp **, std::__1::allocator<AudioTimeStamp **> >=^^^{AudioTimeStamp}^^^{AudioTimeStamp}^^^{AudioTimeStamp}{__compressed_pair<AudioTimeStamp ***, std::__1::allocator<AudioTimeStamp **> >=^^^{AudioTimeStamp}}}Q{__compressed_pair<unsigned long, std::__1::allocator<AudioTimeStamp *> >=Q}}}B{thread=^{_opaque_pthread_t}}d}, name: _audioDevice
    _Bool _enableEffect;
    _Bool _enableMixFilterEffect;
    LSGLPictureInput *_gl_input;
    LSGLPictureOutput *_gl_output;
    LSGLPictureOutput *_gl_output_bypass;
    LSGLEffectFilter *_gl_effect_filter;
    LSGLEffectFilter *_gl_effect_mixed_filter;
    LSGLSplitFilter *_gl_split_filter;
    LSGLPictureMixer *_gl_mixer;
    _Bool _use_mixer;
    NSMutableDictionary *_layer_input_map;
    struct CGSize _bypass_size;
    unsigned int _bypass_fmt;
    NSObject<OS_dispatch_queue> *_graph_queue;
    NSObject<OS_dispatch_queue> *_audio_queue;
    void *LSCaptureQueueKey;
    void *LSCaptureAudioQueueKey;
    struct unique_ptr<ObserverInterface, std::__1::default_delete<ObserverInterface>> _audio_player_factory;
    struct mutex _data_mutex;
    // Error parsing type: {atomic<bool>="__a_"AB}, name: _b_can_input
    struct composer_mode_type_t *composer_mode_type;
    NSMutableDictionary *effect_path_dict;
    NSArray *composer_nodes;
    struct unique_ptr<std::__1::vector<composer_node_tag_value_t *, std::__1::allocator<composer_node_tag_value_t *>>, std::__1::default_delete<std::__1::vector<composer_node_tag_value_t *, std::__1::allocator<composer_node_tag_value_t *>>>> node_models;
    _Bool _should_check_input_size;
    struct scoped_refptr<avframework::EstimateInterface<int>> _inputFrameRateEstimator;
    struct scoped_refptr<avframework::EstimateInterface<int>> _outputFrameRateEstimator;
    struct scoped_refptr<avframework::EstimateInterface<int>> _previewFrameRateEstimator;
    struct unique_ptr<avframework::AudioResample, std::__1::default_delete<avframework::AudioResample>> audio_recognize_resampler;
    struct unique_ptr<avframework::AudioFrame, std::__1::default_delete<avframework::AudioFrame>> audio_frame_for_recognizing;
    _Bool speechRecognizeEanble;
    _Bool audioEffectProcessEnable;
    LSAudioBufferQueue *_audio_buffer_queue;
    _Bool _streamMirror;
    double initVideoPts;
    double initSystemTime;
    _Bool _useAudioTimeBase;
    _Bool _enableSpeaker;
    _Bool _needOpenAEC;
    LSGLPreviewView *_gl_remote_render_view;
    _Bool _reopenAudioDevice;
    _Bool _renderOnSingleView;
    _Bool _purgeMemoryIfNeeded;
    _Bool _audioEffectSpeakerEnable;
    _Bool _bRecordingWav;
    unsigned int _inPixelFmt;
    int _cameraLayer;
    long long _cameraPosition;
    unsigned long long _inRotateMode;
    LiveStreamSession *_session;
    long long _previewMode;
    CDUnknownBlockType _firstFrameRenderCallback;
    CDUnknownBlockType _didCapturedAudioBufferList;
    CDUnknownBlockType _effectInfoBlck;
    LiveStreamCaptureConfig *_captureConfig;
    LSGLPreviewView *_gl_render_view;
    LSGLContext *_context;
    CDUnknownBlockType _getAudioCallback;
    CDUnknownBlockType _videoProcessedCallback;
    CDUnknownBlockType _bypassCallback;
    CDUnknownBlockType _speechRecognizeCallback;
    NSString *_recordingFilePath;
    LiveStreamAudioRecord *_audioFileWriter;
    struct CGSize _outputSize;
}

+ (_Bool)containsEffectModule;
+ (void)resetContext;
+ (void)setResourceFinder:(CDUnknownFunctionPointerType)arg1;
+ (id)getEffectABInfoWithLicense:(id)arg1;
+ (_Bool)containsEffectModule;
+ (void)setResourceFinder:(CDUnknownFunctionPointerType)arg1;
@property(retain, nonatomic) LiveStreamAudioRecord *audioFileWriter; // @synthesize audioFileWriter=_audioFileWriter;
@property(retain, nonatomic) NSString *recordingFilePath; // @synthesize recordingFilePath=_recordingFilePath;
@property(nonatomic) _Bool bRecordingWav; // @synthesize bRecordingWav=_bRecordingWav;
@property(copy, nonatomic) CDUnknownBlockType speechRecognizeCallback; // @synthesize speechRecognizeCallback=_speechRecognizeCallback;
@property(copy, nonatomic) CDUnknownBlockType bypassCallback; // @synthesize bypassCallback=_bypassCallback;
@property(copy, nonatomic) CDUnknownBlockType videoProcessedCallback; // @synthesize videoProcessedCallback=_videoProcessedCallback;
@property(copy, nonatomic) CDUnknownBlockType getAudioCallback; // @synthesize getAudioCallback=_getAudioCallback;
@property(retain, nonatomic) LSGLContext *context; // @synthesize context=_context;
@property(retain, nonatomic) LSGLPreviewView *gl_render_view; // @synthesize gl_render_view=_gl_render_view;
@property(retain, nonatomic) LiveStreamCaptureConfig *captureConfig; // @synthesize captureConfig=_captureConfig;
@property(copy, nonatomic) CDUnknownBlockType effectInfoBlck; // @synthesize effectInfoBlck=_effectInfoBlck;
@property(copy, nonatomic) CDUnknownBlockType didCapturedAudioBufferList; // @synthesize didCapturedAudioBufferList=_didCapturedAudioBufferList;
@property(copy, nonatomic) CDUnknownBlockType firstFrameRenderCallback; // @synthesize firstFrameRenderCallback=_firstFrameRenderCallback;
@property(nonatomic) int cameraLayer; // @synthesize cameraLayer=_cameraLayer;
@property(nonatomic) _Bool audioEffectSpeakerEnable; // @synthesize audioEffectSpeakerEnable=_audioEffectSpeakerEnable;
@property(nonatomic) long long previewMode; // @synthesize previewMode=_previewMode;
@property(nonatomic) __weak LiveStreamSession *session; // @synthesize session=_session;
@property(nonatomic) struct CGSize outputSize; // @synthesize outputSize=_outputSize;
@property(nonatomic) unsigned long long inRotateMode; // @synthesize inRotateMode=_inRotateMode;
@property(nonatomic) unsigned int inPixelFmt; // @synthesize inPixelFmt=_inPixelFmt;
@property(nonatomic) long long cameraPosition; // @synthesize cameraPosition=_cameraPosition;
@property(nonatomic) _Bool purgeMemoryIfNeeded; // @synthesize purgeMemoryIfNeeded=_purgeMemoryIfNeeded;
@property(nonatomic) _Bool renderOnSingleView; // @synthesize renderOnSingleView=_renderOnSingleView;
- (id).cxx_construct;
- (void).cxx_destruct;
-     // Error parsing type: ^{AudioDevice={mutex={_opaque_pthread_mutex_t=q[56c]}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{condition_variable={_opaque_pthread_cond_t=q[40c]}}@^{OpaqueAudioComponentInstance}^{OpaqueAudioComponentInstance}^{OpaqueAudioComponent}^{AudioBufferList}ddiBBBBBBB@{AudioStreamBasicDescription=dIIIIIIII}{atomic<bool>=AB}BBBB{function<void (AudioBufferList *, int, int, int, int, void *)>={type=[24C]}^{__base<void (AudioBufferList *, int, int, int, int, void *)>}}{function<void (AudioBufferList *, const AudioTimeStamp *, int, AudioBufferList *, AudioBufferList *, void *)>={type=[24C]}^{__base<void (AudioBufferList *, const AudioTimeStamp *, int, AudioBufferList *, AudioBufferList *, void *)>}}^v^v^vqq{queue<AudioBufferList *, std::__1::deque<AudioBufferList *, std::__1::allocator<AudioBufferList *> > >={deque<AudioBufferList *, std::__1::allocator<AudioBufferList *> >={__split_buffer<AudioBufferList **, std::__1::allocator<AudioBufferList **> >=^^^{AudioBufferList}^^^{AudioBufferList}^^^{AudioBufferList}{__compressed_pair<AudioBufferList ***, std::__1::allocator<AudioBufferList **> >=^^^{AudioBufferList}}}Q{__compressed_pair<unsigned long, std::__1::allocator<AudioBufferList *> >=Q}}}{queue<AudioTimeStamp *, std::__1::deque<AudioTimeStamp *, std::__1::allocator<AudioTimeStamp *> > >={deque<AudioTimeStamp *, std::__1::allocator<AudioTimeStamp *> >={__split_buffer<AudioTimeStamp **, std::__1::allocator<AudioTimeStamp **> >=^^^{AudioTimeStamp}^^^{AudioTimeStamp}^^^{AudioTimeStamp}{__compressed_pair<AudioTimeStamp ***, std::__1::allocator<AudioTimeStamp **> >=^^^{AudioTimeStamp}}}Q{__compressed_pair<unsigned long, std::__1::allocator<AudioTimeStamp *> >=Q}}}B{thread=^{_opaque_pthread_t}}d}16@0:8, name: audioDevice
-     // Error parsing type: v24@0:8^{AudioDevice={mutex={_opaque_pthread_mutex_t=q[56c]}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{condition_variable={_opaque_pthread_cond_t=q[40c]}}@^{OpaqueAudioComponentInstance}^{OpaqueAudioComponentInstance}^{OpaqueAudioComponent}^{AudioBufferList}ddiBBBBBBB@{AudioStreamBasicDescription=dIIIIIIII}{atomic<bool>=AB}BBBB{function<void (AudioBufferList *, int, int, int, int, void *)>={type=[24C]}^{__base<void (AudioBufferList *, int, int, int, int, void *)>}}{function<void (AudioBufferList *, const AudioTimeStamp *, int, AudioBufferList *, AudioBufferList *, void *)>={type=[24C]}^{__base<void (AudioBufferList *, const AudioTimeStamp *, int, AudioBufferList *, AudioBufferList *, void *)>}}^v^v^vqq{queue<AudioBufferList *, std::__1::deque<AudioBufferList *, std::__1::allocator<AudioBufferList *> > >={deque<AudioBufferList *, std::__1::allocator<AudioBufferList *> >={__split_buffer<AudioBufferList **, std::__1::allocator<AudioBufferList **> >=^^^{AudioBufferList}^^^{AudioBufferList}^^^{AudioBufferList}{__compressed_pair<AudioBufferList ***, std::__1::allocator<AudioBufferList **> >=^^^{AudioBufferList}}}Q{__compressed_pair<unsigned long, std::__1::allocator<AudioBufferList *> >=Q}}}{queue<AudioTimeStamp *, std::__1::deque<AudioTimeStamp *, std::__1::allocator<AudioTimeStamp *> > >={deque<AudioTimeStamp *, std::__1::allocator<AudioTimeStamp *> >={__split_buffer<AudioTimeStamp **, std::__1::allocator<AudioTimeStamp **> >=^^^{AudioTimeStamp}^^^{AudioTimeStamp}^^^{AudioTimeStamp}{__compressed_pair<AudioTimeStamp ***, std::__1::allocator<AudioTimeStamp **> >=^^^{AudioTimeStamp}}}Q{__compressed_pair<unsigned long, std::__1::allocator<AudioTimeStamp *> >=Q}}}B{thread=^{_opaque_pthread_t}}d}16, name: setAudioDevice:
- (void)stopRecordingWav:(CDUnknownBlockType)arg1;
- (void)startRecordingWav:(long long)arg1 maxRecordingDuration:(float)arg2 withCompleteHandler:(CDUnknownBlockType)arg3;
- (void)setEffectRecordPath:(id)arg1;
- (_Bool)dumpIsFinished;
- (void)resetRecording;
- (void)startRecordingWithDuration:(double)arg1 delay:(double)arg2 fps:(unsigned long long)arg3 WithCompletionHandler:(CDUnknownBlockType)arg4;
- (id)glGraphShow;
- (void)setEffectRenderCacheTextureWithImage:(id)arg1 algorithmType:(id)arg2;
- (void)fetchEffectDetectPhotoContentWithImage:(id)arg1 algorithmType:(id)arg2 isLastPhone:(_Bool)arg3 callback:(CDUnknownBlockType)arg4;
- (void)removeEffectAudioConfig;
- (void)setEffectAudioConfig:(id)arg1;
- (void)setEnableAudioEffect:(_Bool)arg1;
- (void)setSpeechRecognitionCallback:(CDUnknownBlockType)arg1;
- (_Bool)isSpeechRecognizing;
- (void)stopSpeechRecognizing;
- (void)startSpeechRecognizing;
- (void)checkBufferInEffectCategory:(struct __CVBuffer *)arg1;
- (_Bool)isEffectEnabled:(long long)arg1;
- (_Bool)isEffectEnabled;
- (void)setEnableEffect:(_Bool)arg1;
- (void)destructEffectModules;
- (void)initialEffectCategory;
- (void)checkInputBuffer:(struct __CVBuffer *)arg1;
- (void)startIfNeeded;
- (void)stopIfNeeded;
- (void)destructCategoriesIfNeeded;
- (void)initialCategoriesIfNeeded;
- (void)setVideoProcessedBypassCallback:(CDUnknownBlockType)arg1;
- (void)setupBypassGraph;
- (void)setBypassOutputSize:(struct CGSize)arg1 pixelFormat:(unsigned int)arg2 enable:(_Bool)arg3;
- (void)pushVideoBuffer:(struct __CVBuffer *)arg1 withCMTime:(CDStruct_1b6d18a9)arg2 toLayer:(int)arg3;
- (void)pushVideoBuffer:(struct __CVBuffer *)arg1 andCMTime:(CDStruct_1b6d18a9)arg2;
- (void)pushVideoTexture:(int)arg1 width:(long long)arg2 height:(long long)arg3 pts:(CDStruct_1b6d18a9)arg4 toLayer:(int)arg5;
- (void)forceDisplayTexture:(int)arg1 width:(long long)arg2 height:(long long)arg3 pts:(CDStruct_1b6d18a9)arg4 layerId:(int)arg5;
- (void)_setPreviewMode:(long long)arg1;
- (void)setupGLVideoPath;
- (void)removeVideoInput:(int)arg1;
- (void)updateVideoRect:(struct CGRect)arg1 forLayer:(int)arg2 animated:(_Bool)arg3 frames:(int)arg4;
- (void)addVideoInput:(struct CGRect)arg1 forLayer:(int)arg2;
- (void)addVideoInput:(struct CGRect)arg1 fillMode:(unsigned long long)arg2 zOrder:(int)arg3 forLayer:(int)arg4 rotation:(unsigned long long)arg5;
- (id)getEffectConfig;
- (void)removeEffectNode;
- (void)addEffectNode;
- (void)setCanvasColor:(id)arg1;
- (void)removeMixedEffectNode;
- (void)addMixedEffectNode;
- (void)setRemoteTargetView:(id)arg1;
- (void)addMixerNode;
- (void)addIONodes;
- (void)shouldUseAudioTimeBase:(id)arg1;
- (id)getGLContext;
- (void)setSharedEAGLContext:(id)arg1;
- (id)previewView;
- (void)setPreviewFrame:(struct CGRect)arg1;
- (void)setStreamMirror:(_Bool)arg1;
- (id)resetPreviewView:(id)arg1;
- (void)setMixerTriggerLayer:(int)arg1;
- (void)didAudioBufferCaptured:(struct AudioBufferList *)arg1 timeStamp:(const struct AudioTimeStamp *)arg2 numberOfFrames:(int)arg3 audioData:(struct AudioBufferList *)arg4 earMonitorData:(struct AudioBufferList *)arg5;
@property(nonatomic, getter=isEchoCancellationEnabled) _Bool echoCancellationEnabled;
@property(readonly, nonatomic) struct AudioStreamBasicDescription audioStreamBasicDescription;
- (void)setEnableSpeaker:(_Bool)arg1;
- (void)audioPlayerInterrupted:(_Bool)arg1;
- (void)audioCaptureInterrupted:(_Bool)arg1;
- (void)stopAudioCapture;
- (void)startAudioCapture:(_Bool)arg1;
- (void)startAudioCapture;
- (void)startVideoCapture;
- (void)stopVideoCapture;
- (void)dealloc;
- (void)setupInputNodeWith:(unsigned int)arg1;
- (void)setOutputCropSize:(struct CGSize)arg1;
- (void)setupAudioFactoryWithBlock:(CDUnknownBlockType)arg1;
- (void)setupAudioFactory;
- (void)setMultiThreadEnable:(_Bool)arg1;
- (id)initWithConfig:(id)arg1;
- (id)init;
- (void)runSyncOnAudioQueue:(CDUnknownBlockType)arg1;
- (void)runSyncOnQueue:(CDUnknownBlockType)arg1;
- (id)parseWithJsonString:(id)arg1;
- (void)parseAndConfigEffectABInfo:(id)arg1 allABInfo:(id)arg2;
- (void)setEffectABInfo:(id)arg1;
- (void)setEffectABLicense:(id)arg1;
- (id)getExpressionInfo;
- (void)resumeEffect:(long long)arg1;
- (void)pauseEffect:(long long)arg1;
- (void)reloadComposerNodes:(id)arg1 withTags:(id)arg2;
- (void)reloadComposerNodes:(id)arg1;
- (void)removeComposerNodes:(id)arg1 withTags:(id)arg2;
- (void)removeComposerNodes:(id)arg1;
- (void)appendComposerNodes:(id)arg1 withTags:(id)arg2;
- (void)appendComposerNodes:(id)arg1;
- (void)p_applyComposerNodes:(id)arg1 nodePaths:(id)arg2 withTags:(id)arg3 enableFakeFace:(_Bool)arg4;
- (void)applyComposerNodes:(id)arg1 withTags:(id)arg2 enableFakeFace:(_Bool)arg3 type:(long long)arg4;
- (void)applyComposerNodes:(id)arg1 withTags:(id)arg2 enableFakeFace:(_Bool)arg3;
- (void)p_replaceComposerNodes:(id)arg1 nodes:(id)arg2 withNewNodes:(id)arg3 andTags:(id)arg4;
- (void)replaceComposerNodes:(id)arg1 withNewNodes:(id)arg2 andTags:(id)arg3 type:(long long)arg4;
- (void)replaceComposerNodes:(id)arg1 withNewNodes:(id)arg2 andTags:(id)arg3;
- (void)p_applyComposerNodes:(id)arg1 nodePaths:(id)arg2 enableFakeFace:(_Bool)arg3;
- (void)applyComposerNodes:(id)arg1 enableFakeFace:(_Bool)arg2 type:(long long)arg3;
- (void)applyComposerNodes:(id)arg1 enableFakeFace:(_Bool)arg2;
- (void)p_updateComposerNode:(id)arg1 nodePaths:(id)arg2 tag:(id)arg3 value:(double)arg4;
- (void)updateComposerNode:(id)arg1 tag:(id)arg2 value:(double)arg3 type:(long long)arg4;
- (void)updateComposerNode:(id)arg1 tag:(id)arg2 value:(double)arg3;
- (void)p_applyComposerNodes:(id)arg1 nodePaths:(id)arg2;
- (void)applyComposerNodes:(id)arg1 type:(long long)arg2;
- (void)applyComposerNodes:(id)arg1;
- (id)getCurrentComposerNodes:(long long)arg1;
- (id)getCurrentComposerNodes;
- (void)p_applyComposerNodes:(id)arg1 nodePath:(id)arg2 withTags:(id)arg3;
- (void)applyComposerNodes:(id)arg1 withTags:(id)arg2 type:(long long)arg3;
- (void)applyComposerNodes:(id)arg1 withTags:(id)arg2;
- (void)p_setComposerMode:(id)arg1 mode:(int)arg2 orderType:(int)arg3;
- (void)setComposerMode:(int)arg1 orderType:(int)arg2 effectType:(long long)arg3;
- (void)setComposerMode:(int)arg1 orderType:(int)arg2;
- (_Bool)enableAudioRecognize;
- (void)recognizeAudio;
- (void)audioEffectProcess:(short *)arg1 outBuffer:(short *)arg2 samplesPerChannel:(int)arg3 channels:(int)arg4 sampleRate:(int)arg5;
- (int)get_audio_effect_status;
- (void)__doOtherProcess:(struct AudioBufferList *)arg1 numberOfFrames:(int)arg2 audioData:(struct AudioBufferList *)arg3 earMonitorData:(struct AudioBufferList *)arg4;
- (_Bool)isSpeechRecognizing;
- (void)stopSpeechRecognizing;
- (id)getSpeechRecognizingKeywords;
- (int)setSpeechRecognizingKeywords:(id)arg1;
- (void)startSpeechRecognizing;
- (void)setEnableAudioEffect:(_Bool)arg1;
- (void)releaseAudioResampler;
- (void)setupAudioResamplerIfNeeded;
- (void)p_enableFakeFace:(id)arg1 enableFakeFace:(_Bool)arg2;
- (void)enableFakeFace:(_Bool)arg1 type:(long long)arg2;
- (void)enableFakeFace:(_Bool)arg1;
- (void)setDoubleViewRect:(double)arg1 leftY:(double)arg2 width:(double)arg3 height:(double)arg4;
- (void)p_setMaxStickerMemoryCache:(id)arg1 cache:(unsigned long long)arg2;
- (void)setMaxStickerMemoryCache:(unsigned long long)arg1 type:(long long)arg2;
- (void)setMaxStickerMemoryCache:(unsigned long long)arg1;
- (void)p_applyReshape:(id)arg1 path:(id)arg2 withIntensity:(struct LSLiveIntensityParam_t)arg3;
- (void)applyReshape:(id)arg1 withIntensity:(struct LSLiveIntensityParam_t)arg2 type:(long long)arg3;
- (void)applyReshape:(id)arg1 withIntensity:(struct LSLiveIntensityParam_t)arg2;
- (void)applyIntensity:(struct LSLiveIntensityParam_t)arg1 type:(long long)arg2;
- (void)p_setColorFilterIntensity:(id)arg1 Intensity:(float)arg2;
- (void)setColorFilterIntensity:(float)arg1 type:(long long)arg2;
- (void)setColorFilterIntensity:(float)arg1;
- (void)p_getColorFilter:(id)arg1 filePath:(id)arg2 intensity:(float *)arg3;
- (void)getColorFilter:(id)arg1 intensity:(float *)arg2 type:(long long)arg3;
- (void)getColorFilter:(id)arg1 intensity:(float *)arg2;
- (void)p_setColorFilter:(id)arg1 path:(id)arg2 intensity:(float)arg3;
- (void)setColorFilter:(id)arg1 intensity:(float)arg2 type:(long long)arg3;
- (void)setColorFilter:(id)arg1 intensity:(float)arg2;
- (void)p_applyEffect:(id)arg1 path:(id)arg2 type:(long long)arg3 enableFakeFace:(_Bool)arg4;
- (void)applyEffect:(id)arg1 type:(long long)arg2 enableFakeFace:(_Bool)arg3;
- (void)p_applyEffectkey:(id)arg1 key:(id)arg2 image:(id)arg3;
- (void)applyEffectKey:(id)arg1 image:(id)arg2 type:(long long)arg3;
- (void)applyEffectKey:(id)arg1 image:(id)arg2;
- (void)p_applyEffect:(id)arg1 path:(id)arg2 type:(long long)arg3;
- (void)applyEffect:(id)arg1 type:(long long)arg2;
- (float)p_getFilterIntensity:(id)arg1 filterPath:(id)arg2;
- (float)getFilterIntensity:(id)arg1 type:(long long)arg2;
- (float)getFilterIntensity:(id)arg1;
- (void)p_switchFilterWithHandle:(id)arg1 LeftPath:(id)arg2 rightPath:(id)arg3 progress:(double)arg4 leftIntensity:(float)arg5 rightIntensity:(float)arg6;
- (void)switchFilterWithLeftPath:(id)arg1 rightPath:(id)arg2 progress:(double)arg3 leftIntensity:(float)arg4 rightIntensity:(float)arg5 type:(long long)arg6;
- (void)switchFilterWithLeftPath:(id)arg1 rightPath:(id)arg2 progress:(double)arg3 leftIntensity:(float)arg4 rightIntensity:(float)arg5;
- (void)p_switchFilter:(id)arg1 leftPath:(id)arg2 rightPath:(id)arg3 progress:(double)arg4;
- (void)switchFilterWithLeftPath:(id)arg1 rightPath:(id)arg2 progress:(double)arg3 type:(long long)arg4;
- (void)switchFilterWithLeftPath:(id)arg1 rightPath:(id)arg2 progress:(double)arg3;
- (void)setLogToFileMessageCallback:(CDUnknownBlockType)arg1;
- (void)setLogLevel:(int)arg1;
- (void)setupAudioFactoryWithBlock:(CDUnknownBlockType)arg1;
- (void)setupAudioFactory;
- (void)setBgmPlayer:(id)arg1;
- (id)bgmPlayer;
- (void)setEnableEffect:(_Bool)arg1 type:(long long)arg2;
- (_Bool)isEffectEnabled:(long long)arg1;
- (_Bool)isEffectEnabled;
- (void)setEnableEffect:(_Bool)arg1;
- (void)removeEffectAudioConfig;
- (void)setEffectAudioConfig:(id)arg1;
- (void)setRenderCacheTexture:(id)arg1 path:(id)arg2;
- (void)restoreEffectIfNeeded;
- (void)pauseEffectIfNeeded;
- (void)checkBufferInEffectCategory:(struct __CVBuffer *)arg1;
- (void)destructEffectModules;
- (void)initialEffectCategory;
- (void)p_sendMessage:(id)arg1 message:(unsigned long long)arg2 param1:(unsigned long long)arg3 param2:(unsigned long long)arg4 userInfo:(id)arg5;
- (void)sendMessage:(unsigned long long)arg1 param1:(unsigned long long)arg2 param2:(unsigned long long)arg3 userInfo:(id)arg4 type:(long long)arg5;
- (void)sendMessage:(unsigned long long)arg1 param1:(unsigned long long)arg2 param2:(unsigned long long)arg3 userInfo:(id)arg4;
- (void)p_sendMessage:(id)arg1 message:(unsigned long long)arg2 param1:(unsigned long long)arg3 param2:(unsigned long long)arg4;
- (void)sendMessage:(unsigned long long)arg1 param1:(unsigned long long)arg2 param2:(unsigned long long)arg3 type:(long long)arg4;
- (void)sendMessage:(unsigned long long)arg1 param1:(unsigned long long)arg2 param2:(unsigned long long)arg3;
- (void)p_sendMessage:(id)arg1 message:(unsigned long long)arg2 param1:(unsigned long long)arg3;
- (void)sendMessage:(unsigned long long)arg1 param1:(unsigned long long)arg2 type:(long long)arg3;
- (void)sendMessage:(unsigned long long)arg1 param1:(unsigned long long)arg2;
- (void)p_sendMessage:(id)arg1 message:(unsigned long long)arg2;
- (void)sendMessage:(unsigned long long)arg1 type:(long long)arg2;
- (void)sendMessage:(unsigned long long)arg1;
- (void)__handleEffectMessage:(long long)arg1:(unsigned long long)arg2:(unsigned long long)arg3:(id)arg4;
- (id)convertToJsonData:(id)arg1;
- (void)setEffectMessageBlock:(CDUnknownBlockType)arg1;
- (void)setAlgorithmResultRequirement:(unsigned long long)arg1 withCallbackBlock:(CDUnknownBlockType)arg2;
- (void)setAlgorithmRequirement:(unsigned long long)arg1 algorithmParam:(unsigned long long)arg2 enableDetect:(_Bool)arg3;
- (void)resetFacePointBlock:(CDUnknownBlockType)arg1;
- (void)setMusicPlayTimeRequestCallback:(CDUnknownBlockType)arg1 type:(long long)arg2;
- (void)setMusicPlayTimeRequestCallback:(CDUnknownBlockType)arg1;
- (void)p_setMusicNodeFilepath:(id)arg1 filePath:(id)arg2;
- (void)setMusicNodeFilepath:(id)arg1 type:(long long)arg2;
- (void)setMusicNodeFilepath:(id)arg1;
- (_Bool)handleRotationEvent:(double)arg1;
- (_Bool)handleScaleEvent:(double)arg1;
- (_Bool)handleLongPressEventWithLocation:(struct CGPoint)arg1;
- (_Bool)handlePanEventWithTranslation:(struct CGPoint)arg1 location:(struct CGPoint)arg2;
- (_Bool)handleTouchEvent:(struct CGPoint)arg1;
- (_Bool)handleTouchUp:(struct CGPoint)arg1 withType:(unsigned long long)arg2;
- (_Bool)handleTouchDown:(struct CGPoint)arg1 withType:(unsigned long long)arg2;
- (id)initReducedModeWithConfig:(id)arg1;
- (id)initWithMode:(long long)arg1 config:(id)arg2;
- (id)getStatisticInfo;
- (void)checkAudioIOPipeline;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(copy, nonatomic) CDUnknownBlockType effectMsgBlock;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

