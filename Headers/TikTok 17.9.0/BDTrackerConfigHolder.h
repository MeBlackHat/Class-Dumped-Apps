//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "BDTrackerHooker-Protocol.h"

@class BDTrackerConfig, BDTrackerSessionEvent, NSArray, NSMutableArray, NSMutableDictionary, NSString, UIApplication;
@protocol BDTrackerLogClient, OS_dispatch_queue, OS_dispatch_semaphore;

@interface BDTrackerConfigHolder : NSObject <BDTrackerHooker>
{
    _Bool _sdkEnable;
    _Bool _isInhouseVersion;
    _Bool _didStartSDK;
    _Bool _encrypt;
    _Bool _isInBackground;
    BDTrackerConfig *_config;
    NSObject<OS_dispatch_queue> *_insertQueue;
    NSObject<OS_dispatch_queue> *_hookQueue;
    id <BDTrackerLogClient> _client;
    Class _tracer;
    NSMutableDictionary *_abSDKVersionBlocks;
    NSArray *_immediateEventList;
    unsigned long long _dataLength;
    long long _sessionIndex;
    long long _teaEventIndex;
    NSObject<OS_dispatch_semaphore> *_queueLock;
    long long _queueCount;
    long long _queueCountMax;
    NSMutableDictionary *_hookers;
    long long _timerInterval;
    NSMutableDictionary *_task;
    NSMutableArray *_taskOrders;
    unsigned long long _bgTask;
    UIApplication *_app;
    long long _backgroundTimestamp;
    struct BDTrackerDefaultMMap *_mapData;
    BDTrackerSessionEvent *_recoveredTerminate;
    BDTrackerSessionEvent *_recoveredLaunch;
    struct __CFRunLoopObserver *_runLoopObserver;
    NSString *_sessionID;
    NSArray *_recoveredTrackID;
}

+ (id)headerField;
+ (id)shareInstance;
+ (long long)fetchBatchTimeInterval;
@property(copy, nonatomic) NSArray *recoveredTrackID; // @synthesize recoveredTrackID=_recoveredTrackID;
@property(copy) NSString *sessionID; // @synthesize sessionID=_sessionID;
@property(nonatomic) struct __CFRunLoopObserver *runLoopObserver; // @synthesize runLoopObserver=_runLoopObserver;
@property(retain, nonatomic) BDTrackerSessionEvent *recoveredLaunch; // @synthesize recoveredLaunch=_recoveredLaunch;
@property(retain, nonatomic) BDTrackerSessionEvent *recoveredTerminate; // @synthesize recoveredTerminate=_recoveredTerminate;
@property(nonatomic) struct BDTrackerDefaultMMap *mapData; // @synthesize mapData=_mapData;
@property(nonatomic) _Bool isInBackground; // @synthesize isInBackground=_isInBackground;
@property(nonatomic) long long backgroundTimestamp; // @synthesize backgroundTimestamp=_backgroundTimestamp;
@property(retain, nonatomic) UIApplication *app; // @synthesize app=_app;
@property(nonatomic) unsigned long long bgTask; // @synthesize bgTask=_bgTask;
@property(retain, nonatomic) NSMutableArray *taskOrders; // @synthesize taskOrders=_taskOrders;
@property(retain, nonatomic) NSMutableDictionary *task; // @synthesize task=_task;
@property(nonatomic) long long timerInterval; // @synthesize timerInterval=_timerInterval;
@property(retain, nonatomic) NSMutableDictionary *hookers; // @synthesize hookers=_hookers;
@property(nonatomic) long long queueCountMax; // @synthesize queueCountMax=_queueCountMax;
@property(nonatomic) long long queueCount; // @synthesize queueCount=_queueCount;
@property(retain, nonatomic) NSObject<OS_dispatch_semaphore> *queueLock; // @synthesize queueLock=_queueLock;
@property(nonatomic) long long teaEventIndex; // @synthesize teaEventIndex=_teaEventIndex;
@property(nonatomic) long long sessionIndex; // @synthesize sessionIndex=_sessionIndex;
@property(nonatomic) unsigned long long dataLength; // @synthesize dataLength=_dataLength;
@property(copy, nonatomic) NSArray *immediateEventList; // @synthesize immediateEventList=_immediateEventList;
@property(retain, nonatomic) NSMutableDictionary *abSDKVersionBlocks; // @synthesize abSDKVersionBlocks=_abSDKVersionBlocks;
@property(nonatomic) _Bool encrypt; // @synthesize encrypt=_encrypt;
@property(retain) Class tracer; // @synthesize tracer=_tracer;
@property(retain, nonatomic) id <BDTrackerLogClient> client; // @synthesize client=_client;
@property(nonatomic) _Bool didStartSDK; // @synthesize didStartSDK=_didStartSDK;
@property(nonatomic) _Bool isInhouseVersion; // @synthesize isInhouseVersion=_isInhouseVersion;
@property(nonatomic) _Bool sdkEnable; // @synthesize sdkEnable=_sdkEnable;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *hookQueue; // @synthesize hookQueue=_hookQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *insertQueue; // @synthesize insertQueue=_insertQueue;
@property(retain) BDTrackerConfig *config; // @synthesize config=_config;
- (void).cxx_destruct;
- (void)dispatchAsync:(CDUnknownBlockType)arg1;
- (void)removeABSDKVersionBlockForKey:(id)arg1;
- (void)addABSDKVersionBlock:(CDUnknownBlockType)arg1 forKey:(id)arg2;
- (id)init;
- (void)dealloc;
- (void)startBackgroundTask;
- (void)endBackgroundTask;
- (id)timeSyncDicts;
- (void)updateServerTime:(long long)arg1;
- (id)increasedTrackID;
- (void)recordSendingTrackID:(id)arg1;
- (void)markDataStatus:(unsigned int)arg1;
- (void)recoverDataStatus;
- (long long)globalIncreaseIdentifier;
- (void)decreaseQueueCount;
- (void)increaseQueueCount;
- (void)onCustomEventKey:(id)arg1 parameter:(id)arg2;
- (void)onEventV3:(id)arg1 parameter:(id)arg2;
- (void)removeHookerForKey:(id)arg1;
- (void)addHooker:(id)arg1 forKey:(id)arg2;
- (void)loadMMap;
- (void)cleanData;
- (void)markTerminateEnd;
- (void)markLaunchEnd;
- (void)recoverSession;
- (void)updateTerminateDuration;
- (void)setLaunchFrom:(long long)arg1;
- (id)stopSession;
- (id)startSession:(_Bool)arg1;
- (void)addRunLoopObserver;
- (void)removeRunLoopObserver;
- (id)generateTerminateEvent;
- (id)generateLaunchEvent;
- (void)resetSessionData;
- (void)removeTaskForKey:(id)arg1;
- (void)addTask:(CDUnknownBlockType)arg1 forKey:(id)arg2 order:(unsigned long long)arg3;
- (void)triggerTaskWithAction:(long long)arg1;
- (void)onWillEnterForeground;
- (void)onDidEnterBackground;
- (void)onWillResignActive;
- (void)onDidBecomeActive;
- (void)stopTimer;
- (void)startTimer;
- (void)updateBatchTimeInterval:(long long)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

