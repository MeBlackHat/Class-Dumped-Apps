//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class NPFAnalyticsAppEnginePublisher, NPFAnalyticsCache, NPFAnalyticsConfig, NPFAnalyticsConfigMapper, NPFAnalyticsPubsubPublisher, NSMutableSet, NSTimer;
@protocol ServiceLocator;

@interface NPFAnalyticsImpl : NSObject
{
    id <ServiceLocator> _locator;
    NPFAnalyticsConfigMapper *_configMapper;
    NSTimer *_timer;
    NSObject *_timerMutexLock;
    NPFAnalyticsCache *_localCache;
    NPFAnalyticsAppEnginePublisher *_appEnginePublisher;
    NPFAnalyticsPubsubPublisher *_pubsubPublisher;
    NPFAnalyticsConfig *_config;
    NSMutableSet *_publishedEventKeys;
}

@property(retain, nonatomic) NSMutableSet *publishedEventKeys; // @synthesize publishedEventKeys=_publishedEventKeys;
@property(retain, nonatomic) NPFAnalyticsConfig *config; // @synthesize config=_config;
@property(retain, nonatomic) NPFAnalyticsPubsubPublisher *pubsubPublisher; // @synthesize pubsubPublisher=_pubsubPublisher;
@property(retain, nonatomic) NPFAnalyticsAppEnginePublisher *appEnginePublisher; // @synthesize appEnginePublisher=_appEnginePublisher;
@property(retain, nonatomic) NPFAnalyticsCache *localCache; // @synthesize localCache=_localCache;
@property(retain, nonatomic) NSObject *timerMutexLock; // @synthesize timerMutexLock=_timerMutexLock;
@property(retain, nonatomic) NSTimer *timer; // @synthesize timer=_timer;
@property(retain) NPFAnalyticsConfigMapper *configMapper; // @synthesize configMapper=_configMapper;
@property(retain) id <ServiceLocator> locator; // @synthesize locator=_locator;
- (void).cxx_destruct;
- (void)timerUpdate:(id)arg1;
- (void)setTimer;
- (void)unsetTimer;
- (void)synchronizedResetTimer;
- (void)synchronizedSetTimer;
- (void)synchronizedUnsetTimer;
- (_Bool)synchronizedHasTimer;
- (void)deleteInvalidEvents:(id)arg1;
- (void)processInvalidEvents:(id)arg1;
- (void)processFailedEvents:(id)arg1;
- (void)processCompletedEvents:(id)arg1;
- (void)publish:(id)arg1 events:(id)arg2 user:(id)arg3;
- (void)drainAnalyticsV2Events:(id)arg1 user:(id)arg2;
- (void)drainAnalyticsV1Events:(id)arg1 user:(id)arg2;
- (void)drainAnalyticsEvent;
- (id)createEvent:(id)arg1 eventCategory:(id)arg2 withEventId:(id)arg3 andPlayerState:(id)arg4 andPayload:(id)arg5;
- (void)refreshConfig;
- (_Bool)isSuspended;
- (void)resume;
- (void)suspend;
- (void)reportEvent:(id)arg1 withEventId:(id)arg2 andPlayerState:(id)arg3 andPayload:(id)arg4;
- (id)init;

@end

