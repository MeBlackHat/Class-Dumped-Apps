//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "DBAuthStateManagerDelegate-Protocol.h"
#import "DBUserStateManagerAccountOperationProtocol-Protocol.h"
#import "DBUserStateManagerProtocol-Protocol.h"

@class DBAuthAccountRoleDictionary, DBAuthStateManager, DBCrossAppAuthNotificationCenter, DBTeamInfo, DBUserPairingInfo, DBUserStateFactoryContext, DBWeakObserverMap, NSMutableArray, NSMutableSet, NSString;
@protocol DBAccountManagerProtocol, DBUserPersistentStatesManagerProtocol;

@interface DBUserStateManagerV2 : NSObject <DBAuthStateManagerDelegate, DBUserStateManagerAccountOperationProtocol, DBUserStateManagerProtocol>
{
    DBAuthStateManager *_authStateManager;
    DBUserStateFactoryContext *_userStateFactoryContext;
    DBWeakObserverMap *_accountObservers;
    DBWeakObserverMap *_unlinkOperationObservers;
    DBAuthAccountRoleDictionary *_linkedUserStates;
    DBUserPairingInfo *_pairingInfo;
    DBTeamInfo *_teamInfo;
    _Bool _hasUnlinkOperationsQueued;
    NSMutableSet *_unlinkingUserStates;
    NSMutableArray *_incompatibleAccountsObserverHandles;
    NSMutableArray *_compatibleAccountsObserverHandles;
    DBCrossAppAuthNotificationCenter *_authNotificationCenter;
    id _authNotificationObserver;
    NSMutableArray *_processingAccounts;
    id <DBUserPersistentStatesManagerProtocol> _persistentStatesManager;
    id <DBAccountManagerProtocol> _accountManager;
}

+ (id)db_userStateFactory;
+ (void)setUserStateFactory:(id)arg1;
+ (id)db_userPairingInfoFromIdentityInfo:(id)arg1;
+ (id)db_cacheIDsInAccounts:(id)arg1;
+ (id)db_userIDsInAccounts:(id)arg1;
+ (id)db_cacheIDsInUserStates:(id)arg1;
+ (id)db_userIDsInUserStates:(id)arg1;
+ (id)db_userStateFromLinkedUsers:(id)arg1 forAccount:(id)arg2;
@property(readonly, nonatomic) id <DBAccountManagerProtocol> accountManager; // @synthesize accountManager=_accountManager;
@property(nonatomic) __weak id <DBUserPersistentStatesManagerProtocol> persistentStatesManager; // @synthesize persistentStatesManager=_persistentStatesManager;
- (void).cxx_destruct;
- (void)db_notifyDidChangeKeychainOnlyAccountsToAccounts:(id)arg1;
- (void)db_notifyDidRemoveUserWithUserIDs:(id)arg1;
- (void)db_notifyDidAddUserWithUserIDs:(id)arg1;
- (void)db_notifyUnlinkOperationsQueuedForUserIds:(id)arg1;
- (void)db_notifyCompletedUnlinkOperationWithAccountInfos:(id)arg1 withReason:(long long)arg2 hadUserState:(_Bool)arg3 success:(_Bool)arg4 error:(id)arg5;
- (void)db_notifyPairingInfoChangedFrom:(id)arg1 to:(id)arg2;
- (void)db_notifyIncompatibleAccountInfoChanged:(id)arg1;
- (void)db_notifyCompatibleAccountInfoChanged:(id)arg1;
- (id)db_nilIfUnlinkingUserState:(id)arg1;
- (id)db_unlinkingUserStatesCacheIDs;
- (id)db_unlinkingUserStatesUserIDs;
- (void)db_updateUserStatesBeingUnlinked;
- (id)db_createAccountUserStateForAccount:(id)arg1;
- (id)db_updatedUserStatesAddingAccounts:(id)arg1 removingAccounts:(id)arg2 oldLinkedUserStates:(id)arg3;
- (id)db_accountInfosForLinkedAccountsWithUserIDs:(id)arg1;
- (void)db_updateAccountObserversForCompatibleAccounts:(id)arg1;
- (void)db_updateAccountObserversForIncompatibleAccounts:(id)arg1;
- (void)db_setupObserverOnAuthNotificationCenter:(id)arg1;
- (id)userPairingInfo;
- (void)authStateManager:(id)arg1 didUpdateWithChanges:(id)arg2;
- (void)authStateManager:(id)arg1 didCompleteUnlinkOperationForAccounts:(id)arg2 withReason:(long long)arg3;
- (void)authStateManager:(id)arg1 didQueueUnlinkOperationForAccounts:(id)arg2;
- (void)authStateManager:(id)arg1 completeUnlinkActionsForAccount:(id)arg2 withCompletion:(CDUnknownBlockType)arg3;
- (_Bool)hasUnlinkOperationsQueued;
- (void)removeUnlinkOperationObserver:(id)arg1;
- (void)addUnlinkOperationObserver:(id)arg1;
- (void)queueAccessorBlock:(CDUnknownBlockType)arg1;
- (void)unlinkContinueAsAccountsInKeychain:(CDUnknownBlockType)arg1;
- (void)queueLoadContinueAsAccountsFromKeychain:(CDUnknownBlockType)arg1;
- (void)queueAddAccountWithAccessToken:(id)arg1 accessTokenSecret:(id)arg2 forUserID:(id)arg3 withAccountInfo:(id)arg4 withCompletionBlock:(CDUnknownBlockType)arg5;
- (void)queueUpdateWithNewAccountInfo:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)db_unsubscribeFromRemoteNotificationsForUserIds:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)queueUnlinkUserWithUserIds:(id)arg1 completionBlock:(CDUnknownBlockType)arg2 forceUnlink:(_Bool)arg3 reason:(long long)arg4;
- (void)queueUnlinkUserWithUserId:(id)arg1 completionBlock:(CDUnknownBlockType)arg2 forceUnlink:(_Bool)arg3 reason:(long long)arg4;
- (void)finishProcessingUserStateForUserId:(id)arg1;
- (void)beginProcessingUserStateForUserId:(id)arg1 didBeginProcessing:(CDUnknownBlockType)arg2;
- (void)unlinkManagedSessionAccountsWithWrongToken;
- (void)removeObserver:(id)arg1;
- (void)addObserver:(id)arg1;
- (void)checkAccountsChanged;
- (id)notLoggedInUserIds;
- (id)currentUser;
- (id)nameFromRole:(int)arg1;
- (id)teamInfo;
- (_Bool)isDualAccount;
- (id)personalAccountUser;
- (id)workAccountUser;
- (id)userStateWithRole:(int)arg1;
- (id)userStateWithEmail:(id)arg1;
- (id)userStateWithUserId:(id)arg1;
- (unsigned long long)enterpriseAuthRequirement;
- (id)enterpriseAuthHelper;
- (id)compatibleAccounts;
- (id)incompatibleAccounts;
- (id)db_linkedCompatibleAccountCacheIds;
- (id)linkedCompatibleAccountUserIds;
- (id)linkedUsers;
- (id)initWithAuthStateManager:(id)arg1 userStateFactoryContext:(id)arg2;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

