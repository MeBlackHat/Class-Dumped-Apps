//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class DBCollection, DBCommonEnv, DBSyncStatus, NSMutableDictionary;
@protocol DBBackgroundTaskFactoryProtocol, DBBackgroundTaskProtocol, DBObserverHandleProtocol;

@interface DBLegacyCollectionManager : NSObject
{
    id <DBBackgroundTaskProtocol> _backgroundTask;
    id <DBBackgroundTaskFactoryProtocol> _backgroundTaskFactory;
    DBCommonEnv *_env;
    id <DBObserverHandleProtocol> _accountUnlinkObserverHandle;
    _Bool _shutDown;
    // Error parsing type: ^{dbx_legacy_photos_client=^^?{nn<std::__1::shared_ptr<dropbox::account::dbx_account> >={shared_ptr<dropbox::account::dbx_account>=^{dbx_account}^{__shared_weak_count}}}{nn<std::__1::shared_ptr<dropbox::env::dbx_env> >={shared_ptr<dropbox::env::dbx_env>=^{dbx_env}^{__shared_weak_count}}}{LifecycleManager={mutex={_opaque_pthread_mutex_t=q[56c]}}{condition_variable={_opaque_pthread_cond_t=q[40c]}}{once_flag=Q}{atomic<LifecycleManager::ShutdownStep>=Ai}{mutex={_opaque_pthread_mutex_t=q[56c]}}{map<LifecycleManager::CallbackOrder, std::__1::map<unsigned long long, std::__1::function<void ()>, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::function<void ()> > > >, std::__1::less<LifecycleManager::CallbackOrder>, std::__1::allocator<std::__1::pair<const LifecycleManager::CallbackOrder, std::__1::map<unsigned long long, std::__1::function<void ()>, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::function<void ()> > > > > > >={__tree<std::__1::__value_type<LifecycleManager::CallbackOrder, std::__1::map<unsigned long long, std::__1::function<void ()>, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::function<void ()> > > > >, std::__1::__map_value_compare<LifecycleManager::CallbackOrder, std::__1::__value_type<LifecycleManager::CallbackOrder, std::__1::map<unsigned long long, std::__1::function<void ()>, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::function<void ()> > > > >, std::__1::less<LifecycleManager::CallbackOrder>, true>, std::__1::allocator<std::__1::__value_type<LifecycleManager::CallbackOrder, std::__1::map<unsigned long long, std::__1::function<void ()>, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::function<void ()> > > > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<LifecycleManager::CallbackOrder, std::__1::map<unsigned long long, std::__1::function<void ()>, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::function<void ()> > > > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<LifecycleManager::CallbackOrder, std::__1::__value_type<LifecycleManager::CallbackOrder, std::__1::map<unsigned long long, std::__1::function<void ()>, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::function<void ()> > > > >, std::__1::less<LifecycleManager::CallbackOrder>, true> >=Q}}}Q{optional<LifecycleManager::CallbackOrder>=B(constexpr_storage_t<LifecycleManager::CallbackOrder>=Ci)}{vector<std::__1::mutex *, std::__1::allocator<std::__1::mutex *> >=^^{mutex}^^{mutex}{__compressed_pair<std::__1::mutex **, std::__1::allocator<std::__1::mutex *> >=^^{mutex}}}{vector<std::__1::condition_variable *, std::__1::allocator<std::__1::condition_variable *> >=^^{condition_variable}^^{condition_variable}{__compressed_pair<std::__1::condition_variable **, std::__1::allocator<std::__1::condition_variable *> >=^^{condition_variable}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{condition_variable={_opaque_pthread_cond_t=q[40c]}}iii{weak_ptr<LifecycleManager>=^{LifecycleManager}^{__shared_weak_count}}{optional<LifecycleManager::CallbackRegistration>=B(storage_t<LifecycleManager::CallbackRegistration>=C{CallbackRegistration=^{LifecycleManager}iQ})}}B{mutex={_opaque_pthread_mutex_t=q[56c]}}{condition_variable={_opaque_pthread_cond_t=q[40c]}}{condition_variable={_opaque_pthread_cond_t=q[40c]}}{LCMRegistration<std::__1::mutex, std::__1::condition_variable, std::__1::condition_variable>={LCMSingleRegistration<std::__1::mutex>=^{LifecycleManager}^{mutex}}{LCMRegistration<std::__1::condition_variable, std::__1::condition_variable>={LCMSingleRegistration<std::__1::condition_variable>=^{LifecycleManager}^{condition_variable}}{LCMRegistration<std::__1::condition_variable>={LCMSingleRegistration<std::__1::condition_variable>=^{LifecycleManager}^{condition_variable}}{LCMRegistration<>=}}}}{shared_ptr<dbx_cache>=^{dbx_cache}^{__shared_weak_count}}^{dbx_cache}{unique_ptr<dropbox::NotificationsCache, std::__1::default_delete<dropbox::NotificationsCache> >={__compressed_pair<dropbox::NotificationsCache *, std::__1::default_delete<dropbox::NotificationsCache> >=^{NotificationsCache}}}{unique_ptr<OpTableStatements, std::__1::default_delete<OpTableStatements> >={__compressed_pair<OpTableStatements *, std::__1::default_delete<OpTableStatements> >=^{OpTableStatements}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}ii{unique_ptr<dbx_access_info, std::__1::default_delete<dbx_access_info> >={__compressed_pair<dbx_access_info *, std::__1::default_delete<dbx_access_info> >=^{dbx_access_info}}}B{unique_ptr<HttpRequester, std::__1::default_delete<HttpRequester> >={__compressed_pair<HttpRequester *, std::__1::default_delete<HttpRequester> >=^{HttpRequester}}}{dbx_sync_state={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{atomic<dbx_sync_activity>=Ai}{atomic<bool>=AB}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{dbx_error_buf=i*i*[1024c]}}B{list<std::__1::shared_ptr<DbxOp>, std::__1::allocator<std::__1::shared_ptr<DbxOp> > >={__list_node_base<std::__1::shared_ptr<DbxOp>, void *>=^{__list_node_base<std::__1::shared_ptr<DbxOp>, void *>}^{__list_node_base<std::__1::shared_ptr<DbxOp>, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<DbxOp>, void *> > >=Q}}{list<std::__1::shared_ptr<DbxOp>, std::__1::allocator<std::__1::shared_ptr<DbxOp> > >={__list_node_base<std::__1::shared_ptr<DbxOp>, void *>=^{__list_node_base<std::__1::shared_ptr<DbxOp>, void *>}^{__list_node_base<std::__1::shared_ptr<DbxOp>, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<DbxOp>, void *> > >=Q}}qB{shared_ptr<dropbox::async::CoalescingAsyncTaskScheduler>=^{CoalescingAsyncTaskScheduler}^{__shared_weak_count}}{Callback<>={mutex={_opaque_pthread_mutex_t=q[56c]}}{function<void ()>={__value_func<void ()>={type=[24C]}^{__base<void ()>}}}{atomic<bool>=AB}{recursive_mutex={_opaque_pthread_mutex_t=q[56c]}}B}{Callback<>={mutex={_opaque_pthread_mutex_t=q[56c]}}{function<void ()>={__value_func<void ()>={type=[24C]}^{__base<void ()>}}}{atomic<bool>=AB}{recursive_mutex={_opaque_pthread_mutex_t=q[56c]}}B}{shared_ptr<dropbox::async::AsyncTaskExecutor>=^{AsyncTaskExecutor}^{__shared_weak_count}}{dbx_sync_state={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{atomic<dbx_sync_activity>=Ai}{atomic<bool>=AB}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{dbx_error_buf=i*i*[1024c]}}{Callback<>={mutex={_opaque_pthread_mutex_t=q[56c]}}{function<void ()>={__value_func<void ()>={type=[24C]}^{__base<void ()>}}}{atomic<bool>=AB}{recursive_mutex={_opaque_pthread_mutex_t=q[56c]}}B}{nn<std::__1::shared_ptr<LegacyPhotosCache> >={shared_ptr<LegacyPhotosCache>=^{LegacyPhotosCache}^{__shared_weak_count}}}{nn<std::__1::shared_ptr<LegacyPhotosDeltaProvider> >={shared_ptr<LegacyPhotosDeltaProvider>=^{LegacyPhotosDeltaProvider}^{__shared_weak_count}}}}, name: _client
    NSMutableDictionary *_registeredObjectsByCollectionId;
    NSMutableDictionary *_observers;
    DBCollection *_allPhotosCollection;
}

+ (void)notifyObservers:(id)arg1;
+ (id)sharedCollectionManager;
+ (void)setSharedCollectionManager:(id)arg1;
@property(retain, nonatomic) DBCollection *allPhotosCollection; // @synthesize allPhotosCollection=_allPhotosCollection;
@property(readonly, nonatomic) NSMutableDictionary *observers; // @synthesize observers=_observers;
@property(retain, nonatomic) NSMutableDictionary *registeredObjectsByCollectionId; // @synthesize registeredObjectsByCollectionId=_registeredObjectsByCollectionId;
// Error parsing type for property client:
// Property attributes: T^{dbx_legacy_photos_client=^^?{nn<std::__1::shared_ptr<dropbox::account::dbx_account> >={shared_ptr<dropbox::account::dbx_account>=^{dbx_account}^{__shared_weak_count}}}{nn<std::__1::shared_ptr<dropbox::env::dbx_env> >={shared_ptr<dropbox::env::dbx_env>=^{dbx_env}^{__shared_weak_count}}}{LifecycleManager={mutex={_opaque_pthread_mutex_t=q[56c]}}{condition_variable={_opaque_pthread_cond_t=q[40c]}}{once_flag=Q}{atomic<LifecycleManager::ShutdownStep>=Ai}{mutex={_opaque_pthread_mutex_t=q[56c]}}{map<LifecycleManager::CallbackOrder, std::__1::map<unsigned long long, std::__1::function<void ()>, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::function<void ()> > > >, std::__1::less<LifecycleManager::CallbackOrder>, std::__1::allocator<std::__1::pair<const LifecycleManager::CallbackOrder, std::__1::map<unsigned long long, std::__1::function<void ()>, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::function<void ()> > > > > > >={__tree<std::__1::__value_type<LifecycleManager::CallbackOrder, std::__1::map<unsigned long long, std::__1::function<void ()>, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::function<void ()> > > > >, std::__1::__map_value_compare<LifecycleManager::CallbackOrder, std::__1::__value_type<LifecycleManager::CallbackOrder, std::__1::map<unsigned long long, std::__1::function<void ()>, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::function<void ()> > > > >, std::__1::less<LifecycleManager::CallbackOrder>, true>, std::__1::allocator<std::__1::__value_type<LifecycleManager::CallbackOrder, std::__1::map<unsigned long long, std::__1::function<void ()>, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::function<void ()> > > > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<LifecycleManager::CallbackOrder, std::__1::map<unsigned long long, std::__1::function<void ()>, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::function<void ()> > > > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<LifecycleManager::CallbackOrder, std::__1::__value_type<LifecycleManager::CallbackOrder, std::__1::map<unsigned long long, std::__1::function<void ()>, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::function<void ()> > > > >, std::__1::less<LifecycleManager::CallbackOrder>, true> >=Q}}}Q{optional<LifecycleManager::CallbackOrder>=B(constexpr_storage_t<LifecycleManager::CallbackOrder>=Ci)}{vector<std::__1::mutex *, std::__1::allocator<std::__1::mutex *> >=^^{mutex}^^{mutex}{__compressed_pair<std::__1::mutex **, std::__1::allocator<std::__1::mutex *> >=^^{mutex}}}{vector<std::__1::condition_variable *, std::__1::allocator<std::__1::condition_variable *> >=^^{condition_variable}^^{condition_variable}{__compressed_pair<std::__1::condition_variable **, std::__1::allocator<std::__1::condition_variable *> >=^^{condition_variable}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{condition_variable={_opaque_pthread_cond_t=q[40c]}}iii{weak_ptr<LifecycleManager>=^{LifecycleManager}^{__shared_weak_count}}{optional<LifecycleManager::CallbackRegistration>=B(storage_t<LifecycleManager::CallbackRegistration>=C{CallbackRegistration=^{LifecycleManager}iQ})}}B{mutex={_opaque_pthread_mutex_t=q[56c]}}{condition_variable={_opaque_pthread_cond_t=q[40c]}}{condition_variable={_opaque_pthread_cond_t=q[40c]}}{LCMRegistration<std::__1::mutex, std::__1::condition_variable, std::__1::condition_variable>={LCMSingleRegistration<std::__1::mutex>=^{LifecycleManager}^{mutex}}{LCMRegistration<std::__1::condition_variable, std::__1::condition_variable>={LCMSingleRegistration<std::__1::condition_variable>=^{LifecycleManager}^{condition_variable}}{LCMRegistration<std::__1::condition_variable>={LCMSingleRegistration<std::__1::condition_variable>=^{LifecycleManager}^{condition_variable}}{LCMRegistration<>=}}}}{shared_ptr<dbx_cache>=^{dbx_cache}^{__shared_weak_count}}^{dbx_cache}{unique_ptr<dropbox::NotificationsCache, std::__1::default_delete<dropbox::NotificationsCache> >={__compressed_pair<dropbox::NotificationsCache *, std::__1::default_delete<dropbox::NotificationsCache> >=^{NotificationsCache}}}{unique_ptr<OpTableStatements, std::__1::default_delete<OpTableStatements> >={__compressed_pair<OpTableStatements *, std::__1::default_delete<OpTableStatements> >=^{OpTableStatements}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}ii{unique_ptr<dbx_access_info, std::__1::default_delete<dbx_access_info> >={__compressed_pair<dbx_access_info *, std::__1::default_delete<dbx_access_info> >=^{dbx_access_info}}}B{unique_ptr<HttpRequester, std::__1::default_delete<HttpRequester> >={__compressed_pair<HttpRequester *, std::__1::default_delete<HttpRequester> >=^{HttpRequester}}}{dbx_sync_state={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{atomic<dbx_sync_activity>=Ai}{atomic<bool>=AB}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{dbx_error_buf=i*i*[1024c]}}B{list<std::__1::shared_ptr<DbxOp>, std::__1::allocator<std::__1::shared_ptr<DbxOp> > >={__list_node_base<std::__1::shared_ptr<DbxOp>, void *>=^{__list_node_base<std::__1::shared_ptr<DbxOp>, void *>}^{__list_node_base<std::__1::shared_ptr<DbxOp>, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<DbxOp>, void *> > >=Q}}{list<std::__1::shared_ptr<DbxOp>, std::__1::allocator<std::__1::shared_ptr<DbxOp> > >={__list_node_base<std::__1::shared_ptr<DbxOp>, void *>=^{__list_node_base<std::__1::shared_ptr<DbxOp>, void *>}^{__list_node_base<std::__1::shared_ptr<DbxOp>, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<DbxOp>, void *> > >=Q}}qB{shared_ptr<dropbox::async::CoalescingAsyncTaskScheduler>=^{CoalescingAsyncTaskScheduler}^{__shared_weak_count}}{Callback<>={mutex={_opaque_pthread_mutex_t=q[56c]}}{function<void ()>={__value_func<void ()>={type=[24C]}^{__base<void ()>}}}{atomic<bool>=AB}{recursive_mutex={_opaque_pthread_mutex_t=q[56c]}}B}{Callback<>={mutex={_opaque_pthread_mutex_t=q[56c]}}{function<void ()>={__value_func<void ()>={type=[24C]}^{__base<void ()>}}}{atomic<bool>=AB}{recursive_mutex={_opaque_pthread_mutex_t=q[56c]}}B}{shared_ptr<dropbox::async::AsyncTaskExecutor>=^{AsyncTaskExecutor}^{__shared_weak_count}}{dbx_sync_state={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{atomic<dbx_sync_activity>=Ai}{atomic<bool>=AB}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{dbx_error_buf=i*i*[1024c]}}{Callback<>={mutex={_opaque_pthread_mutex_t=q[56c]}}{function<void ()>={__value_func<void ()>={type=[24C]}^{__base<void ()>}}}{atomic<bool>=AB}{recursive_mutex={_opaque_pthread_mutex_t=q[56c]}}B}{nn<std::__1::shared_ptr<LegacyPhotosCache> >={shared_ptr<LegacyPhotosCache>=^{LegacyPhotosCache}^{__shared_weak_count}}}{nn<std::__1::shared_ptr<LegacyPhotosDeltaProvider> >={shared_ptr<LegacyPhotosDeltaProvider>=^{LegacyPhotosDeltaProvider}^{__shared_weak_count}}}},N,V_client

@property(readonly, nonatomic, getter=isShutDown) _Bool shutDown; // @synthesize shutDown=_shutDown;
- (void).cxx_destruct;
- (void)notifyObservers;
- (void)updateBackgroundTask;
- (void)infoUpdated:(id)arg1;
- (void)removeObserver:(id)arg1;
- (_Bool)addObserver:(id)arg1 block:(CDUnknownBlockType)arg2;
- (_Bool)addObserver:(id)arg1 forAllPhotosCollectionWithBlock:(CDUnknownBlockType)arg2;
- (id)dummyAllPhotosCollection;
- (void)unregisterCollection:(id)arg1;
- (_Bool)registerCollectionAsObserver:(id)arg1;
- (_Bool)waitForUpdateFromServer;
- (id)allPhotosMonthBuckets:(id *)arg1;
- (id)allPhotosItemsFromDate:(id)arg1 toDate:(id)arg2 error:(id *)arg3;
@property(readonly, nonatomic) DBSyncStatus *status;
@property(readonly, nonatomic) _Bool completedFirstSync;
- (_Bool)deleteItem:(id)arg1 error:(id *)arg2;
- (void)dealloc;
- (void)shutDown;
- (id)initWithUserId:(id)arg1 accountUnlinkHandler:(id)arg2 commonAccount:(id)arg3 commonEnv:(id)arg4 filesCacheRoot:(id)arg5 backgroundTaskFactory:(id)arg6;

@end

