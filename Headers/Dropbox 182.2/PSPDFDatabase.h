//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class NSDateFormatter, NSHashTable, NSMutableDictionary, NSMutableSet, NSString;
@protocol PSPDFDatabaseEncryptionProvider;

@interface PSPDFDatabase : NSObject
{
    struct sqlite3 *_db;
    int _busyRetryTimeout;
    NSString *_databasePath;
    NSHashTable *_openResultSets;
    NSMutableSet *_openFunctions;
    NSDateFormatter *_dateFormat;
    unsigned int _logsErrors:1;
    unsigned int _crashOnErrors:1;
    unsigned int _traceExecution:1;
    unsigned int _checkedOut:1;
    unsigned int _shouldCacheStatements:1;
    unsigned int _isExecutingStatement:1;
    unsigned int _inTransaction:1;
    NSMutableDictionary *_cachedStatements;
    id <PSPDFDatabaseEncryptionProvider> _databaseEncryptionProvider;
}

+ (id)storeableDateFormat:(id)arg1;
+ (_Bool)isSQLiteThreadSafe;
+ (id)sqliteLibVersion;
+ (id)databaseWithPath:(id)arg1 databaseEncryptionProvider:(id)arg2;
@property(readonly) id <PSPDFDatabaseEncryptionProvider> databaseEncryptionProvider; // @synthesize databaseEncryptionProvider=_databaseEncryptionProvider;
@property(retain) NSMutableDictionary *cachedStatements; // @synthesize cachedStatements=_cachedStatements;
@property _Bool logsErrors; // @synthesize logsErrors=_logsErrors;
@property _Bool crashOnErrors; // @synthesize crashOnErrors=_crashOnErrors;
@property int busyRetryTimeout; // @synthesize busyRetryTimeout=_busyRetryTimeout;
@property _Bool checkedOut; // @synthesize checkedOut=_checkedOut;
@property _Bool traceExecution; // @synthesize traceExecution=_traceExecution;
- (void).cxx_destruct;
- (_Bool)isReadable;
- (_Bool)setKeyData:(id)arg1;
- (_Bool)rekey:(id)arg1;
- (void)shrinkMemory;
- (void)enableLowMemoryMode;
- (void)enableWALJournal;
- (void)sqlite3Exec:(const char *)arg1;
- (void)makeFunctionNamed:(id)arg1 maximumArguments:(int)arg2 withBlock:(CDUnknownBlockType)arg3;
@property(nonatomic) _Bool shouldCacheStatements;
- (id)inSavePoint:(CDUnknownBlockType)arg1;
- (_Bool)rollbackToSavePointWithName:(id)arg1 error:(id *)arg2;
- (_Bool)releaseSavePointWithName:(id)arg1 error:(id *)arg2;
- (_Bool)startSavePointWithName:(id)arg1 error:(id *)arg2;
- (_Bool)inTransaction;
- (_Bool)beginTransaction;
- (_Bool)beginDeferredTransaction;
- (_Bool)commit;
- (_Bool)rollback;
- (_Bool)executeUpdate:(id)arg1 withErrorAndBindings:(id *)arg2;
- (_Bool)executeUpdateWithFormat:(id)arg1;
- (_Bool)executeUpdate:(id)arg1 withParameterDictionary:(id)arg2;
- (_Bool)executeUpdate:(id)arg1 withArgumentsInArray:(id)arg2;
- (_Bool)executeUpdate:(id)arg1;
- (_Bool)executeUpdate:(id)arg1 error:(id *)arg2 withArgumentsInArray:(id)arg3 orDictionary:(id)arg4 orVAList:(char *)arg5;
- (id)executeQuery:(id)arg1 withArgumentsInArray:(id)arg2;
- (id)executeQueryWithFormat:(id)arg1;
- (id)executeQuery:(id)arg1;
- (id)executeQuery:(id)arg1 withArgumentsInArray:(id)arg2 orDictionary:(id)arg3 orVAList:(char *)arg4;
- (id)executeQuery:(id)arg1 withParameterDictionary:(id)arg2;
- (void)extractSQL:(id)arg1 argumentsList:(char *)arg2 intoString:(id)arg3 arguments:(id)arg4;
- (void)bindObject:(id)arg1 toColumn:(int)arg2 inStatement:(struct sqlite3_stmt *)arg3;
- (int)changes;
- (long long)lastInsertRowId;
- (id)lastError;
- (id)errorWithMessage:(id)arg1;
- (int)lastErrorCode;
- (_Bool)hadError;
- (id)lastErrorMessage;
- (_Bool)databaseExists;
- (void)warnInUse;
- (_Bool)goodConnection;
- (id)stringFromDate:(id)arg1;
- (id)dateFromString:(id)arg1;
- (void)setDateFormat:(id)arg1;
- (_Bool)hasDateFormatter;
- (void)setCachedStatement:(id)arg1 forQuery:(id)arg2;
- (id)cachedStatementForQuery:(id)arg1;
- (void)resultSetDidClose:(id)arg1;
- (void)closeOpenResultSets;
- (_Bool)hasOpenResultSets;
- (void)clearCachedStatements;
- (_Bool)close;
- (_Bool)openWithFlags:(int)arg1;
- (_Bool)openWithEncryptionKey:(id)arg1;
- (_Bool)open;
- (const char *)sqlitePath;
- (struct sqlite3 *)sqliteHandle;
- (id)databasePath;
- (void)dealloc;
- (id)description;
- (id)initWithPath:(id)arg1 databaseEncryptionProvider:(id)arg2;
- (_Bool)validateSQL:(id)arg1 error:(id *)arg2;
- (_Bool)columnExists:(id)arg1 inTableWithName:(id)arg2;
- (id)getTableSchema:(id)arg1;
- (id)getSchema;
- (_Bool)tableExists:(id)arg1;
- (id)dateForQuery:(id)arg1;
- (id)dataForQuery:(id)arg1;
- (double)doubleForQuery:(id)arg1;
- (_Bool)boolForQuery:(id)arg1;
- (long long)longForQuery:(id)arg1;
- (int)intForQuery:(id)arg1;
- (id)stringForQuery:(id)arg1;

@end

