//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <UIKit/UIViewController.h>

#import "OGLAccountMenuDelegate-Protocol.h"
#import "OGLAccountParticleDiscButtonDelegate-Protocol.h"
#import "OGLAccountParticleDiscViewController-Protocol.h"
#import "OGLAnalyticsAccountParticleDiscDelegate-Protocol.h"
#import "UIGestureRecognizerDelegate-Protocol.h"

@class NSString, OGLAccountMenuDependencies, OGLAccountParticleDiscButton, OGLAccountSnackbarManager, OGLAnalyticsComponentContext, UIColor, UIView;
@protocol OGLAccount, OGLAccountMenuDelegate, OGLAccountMenuSession, OGLBadgeSource, OGLMultipleAccountMenuDelegate, OGLRingView, OGLTheming, OGLUILogger;

@interface OGLAccountParticleDiscViewController : UIViewController <OGLAccountParticleDiscButtonDelegate, OGLAnalyticsAccountParticleDiscDelegate, OGLAccountMenuDelegate, UIGestureRecognizerDelegate, OGLAccountParticleDiscViewController>
{
    _Bool _accountSwitchBySwipeEnabled;
    _Bool _didLogAppearance;
    double _avatarSide;
    id <OGLAccountMenuSession> _session;
    OGLAccountMenuDependencies *_accountMenuDependencies;
    id <OGLAccountMenuDelegate> _accountMenuDelegate;
    id <OGLMultipleAccountMenuDelegate> _multipleAccountMenuDelegate;
    id <OGLTheming> _oglTheme;
    UIView *_openSearchBarView;
    UIViewController *_sourceViewController;
    OGLAccountParticleDiscButton *_accountParticleDiscButton;
    OGLAnalyticsComponentContext *_componentContext;
    UIView *_swipeInAnimationDiscView;
    UIView *_swipeOutAnimationDiscView;
    UIView *_swipeAnimationContainerView;
    OGLAccountSnackbarManager *_snackbarManager;
    id <OGLUILogger> _uiLogger;
    long long _previousPrivacyState;
}

@property(nonatomic) long long previousPrivacyState; // @synthesize previousPrivacyState=_previousPrivacyState;
@property(retain, nonatomic) id <OGLUILogger> uiLogger; // @synthesize uiLogger=_uiLogger;
@property(nonatomic) _Bool didLogAppearance; // @synthesize didLogAppearance=_didLogAppearance;
@property(retain, nonatomic) OGLAccountSnackbarManager *snackbarManager; // @synthesize snackbarManager=_snackbarManager;
@property(retain, nonatomic) UIView *swipeAnimationContainerView; // @synthesize swipeAnimationContainerView=_swipeAnimationContainerView;
@property(retain, nonatomic) UIView *swipeOutAnimationDiscView; // @synthesize swipeOutAnimationDiscView=_swipeOutAnimationDiscView;
@property(retain, nonatomic) UIView *swipeInAnimationDiscView; // @synthesize swipeInAnimationDiscView=_swipeInAnimationDiscView;
@property(retain, nonatomic) OGLAnalyticsComponentContext *componentContext; // @synthesize componentContext=_componentContext;
@property(retain, nonatomic) OGLAccountParticleDiscButton *accountParticleDiscButton; // @synthesize accountParticleDiscButton=_accountParticleDiscButton;
@property(nonatomic) __weak UIViewController *sourceViewController; // @synthesize sourceViewController=_sourceViewController;
@property(nonatomic) __weak UIView *openSearchBarView; // @synthesize openSearchBarView=_openSearchBarView;
@property(retain, nonatomic) id <OGLTheming> oglTheme; // @synthesize oglTheme=_oglTheme;
@property(nonatomic) __weak id <OGLMultipleAccountMenuDelegate> multipleAccountMenuDelegate; // @synthesize multipleAccountMenuDelegate=_multipleAccountMenuDelegate;
@property(nonatomic) __weak id <OGLAccountMenuDelegate> accountMenuDelegate; // @synthesize accountMenuDelegate=_accountMenuDelegate;
@property(readonly, nonatomic) OGLAccountMenuDependencies *accountMenuDependencies; // @synthesize accountMenuDependencies=_accountMenuDependencies;
@property(readonly, nonatomic) __weak id <OGLAccountMenuSession> session; // @synthesize session=_session;
@property(nonatomic, getter=isAccountSwitchBySwipeEnabled) _Bool accountSwitchBySwipeEnabled; // @synthesize accountSwitchBySwipeEnabled=_accountSwitchBySwipeEnabled;
@property(nonatomic) double avatarSide; // @synthesize avatarSide=_avatarSide;
- (void).cxx_destruct;
- (void)resetState;
- (id)accountsSortedForQuickSwipe;
- (id)previousAccount;
- (id)nextAccount;
- (void)detachGestureRecognizersFromView:(id)arg1;
- (void)attachGestureRecognizersToView:(id)arg1;
- (id)createSwipeAnimationDiscViewWithAccount:(id)arg1;
- (void)setupSwipeAnimationDiscViewWithDirection:(unsigned long long)arg1 toAccount:(id)arg2;
- (void)handleSwipeWithDirection:(unsigned long long)arg1 fromAccount:(id)arg2 toAccount:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)handleSwipe:(id)arg1;
- (_Bool)gestureRecognizerShouldBegin:(id)arg1;
- (id)logByAccount;
- (void)accountMenuPresenter:(id)arg1 didSwitchToIncognitoModeWithNewValue:(_Bool)arg2;
- (void)accountMenuPresenter:(id)arg1 didSwitchFromAccount:(id)arg2 toAccount:(id)arg3;
- (void)didTapAccountParticleDiscButton:(id)arg1;
- (void)privacyStateDidChange:(id)arg1;
- (void)badgeDidUpdate:(id)arg1;
- (void)ringAccessibilityDidUpdate:(id)arg1;
- (void)configureAccessibilityWithBadgeLabel:(id)arg1;
- (void)configureAccessibility;
- (void)instrumentVisualElements;
@property(nonatomic) __weak id <OGLBadgeSource> badgeSource;
- (struct CGSize)preferredContentSize;
- (void)viewWillLayoutSubviews;
- (void)viewDidAppear:(_Bool)arg1;
- (void)viewDidLoad;
- (void)loadView;
- (void)startAccountMenuSession;
@property(readonly, nonatomic) UIView<OGLRingView> *ringView;
@property(retain, nonatomic) UIColor *customInkColor;
@property(nonatomic) _Bool incognitoMode;
@property(nonatomic) unsigned long long badgeSupportLevel;
@property(nonatomic) _Bool supportsPremiumRings;
@property(nonatomic) long long avatarDisplay;
@property(nonatomic) struct UIEdgeInsets hitAreaInsets;
- (_Bool)shouldSetAccount:(id)arg1;
@property(retain, nonatomic) id <OGLAccount> account;
@property(copy, nonatomic) CDUnknownBlockType ringViewForAccount;
@property(readonly, nonatomic) unsigned long long type;
- (void)triggerCallForAttentionAnimation;
@property(readonly, nonatomic) double discImagePadding;
- (void)dealloc;
- (id)initWithAccountMenuDependencies:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

