//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct 25 2017 03:49:04).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "MDCCollectionViewCell.h"

#import "GCKRemoteMediaClientListener-Protocol.h"
#import "GCKRequestDelegate-Protocol.h"

@class HMELightGroup, HMETile, NSArray, NSString, UIImpactFeedbackGenerator;
@protocol AnalyticsLogger, HMEDeviceEligibilityChecker, HMESpacesDeviceCellDelegate, HMEUnifiedDevice;

@interface HMESpacesDeviceCell : MDCCollectionViewCell <GCKRemoteMediaClientListener, GCKRequestDelegate>
{
    _Bool _visible;
    _Bool _shouldShowLoadingIndicator;
    _Bool _shouldShowWatchLiveTvButton;
    _Bool _playSomethingEnabled;
    _Bool _updatableDeviceTypeFeatureEnabled;
    _Bool _statefulHomeViewFeaturesEnabled;
    _Bool _remoteCastStateFeaturesEnabled;
    _Bool _animateWhileVisible;
    _Bool _forceLoadingIndicatorAnimation;
    id <AnalyticsLogger> _analyticsLogger;
    id <HMEUnifiedDevice> _device;
    long long _multizoneDevicesCount;
    HMELightGroup *_lightGroup;
    NSArray *_inlineButtonTypes;
    id <HMEDeviceEligibilityChecker> _deviceEligibilityChecker;
    id <HMESpacesDeviceCellDelegate> _delegate;
    HMETile *_tile;
    UIImpactFeedbackGenerator *_lightImpactFeedbackGenerator;
    UIImpactFeedbackGenerator *_mediumImpactFeedbackGenerator;
}

- (void).cxx_destruct;
@property(nonatomic) _Bool forceLoadingIndicatorAnimation; // @synthesize forceLoadingIndicatorAnimation=_forceLoadingIndicatorAnimation;
@property(readonly, nonatomic) UIImpactFeedbackGenerator *mediumImpactFeedbackGenerator; // @synthesize mediumImpactFeedbackGenerator=_mediumImpactFeedbackGenerator;
@property(readonly, nonatomic) UIImpactFeedbackGenerator *lightImpactFeedbackGenerator; // @synthesize lightImpactFeedbackGenerator=_lightImpactFeedbackGenerator;
@property(nonatomic) _Bool animateWhileVisible; // @synthesize animateWhileVisible=_animateWhileVisible;
@property(readonly, nonatomic) HMETile *tile; // @synthesize tile=_tile;
@property(nonatomic) __weak id <HMESpacesDeviceCellDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) _Bool remoteCastStateFeaturesEnabled; // @synthesize remoteCastStateFeaturesEnabled=_remoteCastStateFeaturesEnabled;
@property(nonatomic) _Bool statefulHomeViewFeaturesEnabled; // @synthesize statefulHomeViewFeaturesEnabled=_statefulHomeViewFeaturesEnabled;
@property(nonatomic) _Bool updatableDeviceTypeFeatureEnabled; // @synthesize updatableDeviceTypeFeatureEnabled=_updatableDeviceTypeFeatureEnabled;
@property(retain, nonatomic) id <HMEDeviceEligibilityChecker> deviceEligibilityChecker; // @synthesize deviceEligibilityChecker=_deviceEligibilityChecker;
@property(retain, nonatomic) NSArray *inlineButtonTypes; // @synthesize inlineButtonTypes=_inlineButtonTypes;
@property(nonatomic, getter=isPlaySomethingEnabled) _Bool playSomethingEnabled; // @synthesize playSomethingEnabled=_playSomethingEnabled;
@property(nonatomic) _Bool shouldShowWatchLiveTvButton; // @synthesize shouldShowWatchLiveTvButton=_shouldShowWatchLiveTvButton;
@property(nonatomic) _Bool shouldShowLoadingIndicator; // @synthesize shouldShowLoadingIndicator=_shouldShowLoadingIndicator;
@property(nonatomic, getter=isVisible) _Bool visible; // @synthesize visible=_visible;
@property(retain, nonatomic) HMELightGroup *lightGroup; // @synthesize lightGroup=_lightGroup;
@property(nonatomic) long long multizoneDevicesCount; // @synthesize multizoneDevicesCount=_multizoneDevicesCount;
@property(retain, nonatomic) id <HMEUnifiedDevice> device; // @synthesize device=_device;
@property(retain, nonatomic) id <AnalyticsLogger> analyticsLogger; // @synthesize analyticsLogger=_analyticsLogger;
- (_Bool)commandOnlyOnOffForLightGroup:(id)arg1;
- (_Bool)shouldShowOfflineState;
- (_Bool)shouldShowOffState;
- (_Bool)shouldShowOnState;
- (id)formattedButtonTitle:(id)arg1;
- (id)formattedString:(id)arg1 font:(id)arg2 textColor:(id)arg3 lineHeight:(double)arg4;
- (id)formattedSubtitle:(id)arg1 textColor:(id)arg2;
- (id)formattedTitle:(id)arg1;
- (void)lockAction;
- (void)unlockAction;
- (void)turnOff:(id)arg1;
- (void)turnOn:(id)arg1;
- (void)finishSetup:(id)arg1;
- (void)watchLiveTV:(id)arg1;
- (void)playSomething:(id)arg1;
- (void)play:(id)arg1;
- (void)pause:(id)arg1;
- (void)triggerHapticFeedbackMedium;
- (void)triggerHapticFeedbackLight;
- (id)buttonWithTitle:(id)arg1 accessibilityLabel:(id)arg2 action:(SEL)arg3;
- (void)setupButtons:(id)arg1 withButtonTypes:(id)arg2;
- (id)turnOffButtonWithTitleLength:(long long)arg1;
- (id)turnOnButtonWithTitleLength:(long long)arg1;
- (void)invokeRecovery:(id)arg1;
- (id)recoveryButtonWithTitle:(id)arg1;
- (id)unlockButton;
- (id)lockButton;
- (id)finishSetupButton;
- (id)watchLiveTVButton;
- (id)playSomethingButton;
- (id)pauseButton;
- (id)playButton;
- (_Bool)isHomeAutomationDeviceOnMediaIdle;
- (_Bool)supportsPlayback;
- (_Bool)eligibleForPlaySomething;
- (void)updatePlaybackState;
- (void)configureLockUnlockButtons;
- (void)configureOnOffButtons;
- (_Bool)shouldShowInlineOnOffButton;
- (void)configureOpenCloseSubtitle;
- (_Bool)shouldShowLockUnlockStatefulControls;
- (_Bool)shouldShowOpenCloseSubtitle;
- (void)updateButtons;
- (void)updateAnimatedIcon;
- (void)updateAnimating;
- (void)setupTitle;
- (void)setupTile;
- (void)setupOverlayIconOrBadge;
- (void)resetTile;
- (void)resetTextAndButtons;
- (void)resetOverlayIconAndBadge;
- (void)initializeAccessibility;
- (id)accessibilityElementAtIndex:(long long)arg1;
- (long long)indexOfAccessibilityElement:(id)arg1;
- (long long)accessibilityElementCount;
- (id)accessibilityElements;
- (void)logLockNetworkEventWithDeviceID:(id)arg1 inlineActionType:(int)arg2 eventTime:(double)arg3 error:(id)arg4;
- (void)requestDidComplete:(id)arg1;
- (void)remoteMediaClient:(id)arg1 didUpdateMediaStatus:(id)arg2;
- (void)prepareForReuse;
- (id)title;
- (id)deviceStateDescription;
- (void)setSelected:(_Bool)arg1;
- (void)setHighlighted:(_Bool)arg1;
- (id)initWithFrame:(struct CGRect)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

