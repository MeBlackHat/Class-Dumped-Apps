//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import <Core/WAPersistentRequestManagerRegistering-Protocol.h>
#import <Core/WASignalCoordinatorDelegate-Protocol.h>
#import <Core/WASignalKeyStoreDelegate-Protocol.h>

@class NSMutableArray, NSString, NSUserDefaults, WAChatStorage, WALiveLocationController, WAMutableDictionary, WAPBVerifiedNameCertificate, WAPersistentKeyValueStore, WASignalAddress, WASignalCoordinator, WASignalKeyBundle, WASignalManagerPrekeyFetcher, WASignalManagerPrekeyUploader, XMPPConnection;
@protocol OS_dispatch_queue, WASignalDecryptMessageParser, WASignalDeviceManaging, WASignalEncryptMessageCreator;

@interface WASignalManager : NSObject <WASignalKeyStoreDelegate, WASignalCoordinatorDelegate, WAPersistentRequestManagerRegistering>
{
    NSObject<OS_dispatch_queue> *_workQueue;
    WASignalCoordinator *_signalCoordinator;
    WAPersistentKeyValueStore *_localKeyValueStore;
    WASignalManagerPrekeyFetcher *_prekeyFetcher;
    WAMutableDictionary *_groupSessionSyncedCache;
    WASignalManagerPrekeyUploader *_prekeyUploader;
    _Bool _requestRegistrationOnIdMismatchPermitted;
    _Bool _digestRequestPending;
    _Bool _senderKeyRotationRequestPending;
    NSMutableArray *_clientServerKeyBundleSyncCompletionHandlers;
    _Bool _needsRegistration;
    WASignalKeyBundle *_localKeyBundle;
    WAPBVerifiedNameCertificate *_smbEmptyVNameCert;
    WAChatStorage *_chatStorage;
    XMPPConnection *_xmppConnection;
    NSUserDefaults *_userDefaults;
    WALiveLocationController *_liveLocationController;
    id <WASignalEncryptMessageCreator> _encryptMessageCreator;
    id <WASignalDecryptMessageParser> _decryptMessageParser;
    id <WASignalDeviceManaging> _deviceManager;
}

+ (long long)destinationEnumFromJID:(id)arg1;
+ (long long)statsFromCiphertextType:(unsigned long long)arg1;
+ (void)recordDecryptFieldStatEventForJid:(id)arg1 decryptRequest:(id)arg2 decryptedProtobuf:(id)arg3 isCall:(_Bool)arg4 retryCount:(unsigned char)arg5 decryptError:(id)arg6;
+ (void)recordDecryptFieldStatEventForCallWithJid:(id)arg1 decryptRequest:(id)arg2 retryCount:(unsigned char)arg3 decryptError:(id)arg4;
+ (void)recordDecryptFieldStatEventForMesssageWithJid:(id)arg1 decryptRequest:(id)arg2 decryptedProtobuf:(id)arg3 retryCount:(unsigned char)arg4 decryptError:(id)arg5;
+ (void)recordEncryptFieldStatEventForSharedItem:(id)arg1 withEncryptResult:(id)arg2 retryCount:(unsigned char)arg3;
+ (void)recordEncryptFieldStatEventForMessage:(id)arg1 withEncryptResult:(id)arg2 retryCount:(unsigned char)arg3;
@property _Bool needsRegistration; // @synthesize needsRegistration=_needsRegistration;
@property(readonly, nonatomic) id <WASignalDeviceManaging> deviceManager; // @synthesize deviceManager=_deviceManager;
@property(readonly, nonatomic) id <WASignalDecryptMessageParser> decryptMessageParser; // @synthesize decryptMessageParser=_decryptMessageParser;
@property(readonly, nonatomic) id <WASignalEncryptMessageCreator> encryptMessageCreator; // @synthesize encryptMessageCreator=_encryptMessageCreator;
@property(retain, nonatomic) WALiveLocationController *liveLocationController; // @synthesize liveLocationController=_liveLocationController;
@property(readonly, nonatomic) NSUserDefaults *userDefaults; // @synthesize userDefaults=_userDefaults;
@property(readonly, nonatomic) XMPPConnection *xmppConnection; // @synthesize xmppConnection=_xmppConnection;
@property(readonly, nonatomic) WAChatStorage *chatStorage; // @synthesize chatStorage=_chatStorage;
@property(retain) WAPBVerifiedNameCertificate *smbEmptyVNameCert; // @synthesize smbEmptyVNameCert=_smbEmptyVNameCert;
@property(retain) WASignalKeyBundle *localKeyBundle; // @synthesize localKeyBundle=_localKeyBundle;
- (void).cxx_destruct;
- (void)signalManagerPrekeyFetcher:(id)arg1 processBundles:(id)arg2 jidsWithSpecificErrors:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)performSignalKeyStoreCheckpointWithDispatchGroup:(id)arg1 timeout:(double)arg2 force:(_Bool)arg3;
- (void)postIdentityChangeNotificationForDeviceJID:(id)arg1;
- (void)reportPendingExtensionIdentityChangesIfNeeded;
- (void)signDataWithIdentityPrivateKey:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)shimForOrderingWithCompletion:(CDUnknownBlockType)arg1;
- (void)registerHandlersForPersistentRequestManager:(id)arg1;
- (id)sharedObjectKeyForPersistentRequestManager:(id)arg1;
- (void)xmppConnectionStateDidChange:(id)arg1;
- (void)keyStore:(id)arg1 detectedIdentityChangeForDeviceJID:(id)arg2;
- (void)keyStore:(id)arg1 failedWithError:(id)arg2;
@property(readonly, nonatomic) WASignalAddress *userSignalAddress;
- (void)didReceiveIdentityChangedNotificationForDeviceJID:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)enqueueCompletionHandlerForClientServerKeyBundleSync:(CDUnknownBlockType)arg1;
- (void)didReceiveDigestCheckNeededEvent;
- (void)clearLocalSenderKeySessionsForGroupsWithUserJID:(id)arg1;
- (void)clearLocalSenderKeySessionForGroup:(id)arg1;
- (void)didReceivePrekeyUploadRequestWithCurrentKeyCount:(unsigned long long)arg1;
- (void)didReceiveServerCheckLocalRegistrationId:(unsigned int)arg1;
- (void)removeSessionForDeviceJID:(id)arg1 shouldClearIdentity:(_Bool)arg2;
- (void)requestIdentityForDeviceJID:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)groupSessionSyncedCache;
- (id)signalCoordinator;
- (id)workQueue;
- (id)createSignedPrekeyRotationRequest;
- (void)requestSignedPrekeyRotation;
- (void)processClientServerKeyBundleSyncCompletionHandlersWithResult:(unsigned long long)arg1 error:(id)arg2;
- (id)createDigestRequest;
- (void)checkServerDigest;
- (id)prekeyUploaderGetLocalKeyBundle;
- (id)prekeyUploaderCreateSMBCertData;
- (_Bool)prekeyUploaderCheckLocalKeyBundleChanged:(id)arg1;
- (void)prekeyUploaderDidFailWithError:(id)arg1;
- (void)prekeyUploaderDidSucceedWithLastPrekeyID:(unsigned int)arg1 smbCertResult:(id)arg2;
- (void)prekeyUploaderSetRequiresRegistration;
- (void)registerWithServer;
- (void)resetPrekeyBackoff;
- (void)maybeTrickleGenerateSomePrekeys;
- (id)createSMBVNameCert;
- (void)createSMBEmptyVNameCert;
- (id)prekeyFetcher;
- (void)cleanupKeyStoreWithCompletion:(CDUnknownBlockType)arg1;
- (void)resetPersistentStateImpl;
- (void)resetPersistentState;
- (_Bool)loadWithURL:(id)arg1;
- (id)initWithChatStorage:(id)arg1 xmppConnection:(id)arg2 userDefaults:(id)arg3 localKeyValueStore:(id)arg4 urlToKeyStore:(id)arg5 encryptMessageCreator:(id)arg6 decryptMessageParser:(id)arg7 dateProvider:(CDUnknownBlockType)arg8 deviceManager:(id)arg9;
- (void)encryptRegularGroupCipherMessage:(id)arg1 forChatJID:(id)arg2 senderKeyData:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)encryptRegularGroupCipherMessage:(id)arg1 forChatJID:(id)arg2 participantDeviceJID:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)encryptMessage:(id)arg1 forDevices:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)encryptMessage:(id)arg1 forChatJID:(id)arg2 pendingDevices:(id)arg3 actorJIDWrapper:(id)arg4 completion:(CDUnknownBlockType)arg5;
- (void)markSenderKeySentForAllParticipantsOfChatWithGroupCipherJID:(id)arg1;
- (void)prefetchSessionsForChatJIDs:(id)arg1;
- (id)loadDeviceJIDsWithUserJIDs:(id)arg1 inBackgroundWithContext:(id)arg2;
- (void)computeFanoutResultsForRequest:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)fanoutResultsForRequest:(id)arg1 error:(id *)arg2;
- (void)encryptMessageDataA:(id)arg1 forDevicesA:(id)arg2 shouldCheckIdentityForA:(_Bool)arg3 messageDataB:(id)arg4 forDevicesB:(id)arg5 shouldCheckIdentityForB:(_Bool)arg6 completion:(CDUnknownBlockType)arg7;
- (_Bool)encryptIndividualRequest:(id)arg1 result:(out id *)arg2 error:(out id *)arg3;
- (void)encryptDirectedMessage:(id)arg1 forRegularGroupCipherJID:(id)arg2 participantDeviceJID:(id)arg3 senderKeyData:(id)arg4 completion:(CDUnknownBlockType)arg5;
- (id)encryptPlaintextDataInGroupRequest:(id)arg1 error:(id *)arg2;
- (void)encryptGroupRequest:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)fetchDeviceJIDsNeedingSenderKeysForGroupChatSession:(id)arg1 inBackgroundWithContext:(id)arg2;
- (id)fetchDeviceJIDsNeedingSenderKeysForSignalGroupCipherJID:(id)arg1;
- (id)fetchDeviceJIDsNeedingSenderKeysForGroupCipherJID:(id)arg1 activeMemberDeviceJIDs:(id)arg2 currentPhash:(id)arg3;
- (void)processImplicitCompanionIdentityChangeWithKeys:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)requestSignalIdentityPublicKeyFromServerForJID:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)requestPrekeysForJID:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)fetchSignalIdentityPublicKeyForJID:(id)arg1 requestFromServerIfNeeded:(_Bool)arg2 completion:(CDUnknownBlockType)arg3;
- (id)fetchIdentityPublicKeyForDeviceJID:(id)arg1;
- (void)fetchSignalFingerprintForJID:(id)arg1 withCompanionDevices:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)saveCurrentBaseKeyForMessageStanza:(id)arg1 chatJID:(id)arg2 actorJIDWrapper:(id)arg3;
- (void)saveCurrentBaseKeyForLocationParticipant:(id)arg1;
- (void)saveCurrentBaseKeyForMessageID:(id)arg1 actorJIDWrapper:(id)arg2;
- (void)processRetryReceiptForMessageStanzaID:(id)arg1 chatJID:(id)arg2 actorJIDWrapper:(id)arg3 withRecipientRegistrationId:(id)arg4 atRetryCount:(unsigned char)arg5;
- (void)processLocationRetryForParticipant:(id)arg1 withRecipientRegistrationId:(id)arg2 atRetryCount:(unsigned char)arg3;
- (void)processRetryReceiptForMessageID:(id)arg1 actorJIDWrapper:(id)arg2 withRecipientRegistrationId:(id)arg3 atRetryCount:(unsigned char)arg4;
- (void)processIndividualDecryptionRequest:(id)arg1 deviceJID:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)clearDecryptJournalEntriesForJournalIds:(id)arg1;
- (void)decryptGroupMessageWithIndividualRequest:(id)arg1 groupRequest:(id)arg2 withDecryptJournalId:(id)arg3 forGroupJID:(id)arg4 deviceJID:(id)arg5 completion:(CDUnknownBlockType)arg6;
- (void)decryptIndividualMessageWithRequest:(id)arg1 withDecryptJournalId:(id)arg2 forDeviceJID:(id)arg3 completion:(CDUnknownBlockType)arg4;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

