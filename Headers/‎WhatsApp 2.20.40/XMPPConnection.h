//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import <Core/WAFieldStatsEventChatConnectionProbeDelegate-Protocol.h>
#import <Core/WAMMSTaskSessionDelegate-Protocol.h>
#import <Core/WAPersistentRequestManagerRegistering-Protocol.h>
#import <Core/XMPPPresenceControllerDelegate-Protocol.h>
#import <Core/XMPPStreamDelegate-Protocol.h>

@class NSDictionary, NSMutableArray, NSMutableDictionary, NSMutableOrderedSet, NSMutableSet, NSString, WABackoffTracker, WAFieldStatsEventChatConnectionProbe, WAMutableSocketConfiguration, WANetworkUsageManager, WAResolvedEndpoint, WASocketConfiguration, XMPPPassiveModeManager, XMPPPresenceController, XMPPStream;
@protocol OS_dispatch_queue, OS_dispatch_source, XMPPConnectionDelegate, XMPPConnectionTestDelegate;

@interface XMPPConnection : NSObject <WAFieldStatsEventChatConnectionProbeDelegate, WAPersistentRequestManagerRegistering, WAMMSTaskSessionDelegate, XMPPPresenceControllerDelegate, XMPPStreamDelegate>
{
    NSMutableSet *_keysForMaxBackgroundConnectionAttemptsOverride;
    NSMutableDictionary *_notificationCallbacks;
    NSMutableDictionary *_unsentCallStanzas;
    NSMutableDictionary *_unackedPlayedReceipts;
    NSMutableDictionary *_danglingAcks;
    NSMutableDictionary *_sentReadReceipts;
    NSMutableDictionary *_unackedReadReceipts;
    NSMutableDictionary *_callTimers;
    _Bool _firstOfflineMessageReceived;
    double _connectionStartTime;
    NSMutableArray *_requestsInFlight;
    NSMutableArray *_requestsToSend;
    int _executionContext;
    double _connectionAttemptStartTime;
    NSObject<OS_dispatch_source> *_checkConnectionTimer;
    NSMutableArray *_connectionHandlers;
    NSMutableOrderedSet *_stateChangeCallbacks;
    NSMutableDictionary *_notificationHandlers;
    // Error parsing type: AQ, name: _stateULong
    // Error parsing type: AQ, name: _networkStatusULong
    NSString *_radioAccessTechnology;
    // Error parsing type: Ai, name: _connectionId
    double _baseServerShift;
    NSDictionary *_fallbackIPv4Addresses;
    unsigned long long _backgroundConnectionAttempts;
    unsigned long long _foregroundConnectionAttempts;
    _Bool _shouldCallCheckConnectionAfterTransition;
    NSMutableArray *_connectionConditionals;
    _Bool _isConnectionCheckInProgress;
    _Bool _isConnectionCheckResultValid;
    long long _suppressReconnectCounter;
    struct __SCNetworkReachability *_reachabilityRef;
    CDStruct_4210025a _reachabilityContext;
    _Bool _reachabilityOnDemand;
    _Bool _isCheckingInternetConnection;
    NSString *_lastConnectionErrorMessage;
    WAFieldStatsEventChatConnectionProbe *_connectionProbe;
    double _connectAttemptStartTime;
    unsigned long long _busyConnectionTask;
    WABackoffTracker *_streamErrorBackoffTracker;
    WABackoffTracker *_bgTransportBackoffTracker;
    _Bool _requiresConnectionLock;
    unsigned long long _consecutiveConnectFailures;
    unsigned long long _consecutiveNoOfflineProgressAfterConnect;
    WASocketConfiguration *_currentConnectionConfiguration;
    WAMutableSocketConfiguration *_nextConnectionConfiguration;
    _Bool _active;
    _Bool _backoffEnabled;
    WANetworkUsageManager *_networkUsageManager;
    long long _lastOfflineQueueCount;
    double _voipPushDelayWithSkew;
    double _serverTimeShift;
    NSString *_serverPropsVersion;
    id <XMPPConnectionDelegate> _delegate;
    id <XMPPConnectionTestDelegate> _testDelegate;
    XMPPStream *_stream;
    NSObject<OS_dispatch_queue> *_xmppQueue;
    XMPPPassiveModeManager *_passiveModeManager;
    double _lastOfflinePopServerTime;
    XMPPPresenceController *_presenceController;
    NSString *_xmppUser;
}

@property(copy, nonatomic) NSString *xmppUser; // @synthesize xmppUser=_xmppUser;
@property _Bool backoffEnabled; // @synthesize backoffEnabled=_backoffEnabled;
@property(readonly, nonatomic) XMPPPresenceController *presenceController; // @synthesize presenceController=_presenceController;
@property double lastOfflinePopServerTime; // @synthesize lastOfflinePopServerTime=_lastOfflinePopServerTime;
@property(readonly) XMPPPassiveModeManager *passiveModeManager; // @synthesize passiveModeManager=_passiveModeManager;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *xmppQueue; // @synthesize xmppQueue=_xmppQueue;
@property(readonly, nonatomic) XMPPStream *stream; // @synthesize stream=_stream;
@property(nonatomic) __weak id <XMPPConnectionTestDelegate> testDelegate; // @synthesize testDelegate=_testDelegate;
@property(nonatomic) __weak id <XMPPConnectionDelegate> delegate; // @synthesize delegate=_delegate;
@property(copy) NSString *serverPropsVersion; // @synthesize serverPropsVersion=_serverPropsVersion;
@property double serverTimeShift; // @synthesize serverTimeShift=_serverTimeShift;
@property double voipPushDelayWithSkew; // @synthesize voipPushDelayWithSkew=_voipPushDelayWithSkew;
@property long long lastOfflineQueueCount; // @synthesize lastOfflineQueueCount=_lastOfflineQueueCount;
@property(nonatomic, getter=isActive) _Bool active; // @synthesize active=_active;
@property(readonly, nonatomic) WANetworkUsageManager *networkUsageManager; // @synthesize networkUsageManager=_networkUsageManager;
- (void).cxx_destruct;
- (void)presenceController:(id)arg1 presenceDidChangeTo:(unsigned long long)arg2;
- (void)presenceController:(id)arg1 presenceDidChangeTo:(unsigned long long)arg2 forJID:(id)arg3;
- (void)presenceController:(id)arg1 chatStateDidChangeTo:(unsigned long long)arg2 forJID:(id)arg3 participantJID:(id)arg4;
- (void)presenceController:(id)arg1 didReportChatState:(unsigned long long)arg2 forJID:(id)arg3;
- (_Bool)presenceController:(id)arg1 sendStanza:(id)arg2 ignoreExclusive:(_Bool)arg3;
- (_Bool)presenceController:(id)arg1 sendStanza:(id)arg2;
- (_Bool)presenceControllerIsConnected:(id)arg1;
- (void)processIncomingAck:(id)arg1;
- (void)processIncomingChatState:(id)arg1;
- (void)processIncomingPresence:(id)arg1;
- (void)processIncomingMessageStanza:(id)arg1;
- (void)processIncomingIQ:(id)arg1;
- (void)reallyRegisterHandlersForPersistentRequestManager:(id)arg1;
- (void)resetPresenceStateOnStreamClose;
- (void)processIncomingCallStanza:(id)arg1;
- (void)processIncomingCustomStanza:(id)arg1;
- (void)processIncomingNotification:(id)arg1;
- (void)setPresenceInactiveForChat:(id)arg1;
- (void)performOnOfflineComplete;
- (void)performOnStreamOpen;
- (id)chatConnectionAttribution;
- (int)loginPayloadConnectionType;
- (void)registerHandlersForPersistentRequestManager:(id)arg1;
- (id)sharedObjectKeyForPersistentRequestManager:(id)arg1;
- (void)prewarm;
- (void)resetBackoff;
- (void)checkInternetConnection;
- (void)radioAccessTechnologyDidChange:(id)arg1;
- (void)reachabilityDidChangeWithFlags:(unsigned int)arg1;
- (void)logReachabilityFlags:(unsigned int)arg1;
- (unsigned long long)sendStreamElement:(id)arg1 withMaybeTimeout:(id)arg2 fromExclusiveConnection:(id)arg3 ignoreExclusiveConnection:(_Bool)arg4;
- (unsigned long long)sendStreamElement:(id)arg1 withTimeout:(double)arg2 fromExclusiveConnection:(id)arg3 ignoreExclusiveConnection:(_Bool)arg4;
- (unsigned long long)sendStreamElement:(id)arg1 fromExclusiveConnection:(id)arg2;
- (unsigned long long)sendStreamElement:(id)arg1;
- (_Bool)shouldBindToCellular:(_Bool)arg1;
- (void)setFakeIpHintIfNecessary;
- (_Bool)connectIfPossible;
- (void)checkConnection;
- (_Bool)disconnectIfNeeded;
- (_Bool)isSocketHealthy;
@property(readonly, nonatomic, getter=isTransitionState) _Bool transitionState;
@property(readonly, getter=isConnectedInternal) _Bool connectedInternal;
@property(readonly, getter=isConnected) _Bool connected;
- (void)connect;
- (void)resetConnectionAttemptsImpl;
- (void)resetConnectionAttempts;
- (void)reallyConnect;
- (void)closeStream;
- (void)xmppStreamDidBecomeIdle:(id)arg1;
- (void)xmppStream:(id)arg1 didWriteBytesCount:(unsigned long long)arg2;
- (void)xmppStream:(id)arg1 didReadBytesCount:(unsigned long long)arg2;
- (void)xmppStreamDidMakeOfflineProgress:(id)arg1;
- (_Bool)xmppStream:(id)arg1 didReceiveLoginResponseStanza:(id)arg2;
- (void)xmppStream:(id)arg1 initialConfigurationAsync:(CDUnknownBlockType)arg2;
- (void)xmppStreamDidClose:(id)arg1 withFlags:(unsigned long long)arg2;
- (void)handleCustomStanza:(id)arg1;
- (void)handleNotificationStanza:(id)arg1;
- (void)handleAckStanza:(id)arg1;
- (id)ackForIncomingReceipt:(id)arg1;
- (id)stanzaIDsInReceipt:(id)arg1;
- (void)updateStatusForReceipt:(id)arg1 withStanzaIDs:(id)arg2;
- (void)handleReceiptStanza:(id)arg1;
- (void)handleIQStanza:(id)arg1;
- (void)xmppStream:(id)arg1 didReceiveStanza:(id)arg2 withConnectionInfo:(id)arg3;
- (void)xmppStreamDidNotAuthenticate:(id)arg1 dataCenter:(id)arg2 failureCode:(long long)arg3 lockDuration:(double)arg4 retryAfter:(double)arg5 tempBanReasonCode:(long long)arg6 tempBanURL:(id)arg7 tempBanMessage:(id)arg8;
- (void)xmppStreamDidAuthenticate:(id)arg1 dataCenter:(id)arg2 attributes:(id)arg3 serverTime:(id)arg4 shift:(double)arg5;
- (void)performCommonOnStreamOpen;
- (void)leavePassiveModeIfNeeded;
@property(readonly, nonatomic, getter=isPassiveMode) _Bool passiveMode;
- (void)passiveModeManagerDidRequestStateChangeTo:(unsigned long long)arg1;
- (void)xmppStream:(id)arg1 didReceiveStreamError:(id)arg2;
- (void)xmppStreamDidOpen:(id)arg1;
- (void)mmsSession:(id)arg1 didRequestRouteParametersWithLastID:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)checkAndNotifyForSignificantServerTimeShiftChange:(double)arg1;
- (void)sendAckForNotification:(id)arg1;
- (void)sendAckForNotification:(id)arg1 withChildElement:(id)arg2;
- (void)sendIQResponse:(id)arg1 ignoringExclusiveConnection:(_Bool)arg2;
- (void)sendIQResponse:(id)arg1;
- (void)reloadPrivateKey;
- (void)requestExistCheckWithTaskDescription:(id)arg1 session:(id)arg2 authToken:(id)arg3 isExistCheck:(_Bool)arg4 taskMetrics:(id)arg5 completion:(CDUnknownBlockType)arg6;
- (void)sendStatusPrivacyList:(id)arg1 listType:(unsigned long long)arg2 completion:(CDUnknownBlockType)arg3;
- (void)requestStatusPrivacyListsWithCompletion:(CDUnknownBlockType)arg1;
- (void)pingWithCompletion:(CDUnknownBlockType)arg1;
- (void)updateLastSeenTimestamp;
- (void)processIncomingNotificationAck:(id)arg1;
- (void)sendNotification:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)sendMessageStanza:(id)arg1;
- (void)invalidateAllCallWatchdogTimers;
- (void)registerNotificationHandlerForType:(unsigned long long)arg1 block:(CDUnknownBlockType)arg2;
@property(readonly) unsigned long long serverConnectionStatus;
- (void)setNetworkStatus:(unsigned long long)arg1;
@property(readonly) unsigned long long networkStatus;
- (_Bool)isNetworkStatusReachableForFieldStatsEventChatConnectionProbe:(id)arg1;
- (void)handleRemotePushWithPayload:(id)arg1;
- (void)drop;
- (void)disconnectIfStuckInConnecting;
- (void)disconnect;
- (void)runWhenConnected:(CDUnknownBlockType)arg1;
- (void)runWhenConnectionStateEquals:(unsigned long long)arg1 onQueue:(id)arg2 block:(CDUnknownBlockType)arg3;
- (void)runWhenConnectionStateEquals:(unsigned long long)arg1 timeout:(double)arg2 onQueue:(id)arg3 block:(CDUnknownBlockType)arg4;
- (void)drainCurrentStateCallbacks;
- (void)preventConnectionUntilNotConnectedExecutes;
- (void)setState:(unsigned long long)arg1;
@property(readonly) unsigned long long state;
- (void)logConnectionAttemptErrorMessageIfNeeded:(id)arg1;
- (void)checkIfConnectionIsAllowedWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)registerConnectionConditional:(CDUnknownBlockType)arg1 onQueue:(id)arg2;
@property(readonly, nonatomic) WAResolvedEndpoint *currentEndpoint;
- (void)cancelAllRequests;
- (void)resendAllPendingRequests;
- (void)reallyEnqueueRequest:(id)arg1;
- (void)enqueueRequest:(id)arg1;
- (_Bool)isRequestPending:(id)arg1;
- (void)notifyConnectionHandlersOfOfflineMarker;
- (void)removeConnectionHandler:(id)arg1;
- (void)addConnectionHandler:(id)arg1;
@property(readonly, nonatomic) struct __WCSConnection *smaxConnection;
- (void)fallbackAddressesDidChange:(id)arg1;
- (void)applicationDidResume:(id)arg1;
@property(readonly, copy, nonatomic) NSString *genericNetworkErrorMessage;
@property(readonly, copy, nonatomic) NSString *networkStatusErrorMessage;
- (void)systemTimeChanged:(id)arg1;
@property(readonly) int connectionId;
- (void)dealloc;
- (id)initWithNetworkUsageManager:(id)arg1;
- (void)sendRetryReceiptForMessage:(id)arg1 registrationId:(unsigned int)arg2 retryCount:(unsigned char)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

