//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import <Payments/WAPaymentStorageDelegate-Protocol.h>

@class NSString, WAChatStorage, WAPaymentConsumerRequester, WAPaymentExpirePendingCollectRequestsTask, WAPaymentFieldStatsManager, WAPaymentStorage, WAPaymentSyncPaymentMethodsTask, WAPaymentSyncTransactionTask, WAPersistentKeyValueStore, WARepeatingBlockTask, WATaskQueue, XMPPConnection, _TtC8Payments17WAPaymentSettings, _TtC8Payments22WAPaymentNameDirectory;
@protocol OS_dispatch_queue, WAPaymentNotificationsHandler, WAPaymentSystemEventsHandler;

@interface WAPaymentManager : NSObject <WAPaymentStorageDelegate>
{
    WAChatStorage *_chatStorage;
    NSObject<OS_dispatch_queue> *_mainDispatchQueue;
    WAPaymentStorage *_paymentStorage_lazy;
    WAPersistentKeyValueStore *_persistentKeyValueStore;
    WAPaymentSyncPaymentMethodsTask *_taskToSyncPaymentMethods;
    WAPaymentSyncTransactionTask *_taskToSyncTransactions;
    WARepeatingBlockTask *_taskToSyncBlockedHandles;
    WARepeatingBlockTask *_taskToProcessPendingTransactions;
    WARepeatingBlockTask *_taskToProcessMissingDetailsTransactions;
    WAPaymentExpirePendingCollectRequestsTask *_taskToExpirePendingCollectRequests;
    _TtC8Payments22WAPaymentNameDirectory *_paymentNameDirectory;
    _TtC8Payments17WAPaymentSettings *_paymentSettings;
    id <WAPaymentNotificationsHandler> _notificationsHandler;
    id <WAPaymentSystemEventsHandler> _systemEventsHandler;
    XMPPConnection *_xmppConnection;
    WAPaymentConsumerRequester *_paymentRequester;
    WAPaymentFieldStatsManager *_fieldStatsManager;
}

+ (_Bool)isSandboxEnabled;
+ (_Bool)isTOSAccepted;
+ (void)setSandboxEnabled:(_Bool)arg1;
+ (void)setTosAccepted:(_Bool)arg1;
+ (id)fbPayLearnMoreURL;
+ (id)fbPayTOSURL;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *mainDispatchQueue; // @synthesize mainDispatchQueue=_mainDispatchQueue;
@property(readonly, nonatomic) WAChatStorage *chatStorage; // @synthesize chatStorage=_chatStorage;
@property(readonly, nonatomic) WAPaymentFieldStatsManager *fieldStatsManager; // @synthesize fieldStatsManager=_fieldStatsManager;
@property(readonly, nonatomic) WAPaymentConsumerRequester *paymentRequester; // @synthesize paymentRequester=_paymentRequester;
@property(readonly, nonatomic) XMPPConnection *xmppConnection; // @synthesize xmppConnection=_xmppConnection;
@property(readonly, nonatomic) id <WAPaymentSystemEventsHandler> systemEventsHandler; // @synthesize systemEventsHandler=_systemEventsHandler;
@property(readonly, nonatomic) id <WAPaymentNotificationsHandler> notificationsHandler; // @synthesize notificationsHandler=_notificationsHandler;
@property(readonly, nonatomic) _TtC8Payments17WAPaymentSettings *paymentSettings; // @synthesize paymentSettings=_paymentSettings;
- (void).cxx_destruct;
- (void)performPaymentStorageCheckpointWithDispatchGroup:(id)arg1 timeout:(double)arg2 force:(_Bool)arg3;
- (void)didChangeAccountSetUpState;
- (void)performUpdatesForPotentialDatabaseRebuild;
- (_Bool)canSendAgainTransaction:(id)arg1;
- (void)fullyResetStateAndResetTOS:(_Bool)arg1 resetWAPIN:(_Bool)arg2;
- (_Bool)updateTransaction:(id)arg1 toStatusWithBlock:(CDUnknownBlockType)arg2 save:(_Bool)arg3;
- (void)deleteKVSValuesForKeys:(id)arg1;
- (void)deleteKVSValueForKey:(id)arg1;
- (void)updateKVSValue:(id)arg1 forKey:(id)arg2;
- (id)fetchKVSValueForKey:(id)arg1;
@property(readonly, nonatomic) _TtC8Payments22WAPaymentNameDirectory *paymentNameDirectory;
@property(copy, nonatomic) NSString *supportPhoneNumber;
@property(readonly, nonatomic) _Bool hasPaymentAccount;
@property(readonly, nonatomic) WAPaymentStorage *paymentStorage;
@property(nonatomic, getter=isAccountSetup) _Bool accountSetup;
- (void)handleServerTimeShiftNotification:(id)arg1;
- (void)deleteCacheForTransaction:(id)arg1;
- (id)transactionCache:(id)arg1;
- (void)didCancelOutgoingCollectRequestTransaction:(id)arg1;
- (void)didDeclineIncomingPaymentRequestTransaction:(id)arg1;
- (void)didDeclineIncomingPaymentRequestMessage:(id)arg1;
- (void)updateOutgoingCollectRequestStatusForMessageSend:(id)arg1;
- (void)updateRequestTransactionForOutgoingPaymentTransaction:(id)arg1;
- (id)updateCollectRequestForCoreDataTransaction:(id)arg1 messageID:(id)arg2 amount_1000:(long long)arg3 currency:(id)arg4 receiverJID:(id)arg5 senderJID:(id)arg6 groupJID:(id)arg7 localTransactionId:(id)arg8 messageDate:(id)arg9 expiryDate:(id)arg10 isNewTransaction:(_Bool)arg11 chatSessionTransaction:(id)arg12;
- (id)addOutgoingCollectRequestForMessageID:(id)arg1 amount_1000:(long long)arg2 currency:(id)arg3 receiverJID:(id)arg4 senderJID:(id)arg5 groupJID:(id)arg6 localTransactionId:(id)arg7 messageDate:(id)arg8 expiryDate:(id)arg9 chatSessionTransaction:(id)arg10;
- (id)addOrUpdateIncomingCollectRequestForMessageID:(id)arg1 amount_1000:(long long)arg2 currency:(id)arg3 receiverJID:(id)arg4 senderJID:(id)arg5 groupJID:(id)arg6 messageDate:(id)arg7 chatSessionTransaction:(id)arg8;
- (void)checkFutureproofTransactions;
- (void)updateFutureproofTransactionWithMessage:(id)arg1;
- (void)syncFinishedWithResults:(id)arg1;
- (id)addOutgoingTransactionForConfiguration:(id)arg1 newTransactionData:(id)arg2 messageID:(id)arg3 groupJID:(id)arg4 timestamp:(id)arg5 chatSessionTransaction:(id)arg6;
- (void)notifyFetchStateUpdateForMissingDetailsTransaction:(id)arg1;
- (id)addOrUpdateTransactionFromStanza:(id)arg1 messageID:(id)arg2 messageDate:(id)arg3;
- (id)addOrUpdateTransaction:(id)arg1 forceUpdate:(_Bool)arg2 messageDate:(id)arg3;
- (id)addOrUpdateTransaction:(id)arg1 forceUpdate:(_Bool)arg2;
- (void)deleteTransactionWithMessageID:(id)arg1 referenceMessageID:(id)arg2;
- (id)coreDataTransactionWithMessageID:(id)arg1 context:(id)arg2;
- (id)transactionWithMessageID:(id)arg1;
- (id)transactionWithId:(id)arg1;
- (id)missingDetailsTransactions;
- (id)pendingP2PTransactions;
- (id)pendingCollectRequestTransactions:(unsigned long long)arg1;
- (id)transactions:(unsigned long long)arg1;
- (_Bool)canReceivePayment:(id)arg1;
- (void)updateReceiverInfo:(id)arg1 withBlock:(CDUnknownBlockType)arg2 save:(_Bool)arg3;
- (void)updateReceiverInfoForUserJID:(id)arg1 withBlock:(CDUnknownBlockType)arg2 save:(_Bool)arg3;
- (id)receiverInfoForUserJID:(id)arg1;
- (_Bool)canAddNewPaymentMethod;
- (void)updatePaymentAccount:(id)arg1 withBlock:(CDUnknownBlockType)arg2;
- (void)syncMethodsFromResponse:(id)arg1;
- (id)updateWalletAccountBalanceWithResponse:(id)arg1;
- (id)addOrUpdateAccount:(id)arg1;
- (id)accountWithId:(id)arg1;
- (id)cardAccounts;
- (id)accounts;
- (id)oldestCardAccount;
- (id)defaultReceivingAccount;
- (id)defaultPaymentAccount;
- (id)cdPaymentAccountWithId:(id)arg1;
- (void)paymentStorage:(id)arg1 didUpdatePaymentAccount:(id)arg2;
- (void)paymentStorageDidCreateDatabase:(id)arg1;
- (id)createPaymentFieldStatsManager;
- (id)createRequesterWithPersistentRequestManager:(id)arg1;
- (id)initWithChatStorage:(id)arg1 xmppConnection:(id)arg2 paymentSettings:(id)arg3 notificationsHandler:(id)arg4 systemEventsHandler:(id)arg5 persistentKeyValueStore:(id)arg6 persistentRequestManager:(id)arg7;
- (void)rescheduleExpirePendingCollectRequestsTaskForNewRequest:(id)arg1;
- (void)scheduleExpirePendingCollectRequestsTask;
- (void)cancelProcessPendingTransactions;
- (void)scheduleProcessPendingTransactions;
- (void)cancelProcessMissingDetailsTransactions;
- (void)scheduleProcessMissingDetailsTransactions;
- (id)processMissingDetailsTransactionsTask;
- (id)processPendingTransactionsTask;
- (void)postTransactionUpdatedNotification:(id)arg1;
- (void)postTransactionAddOrUpdateNotificationForTransaction:(id)arg1 isNewTransaction:(_Bool)arg2;
- (id)baseTransactionsWithFetchRequest:(id)arg1;
- (id)baseTransactionsForCoreDataTransactions:(id)arg1;
- (_Bool)persistBaseTransaction:(id)arg1 inCoreDataTransaction:(id)arg2 save:(_Bool)arg3 error:(id *)arg4;
- (_Bool)persistBaseTransaction:(id)arg1 error:(id *)arg2;
- (id)coreDataTransactionWithNewTransactionData:(id)arg1 messageID:(id)arg2;
- (id)coreDataTransactionWithTransactionId:(id)arg1 messageID:(id)arg2 messageStanzaId:(id)arg3;
- (id)coreDataTransactionWithMessageID:(id)arg1;
- (id)coreDataTransactionsWithStanzaId:(id)arg1 databaseFetchRequestBlock:(CDUnknownBlockType)arg2;
- (id)coreDataTransactionsWithStanzaId:(id)arg1 context:(id)arg2;
- (id)coreDataTransactionsWithStanzaId:(id)arg1;
- (id)coreDataTransactionWithId:(id)arg1;
- (void)setPendingPaymentTransactionsToUnknown;
- (void)failAllPendingCollectRequests;
- (id)coreDataTransactionsWithStatuses:(id)arg1 types:(id)arg2;
- (id)coreDataTransactionsWithType:(id)arg1;
- (id)coreDataTransactionsWithStatus:(id)arg1;
- (void)resetPaymentStorage;
- (id)preparedPaymentStorage;
- (void)scheduleDeleteExpiredCacheTask;
- (void)cancelBackgroundTasksToSyncDatabase;
- (void)scheduleBackgroundTasksToSyncDatabase;
- (void)scheduleCleanUpBackgroundTasks;
@property(readonly, nonatomic) WATaskQueue *queueForBackgroundTasks;
- (void)cancelSyncTransactionTask;
- (void)scheduleSyncTransactionTask;
- (id)syncTransactionsTask;
- (void)cancelSyncPaymentMethodsTask;
- (void)scheduleSyncPaymentMethodsTask;
- (id)syncPaymentMethodsTask;
- (void)handleTransactionNotificationWithIdentifier:(id)arg1 transactionStanza:(id)arg2;
- (void)processIncomingPayNotification:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)registerXMPPNotificationHandler;
- (void)continueCancelForTransaction:(id)arg1 viewController:(id)arg2;
- (void)checkBlockedStatusAndCancelOutgoingCollectRequestForTransaction:(id)arg1 fromViewController:(id)arg2;
- (void)cancelOutgoingCollectRequestForTransaction:(id)arg1 fromViewController:(id)arg2;
- (void)checkBlockedStatusAndDeclineIncomingCollectRequestForTransaction:(id)arg1 fromViewController:(id)arg2;
- (void)declineIncomingCollectRequestForTransaction:(id)arg1 fromViewController:(id)arg2;
- (id)requestIdentifierForOngoingAccountRequest:(id)arg1;
- (_Bool)shouldShowLoadingIndicatorForTransaction:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

