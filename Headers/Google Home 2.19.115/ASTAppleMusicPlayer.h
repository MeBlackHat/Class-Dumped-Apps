//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "ASTMediaPlayer-Protocol.h"

@class ASTAndGateExecutor, ASTMediaItemInfo, ASTMediaProvider, MPMusicPlayerController, NSMutableDictionary, NSString, NSTimer, NSUserDefaults;
@protocol ASTMediaPlayerService;

@interface ASTAppleMusicPlayer : NSObject <ASTMediaPlayer>
{
    _Bool _interrupted;
    _Bool _playing;
    long long _mediaSessionID;
    unsigned long long _totalTrackCount;
    unsigned long long _currentPlayingTrackIndex;
    ASTMediaProvider *_provider;
    id <ASTMediaPlayerService> _service;
    MPMusicPlayerController *_musicPlayer;
    long long _entityType;
    NSString *_entityName;
    NSMutableDictionary *_predicateDict;
    ASTAndGateExecutor *_playExecutor;
    NSTimer *_positionObserver;
    ASTMediaItemInfo *_nowPlayingItem;
    long long _mediaItemState;
    double _elapsedSeconds;
    double _durationSeconds;
    NSString *_developerToken;
    NSString *_userToken;
    NSUserDefaults *_userDefaults;
}

@property(retain, nonatomic) NSUserDefaults *userDefaults; // @synthesize userDefaults=_userDefaults;
@property(retain, nonatomic) NSString *userToken; // @synthesize userToken=_userToken;
@property(retain, nonatomic) NSString *developerToken; // @synthesize developerToken=_developerToken;
@property(nonatomic) _Bool playing; // @synthesize playing=_playing;
@property(nonatomic) double durationSeconds; // @synthesize durationSeconds=_durationSeconds;
@property(nonatomic) double elapsedSeconds; // @synthesize elapsedSeconds=_elapsedSeconds;
@property(nonatomic) long long mediaItemState; // @synthesize mediaItemState=_mediaItemState;
@property(retain, nonatomic) ASTMediaItemInfo *nowPlayingItem; // @synthesize nowPlayingItem=_nowPlayingItem;
@property(retain, nonatomic) NSTimer *positionObserver; // @synthesize positionObserver=_positionObserver;
@property(retain, nonatomic) ASTAndGateExecutor *playExecutor; // @synthesize playExecutor=_playExecutor;
@property(retain, nonatomic) NSMutableDictionary *predicateDict; // @synthesize predicateDict=_predicateDict;
@property(copy, nonatomic) NSString *entityName; // @synthesize entityName=_entityName;
@property(nonatomic) long long entityType; // @synthesize entityType=_entityType;
@property(retain, nonatomic) MPMusicPlayerController *musicPlayer; // @synthesize musicPlayer=_musicPlayer;
@property(nonatomic) __weak id <ASTMediaPlayerService> service; // @synthesize service=_service;
@property(retain, nonatomic) ASTMediaProvider *provider; // @synthesize provider=_provider;
@property(nonatomic) _Bool interrupted; // @synthesize interrupted=_interrupted;
@property(readonly, nonatomic) unsigned long long currentPlayingTrackIndex; // @synthesize currentPlayingTrackIndex=_currentPlayingTrackIndex;
@property(readonly, nonatomic) unsigned long long totalTrackCount; // @synthesize totalTrackCount=_totalTrackCount;
@property(nonatomic) long long mediaSessionID; // @synthesize mediaSessionID=_mediaSessionID;
- (void).cxx_destruct;
- (id)removeCommonAlbumVerbiageFromString:(id)arg1;
- (_Bool)appleMusicAlbumRequestMatchesAssistantServerRequestForResponseData:(id)arg1;
- (_Bool)appleMusicSongRequestMatchesAssistantServerRequestForResponseData:(id)arg1;
- (id)allPlaylistIDsFromResponseData:(id)arg1;
- (id)playlistToPlayFromResponseData:(id)arg1 forGenre:(id)arg2;
- (id)musicGenresFromResponseData:(id)arg1 forMusicItemType:(long long)arg2;
- (id)formatQueryForURL:(id)arg1;
- (unsigned long long)genreIndex:(id)arg1;
- (id)truncateStorefrontIdentifier:(id)arg1;
- (id)cloudAppleMusicFetcher:(id)arg1;
- (_Bool)isSongTrackDataPerfectMatched:(id)arg1;
- (id)parseSongIDsFromData:(id)arg1;
- (void)fetchCompletedWithData:(id)arg1 error:(id)arg2 failBlock:(CDUnknownBlockType)arg3;
- (void)queryCloudAppleMusicWithFailBlock:(CDUnknownBlockType)arg1;
- (void)fireRatingSongRequestForStoreID:(id)arg1 withValue:(long long)arg2;
- (void)addItemsToMediaPlayerQueueWithStoreIDs:(id)arg1 withFailBlock:(CDUnknownBlockType)arg2;
- (void)handleMusicKitGenreResponseResult:(id)arg1 genre:(id)arg2 withStoreIDs:(id)arg3 withFailBlock:(CDUnknownBlockType)arg4;
- (void)handleMusicKitResponseResult:(id)arg1 forRequestType:(long long)arg2 forSearchType:(id)arg3 withFailBlock:(CDUnknownBlockType)arg4;
- (void)fireMusicKitGenreRequest:(id)arg1 forGenre:(id)arg2 addingStoreIDsToPlayer:(id)arg3 withFailBlock:(CDUnknownBlockType)arg4;
- (void)fireMusicKitRequest:(id)arg1 requestType:(long long)arg2 searchType:(id)arg3 withFailBlock:(CDUnknownBlockType)arg4;
- (id)buildGenericMusicKitRequestWithType:(long long)arg1 storefront:(id)arg2 queryItems:(id)arg3;
- (id)buildMusicKitGenreRequestWithResponseData:(id)arg1 forGenre:(id)arg2 storefront:(id)arg3;
- (id)buildMusicKitRequestWithTerm:(id)arg1 requestType:(long long)arg2 searchType:(id)arg3 storefront:(id)arg4;
- (void)queryCatalogInMusicKitWithFailBlock:(CDUnknownBlockType)arg1;
- (void)queryRecommendationInMusicKitWithFailBlock:(CDUnknownBlockType)arg1;
- (void)queryMusicKitWithFailBlock:(CDUnknownBlockType)arg1;
- (void)tryQueryCloudAppleMusicWithFailBlock:(CDUnknownBlockType)arg1;
- (void)querySongsFromPredicatesWithFailBlock:(CDUnknownBlockType)arg1;
- (void)queryMediaItem;
- (void)updatePlaybackPosition;
@property(readonly, nonatomic) _Bool currentlyPlayingSegmentIsTrack;
@property(readonly, nonatomic) _Bool ownsRemoteControlCenter;
- (void)updateNowPlayingItem:(id)arg1;
- (void)updatePlaybackState:(id)arg1;
- (_Bool)setRating:(long long)arg1;
- (void)seekToPosition:(double)arg1;
- (void)playNextTrack;
- (void)playPreviousTrack;
- (void)playOrPause;
- (void)pause;
- (void)stop;
- (void)play;
- (void)playWhenReady;
- (void)prepareToPlay;
- (void)updateWithMediaPlayerItems:(id)arg1;
- (id)initWithMusicKitDevelopToken:(id)arg1 withUserDefaults:(id)arg2;
- (id)initWithMusicKitDevelopToken:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

