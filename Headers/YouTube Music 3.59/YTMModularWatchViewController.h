//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "YTMultiSizeViewController.h"

#import "MDXSessionManagerObserver-Protocol.h"
#import "MDXSessionObserver-Protocol.h"
#import "YTActiveVideoProvider-Protocol.h"
#import "YTActiveVideoReportingRendererProvider-Protocol.h"
#import "YTGraftingViewController-Protocol.h"
#import "YTHotConfigObserver-Protocol.h"
#import "YTMAutoOfflineControllerObserver-Protocol.h"
#import "YTMMusicAppMetadataObserverProtocol-Protocol.h"
#import "YTMNowPlayingViewControllerDelegate-Protocol.h"
#import "YTMOfflineabilityResponderProvider-Protocol.h"
#import "YTMPlaybackDebugDataProvider-Protocol.h"
#import "YTMPlaybackTransportControllerDelegate-Protocol.h"
#import "YTMPlayerPageResponderProvider-Protocol.h"
#import "YTMPlayerThumbnailResponderProvider-Protocol.h"
#import "YTMPlayerViewControllerParent-Protocol.h"
#import "YTMPlaylistControlsResponderProvider-Protocol.h"
#import "YTMQueueControllerObserverProtocol-Protocol.h"
#import "YTMQueueModificationObserver-Protocol.h"
#import "YTMScreenshotSharingDataProvider-Protocol.h"
#import "YTMThemeControllerObserver-Protocol.h"
#import "YTMVideoOverlayViewControllerDelegate-Protocol.h"
#import "YTMWatchNextStateResponderProvider-Protocol.h"
#import "YTMWatchTransitionControllerDelegate-Protocol.h"
#import "YTMWatchViewControllerProtocol-Protocol.h"
#import "YTMWatchViewDelegate-Protocol.h"
#import "YTOfflinePlaylistControllerObserver-Protocol.h"
#import "YTOfflineVideoControllerObserver-Protocol.h"
#import "YTPlaybackControllerEventsDelegate-Protocol.h"
#import "YTPlaybackControllerUIDelegate-Protocol.h"
#import "YTPlaylistServiceObserver-Protocol.h"
#import "YTSystemNotificationsObserver-Protocol.h"
#import "YTUserChangedObserver-Protocol.h"
#import "YTYouThereControllerDelegate-Protocol.h"

@class GIMMe, HAMIdleTimer, NSHashTable, NSString, UIViewController, YTCommandResponderEvent, YTICommand, YTIPlayerOverlayRenderer, YTIVideoReportingSupportedRenderers, YTInnerTubeControllerFactory, YTMAutoOfflineController, YTMBackgroundTask, YTMBackgroundUpsellNotificationController, YTMBottomSheet, YTMFullscreenVideoViewController, YTMModularWatchView, YTMNowPlayingViewController, YTMPlaybackPublishController, YTMPlayerOverlayFactory, YTMPlayerTabViewController, YTMProxyButtonController, YTMQueueCollectionViewController, YTMQueueController, YTMQueueModificationNotifier, YTMQueueServiceController, YTMRestorableQueueState, YTMScreenshotSharingCoordinator, YTMSettings, YTMThemeController, YTMWatchNextResponseViewController, YTMWatchNextViewController, YTMWatchTransition, YTMWatchTransitionController, YTMWazeAudioController, YTOfflinePlaylistController, YTOfflineVideoController, YTPlaybackConfig, YTPlaybackDebugData, YTPlaylistService, YTUserDefaults, YTYouThereController;
@protocol MDXServices, YTMServices, YTMWatchViewControllerObserver, YTPlaybackController, YTResponder;

@interface YTMModularWatchViewController : YTMultiSizeViewController <MDXSessionObserver, MDXSessionManagerObserver, YTActiveVideoProvider, YTActiveVideoReportingRendererProvider, YTHotConfigObserver, YTMAutoOfflineControllerObserver, YTMMusicAppMetadataObserverProtocol, YTMNowPlayingViewControllerDelegate, YTMWatchTransitionControllerDelegate, YTMOfflineabilityResponderProvider, YTMPlaybackDebugDataProvider, YTMPlayerThumbnailResponderProvider, YTMPlayerViewControllerParent, YTMPlaylistControlsResponderProvider, YTMPlayerPageResponderProvider, YTMQueueControllerObserverProtocol, YTMQueueModificationObserver, YTMVideoOverlayViewControllerDelegate, YTMPlaybackTransportControllerDelegate, YTMScreenshotSharingDataProvider, YTMThemeControllerObserver, YTMWatchNextStateResponderProvider, YTMWatchViewDelegate, YTOfflinePlaylistControllerObserver, YTOfflineVideoControllerObserver, YTPlaybackControllerEventsDelegate, YTPlaybackControllerUIDelegate, YTPlaylistServiceObserver, YTSystemNotificationsObserver, YTGraftingViewController, YTUserChangedObserver, YTYouThereControllerDelegate, YTMWatchViewControllerProtocol>
{
    id <MDXServices> _MDXServices;
    YTInnerTubeControllerFactory *_innerTubeControllerFactory;
    YTMWatchNextResponseViewController *_watchNextResponseViewController;
    id <YTMWatchViewControllerObserver> _observers;
    YTIVideoReportingSupportedRenderers *_videoReportingRenderers;
    YTMFullscreenVideoViewController *_fullscreenViewController;
    YTMNowPlayingViewController *_nowPlayingViewController;
    YTPlaylistService *_playlistService;
    YTMSettings *_settings;
    _Bool _playing;
    _Bool _shuffleEnabled;
    _Bool _isLandscape;
    _Bool _applicationIsInactive;
    HAMIdleTimer *_idleTimer;
    _Bool _idleTimerDisabled;
    YTMWatchTransitionController *_watchTransitionController;
    YTMRestorableQueueState *_restorableQueueState;
    YTMPlayerOverlayFactory *_overlayFactory;
    YTOfflineVideoController *_offlineVideoController;
    YTOfflinePlaylistController *_offlinePlaylistController;
    YTMAutoOfflineController *_autoOfflineController;
    long long _playerState;
    YTUserDefaults *_userDefaults;
    CDUnknownBlockType _playbackResumedReadyToPlayBlock;
    YTMThemeController *_themeController;
    int _musicVideoType;
    YTMQueueServiceController *_queueServiceController;
    YTMQueueCollectionViewController *_queueCollectionViewController;
    YTMPlayerTabViewController *_tabViewController;
    YTMScreenshotSharingCoordinator *_screenshotCoordinator;
    YTMWatchNextViewController *_watchNextViewController;
    YTMBackgroundTask *_backgroundTask;
    NSHashTable *_offlineabilityObservers;
    YTMProxyButtonController *_proxyButtonController;
    YTMPlaybackPublishController *_playbackPublishController;
    YTMBackgroundUpsellNotificationController *_backgroundUpsellNotificationController;
    YTMBottomSheet *_bottomSheet;
    YTICommand *_videoShareEndpoint;
    YTPlaybackDebugData *_savedPlaybackDebugData;
    YTMQueueModificationNotifier *_queueModificationNotifier;
    _Bool _gaplessEnabled;
    YTMWatchTransition *_upcomingWatchTransition;
    YTMWatchTransition *_playerInternalTransitionWatchTransition;
    YTPlaybackConfig *_upcomingPlaybackConfig;
    _Bool _shouldAttachGaplessTransitionPlaybackToWatchPage;
    _Bool _pauseOnMinimize;
    _Bool _maximizeOnPlay;
    _Bool _hasShownMiniplayerCommand;
    YTICommand *_miniplayerCommand;
    YTMWazeAudioController *_wazeAudioController;
    _Bool _presentingFullscreen;
    _Bool _initialPlayback;
    id <YTResponder> _parentResponder;
    NSString *_videoTitle;
    NSString *_videoArtist;
    YTIPlayerOverlayRenderer *_playerOverlayRenderer;
    unsigned long long _loopMode;
    GIMMe *_gimme;
    id <YTMServices> _services;
    YTMQueueController *_queueController;
    YTICommand *_navigationEndpoint;
    UIViewController<YTPlaybackController> *_playerViewController;
    YTMModularWatchView *_watchView;
    YTYouThereController *_youThereController;
}

+ (id)restorableQueueFilePath;
@property(retain, nonatomic) YTYouThereController *youThereController; // @synthesize youThereController=_youThereController;
@property(retain, nonatomic) YTMModularWatchView *watchView; // @synthesize watchView=_watchView;
@property(nonatomic) _Bool initialPlayback; // @synthesize initialPlayback=_initialPlayback;
@property(retain, nonatomic) UIViewController<YTPlaybackController> *playerViewController; // @synthesize playerViewController=_playerViewController;
@property(retain, nonatomic) YTICommand *navigationEndpoint; // @synthesize navigationEndpoint=_navigationEndpoint;
@property(nonatomic) __weak YTMQueueController *queueController; // @synthesize queueController=_queueController;
@property(nonatomic) __weak id <YTMServices> services; // @synthesize services=_services;
@property(nonatomic) __weak GIMMe *gimme; // @synthesize gimme=_gimme;
@property(nonatomic) unsigned long long loopMode; // @synthesize loopMode=_loopMode;
@property(nonatomic, getter=isPresentingFullscreen) _Bool presentingFullscreen; // @synthesize presentingFullscreen=_presentingFullscreen;
@property(readonly, nonatomic) YTIPlayerOverlayRenderer *playerOverlayRenderer; // @synthesize playerOverlayRenderer=_playerOverlayRenderer;
@property(readonly, nonatomic) NSString *videoArtist; // @synthesize videoArtist=_videoArtist;
@property(readonly, nonatomic) NSString *videoTitle; // @synthesize videoTitle=_videoTitle;
@property(readonly, nonatomic) __weak id <YTResponder> parentResponder; // @synthesize parentResponder=_parentResponder;
- (void).cxx_destruct;
- (void)updateWazeNowPlayingItem:(id)arg1;
- (void)setPlayerViewControllerUpcomingPlayerTransitionAndPlaybackConfig;
- (void)setUpcomingWatchTransition:(id)arg1;
- (void)updateUpcomingWatchTransition;
- (void)updateGaplessEnabledFromHotConfig:(id)arg1;
- (void)resetPlayerViewController;
- (void)initializeViewControllersFromRestorableState;
- (void)clearPersistedQueueState;
- (void)persisteQueueStateWithWatchNextResponse:(id)arg1;
- (void)setQueueControllerIfPossible:(id)arg1;
- (_Bool)isAudioOnlyAuthorized:(id)arg1;
- (void)handleOfflineVideoDeletionWithVideoID:(id)arg1;
- (_Bool)hasOverlaysPresent;
- (void)displayFirstMealbarInPlayerResponse:(id)arg1 withTriggerCondition:(int)arg2;
- (void)loadMDXTransitionForSession:(id)arg1 videoID:(id)arg2;
- (void)resetPlayer;
- (void)resetAndHide;
- (void)reset;
- (id)contentVideoPlayerOverlay;
- (id)activeVideoPlayerOverlay;
- (void)didTapNextVideo;
- (void)didTapPrevVideo;
- (void)didTapPlayButton;
- (void)reloadPlayer;
- (void)reload;
- (void)setPlayerViewSize:(struct CGSize)arg1;
- (void)createWatchNextViewController;
- (void)handleRemoteControlEvent:(long long)arg1;
- (long long)handleChangeShuffleModeCommand:(id)arg1;
- (long long)handleChangeRepeatModeCommand:(id)arg1;
- (long long)handleNextTrackCommand:(id)arg1;
- (long long)handlePreviousTrackCommand:(id)arg1;
- (long long)handlePauseCommand:(id)arg1;
- (long long)handlePlayCommand:(id)arg1;
- (long long)handleTogglePlayPauseCommand:(id)arg1;
- (long long)handleChangePlaybackPositionCommand:(id)arg1;
- (void)createLockScreenControls;
- (void)createNowPlayingController;
- (_Bool)maybeCreatePlayerViewController;
- (void)loadWatchNextWithTransition:(id)arg1;
- (void)setTransition:(id)arg1;
- (_Bool)shouldWatchTransitionControllerDisplayWiFiInterruption:(id)arg1;
- (void)watchTransitionController:(id)arg1 fetchedWatchNextResponse:(id)arg2;
- (void)watchTransitionController:(id)arg1 didFinishLoadingTransition:(id)arg2;
- (void)watchTransitionController:(id)arg1 didBeginLoadingTransition:(id)arg2;
- (void)watchTransitionControllerRequestedPlayerReset:(id)arg1;
- (void)watchTransitionControllerRequestedPlayerViewControllerReset:(id)arg1;
- (void)watchTransitionControllerRequestedCreatingPlayerViewController:(id)arg1;
- (void)watchTransitionController:(id)arg1 setNewTransition:(id)arg2;
- (void)watchTransitionController:(id)arg1 prepareToLoadWithWatchTransition:(id)arg2;
- (_Bool)isCarPlayActive;
- (_Bool)isMDXActive;
- (void)updateBackgroundColorAnimated:(_Bool)arg1;
- (_Bool)isPlayingOfflineVideo;
- (void)setSampledColorFromEvent:(id)arg1;
- (void)loadWithModel:(id)arg1 startPlayback:(_Bool)arg2;
- (void)notifyOfflineabilityObserversDidChange;
- (void)updateLayoutAnimatedWithExpansionCoefficient:(double)arg1;
- (void)updateWatchViewIsPlayingAudio;
- (void)setVideoTitle:(id)arg1 videoArtist:(id)arg2;
- (void)maybeCreateYouThereControllerWithPlayerResponse:(id)arg1;
- (void)presentConsolidatedMenuFromButton:(id)arg1;
- (id)activePlaylistSetVideoID;
- (void)notifyPlayerEventsObservers;
- (id)activeOnlineOrOfflinePlaylistID;
- (void)updateAVSwitchAvailable;
- (void)didTapNoVideoModeActionSheetGotItButton;
- (void)didTapNoVideoModeActionSheetSettingsButton;
- (void)showControlsIfNeededAnimated:(_Bool)arg1 autoHide:(_Bool)arg2;
- (void)showNoVideoModeActionSheet;
- (_Bool)shouldPresentFullScreen;
- (_Bool)shouldDismissFullScreen;
- (_Bool)userAudioOnlyModeActive;
- (id)sourceView;
- (id)screenshotSharingShareEndpoint;
- (void)exitFullScreenIfRequiredWithCompletion:(CDUnknownBlockType)arg1;
- (id)currentCSN;
- (void)youThereControllerDidTransitionFromState:(long long)arg1 toState:(long long)arg2;
- (void)queueModificationNotifier:(id)arg1 observedModificationToQueueController:(id)arg2;
- (void)queueController:(id)arg1 didAddItemsFromResponse:(id)arg2;
- (void)queueController:(id)arg1 didReplacePlaylistWithPlaylistPanel:(id)arg2;
- (void)queueController:(id)arg1 didUpdateUserContentMode:(unsigned long long)arg2;
- (void)queueController:(id)arg1 didRemoveVideoAtIndexPath:(id)arg2;
- (void)queueController:(id)arg1 nowPlayingItemAtIndex:(unsigned long long)arg2;
- (void)addOfflineabilityChangeObserver:(id)arg1;
- (CDUnknownBlockType)clientDataBlockForInteractionType:(unsigned long long)arg1;
- (id)navEndpoint;
- (id)playerContainerView;
- (id)detachPlayerViewController;
- (void)attachPlayerViewController:(id)arg1;
- (void)nowPlayingViewController:(id)arg1 didTapOverflowMenuButton:(id)arg2;
- (void)nowPlayingViewDidCollapseExpandedViews:(id)arg1;
- (void)nowPlayingViewControllerDidCollapseExpandedViews:(id)arg1;
- (void)nowPlayingViewDidChangeExpansionCoefficient:(id)arg1;
- (void)nowPlayingViewControllerDidChangeExpansionCoefficient:(id)arg1;
- (void)nowPlayingView:(id)arg1 expansionCoefficientChangeTo:(double)arg2 animated:(_Bool)arg3;
- (void)nowPlayingViewController:(id)arg1 expansionCoefficientChangeTo:(double)arg2 animated:(_Bool)arg3;
- (void)nowPlayingViewWillChangeExpansionCoefficient:(id)arg1;
- (void)nowPlayingViewControllerWillChangeExpansionCoefficient:(id)arg1;
- (void)nowPlayingView:(id)arg1 scrubberDidBeginExpanding:(id)arg2;
- (void)nowPlayingView:(id)arg1 scrubberDidBeginCollapsing:(id)arg2;
- (void)nowPlayingViewControllerDidTapPrev:(id)arg1;
- (void)nowPlayingViewControllerDidTapNext:(id)arg1;
- (void)nowPlayingViewControllerDidTapPlay:(id)arg1;
- (_Bool)isShowingLiveChat;
- (void)showLiveChat:(_Bool)arg1;
- (void)hideWatch;
- (void)showAddToMenuFromView:(id)arg1;
- (void)adDidComplete:(long long)arg1;
- (void)showSmallScreen;
- (void)showFullScreen;
- (void)userDidChange;
- (void)didDeletePlaylist:(id)arg1;
- (id)playbackDebugData;
- (void)playbackTransportController:(id)arg1 executeTransportCommand:(unsigned long long)arg2;
- (void)didDeleteAllOfflineVideosWithIDs:(id)arg1;
- (void)didDeleteVideoID:(id)arg1 fromPlaylistID:(id)arg2;
- (void)didDeleteOfflineVideoWithID:(id)arg1 pinTypes:(int)arg2;
- (void)autoOfflineController:(id)arg1 didDeleteVideoWithId:(id)arg2;
- (void)watchViewDidRetry:(id)arg1;
- (void)watchViewDidCollapse:(id)arg1;
- (void)watchViewDidExpand:(id)arg1;
- (id)contextDecorator;
- (void)watchViewDidTapCloseButton:(id)arg1;
- (void)watchViewDidDismissPlayer:(id)arg1;
- (void)watchViewWillDismissPlayer:(id)arg1;
- (void)watchViewDidTapPlayButton:(id)arg1;
- (void)watchView:(id)arg1 expansionCoefficientDidChange:(double)arg2;
- (void)watchViewWillCollapse:(id)arg1;
- (void)onHasPreviousNextChangedForMDXSession:(id)arg1 hasPrevious:(_Bool)arg2 hasNext:(_Bool)arg3;
- (void)MDXSession:(id)arg1 videoDidChangeToVideoID:(id)arg2;
- (void)MDXSession:(id)arg1 playlistDidChangeToListID:(id)arg2 videoIndex:(unsigned long long)arg3 firstVideoID:(id)arg4;
- (void)MDXSession:(id)arg1 playerStateDidChange:(long long)arg2;
- (void)MDXSessionStatusDidBecomeActive:(_Bool)arg1;
- (void)MDXSessionManager:(id)arg1 didFailToStartSession:(id)arg2 withError:(id)arg3;
- (void)MDXSessionManager:(id)arg1 didEndSession:(id)arg2 withError:(id)arg3;
- (void)MDXSessionManager:(id)arg1 didStartSession:(id)arg2;
- (void)MDXSessionManager:(id)arg1 willStartSession:(id)arg2;
- (_Bool)isActiveVideoPlayable;
- (unsigned long long)activeVideoIndex;
- (id)activePlaylistID;
- (double)activeVideoMediaTime;
- (id)activeVideoID;
- (id)activeVideoReportingRenderer;
- (void)watchNextDidChangeTuning;
- (void)didLoadWatchNextResponse:(id)arg1 queueController:(id)arg2;
- (id)thumbnailForVideoID:(id)arg1;
- (void)expandWatchViewIfRequired;
- (void)resolveMiniplayerRendererEndpointIfNeeded;
- (void)resetMiniplayerRestrictions;
- (void)prepareMiniplayerRestrictionsFromPlayerResponse:(id)arg1;
- (void)playbackControllerDidFinishPlayingAd;
- (void)playbackControllerDidPressCopyDebugInfo;
- (void)playbackControllerDidReceivePlayerResponse:(id)arg1;
- (void)playbackControllerDidFailWithError:(id)arg1;
- (void)playbackControllerWillFailWithError:(id)arg1;
- (void)playbackControllerStateDidChange;
- (void)notifyNowPlayingStateObservers;
- (void)playbackControllerPlayerStateDidChange;
- (void)playbackControllerDidPlay;
- (void)playbackControllerDidTransitionInternallyToNextPlayback;
- (void)playbackControllerDidFinishPlaybackAndWillTransitionInternallyToNextPlayback:(_Bool)arg1;
- (void)playbackControllerCurrentVideoMediaTimeDidChange:(double)arg1;
- (void)playbackControllerDidLoadPlayerWithPlaybackData:(id)arg1;
- (void)playbackControllerDidActivateVideo:(id)arg1 withPlaybackData:(id)arg2;
- (void)themeController:(id)arg1 playerPagePaletteDidChange:(id)arg2;
- (void)musicAppMetadataDidChange:(id)arg1;
- (void)videoOverlayViewControllerDidTapAVSwitch:(id)arg1;
- (void)videoOverlayViewController:(id)arg1 didTapOverflowMenuButton:(id)arg2;
- (void)hotConfigDidChange:(id)arg1;
- (_Bool)hasLoopButton;
- (_Bool)hasShuffleButton;
@property(nonatomic, getter=isShuffleEnabled) _Bool shuffleEnabled;
- (id)persistedQueueController;
- (void)canBePushedWithBlock:(CDUnknownBlockType)arg1;
- (_Bool)isEqualTopController:(id)arg1;
- (id)model;
- (void)loadWithModel:(id)arg1 fromView:(id)arg2;
- (void)didTransitionFromSize:(struct CGSize)arg1 toSize:(struct CGSize)arg2;
- (void)willTransitionFromSize:(struct CGSize)arg1 toSize:(struct CGSize)arg2;
- (_Bool)prefersStatusBarHidden;
- (void)appWillResignActive:(id)arg1;
- (void)appDidBecomeActive:(id)arg1;
- (void)appDidChangeDeviceOrientation;
- (_Bool)blockOnlinePlaybackIfNecessaryForEndpoint:(id)arg1;
- (void)traitCollectionDidChange:(id)arg1;
- (void)willTransitionToTraitCollection:(id)arg1 withTransitionCoordinator:(id)arg2;
- (_Bool)isVolumeBarVisible;
- (void)setParentResponder:(id)arg1;
- (void)restorePlaybackQueue;
- (void)loadWithModel:(id)arg1 fromView:(id)arg2 expand:(_Bool)arg3 startPlayback:(_Bool)arg4;
- (void)removeObserver:(id)arg1;
- (void)addObserver:(id)arg1;
- (void)loadView;
- (void)dealloc;
- (id)initWithParentResponder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(retain, nonatomic) YTCommandResponderEvent *sourceEvent;
@property(readonly) Class superclass;

@end

