//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct 25 2017 03:49:04).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class NSDictionary, NSManagedObjectContext, NSManagedObjectModel, NSMutableArray, NSPersistentStore, NSPersistentStoreCoordinator, NSString, NSURL;
@protocol OS_dispatch_queue, OS_dispatch_semaphore;

@interface WAStorage : NSObject
{
    NSString *_logIdentifier;
    unsigned long long _maximumBackgroundContextCount;
    _Bool _skipBackup;
    NSPersistentStoreCoordinator *_persistentStoreCoordinator;
    NSPersistentStore *_persistentStore;
    NSObject<OS_dispatch_queue> *_backgroundWaitingQueue;
    NSObject<OS_dispatch_queue> *_backgroundIssuingQueue;
    NSMutableArray *_backgroundContextPool;
    NSObject<OS_dispatch_semaphore> *_backgroundContextAvailable;
    unsigned long long _backgroundIdlePoolCount;
    long long _availableRecoveryOptions;
    _Bool _databaseLoaded;
    NSManagedObjectModel *_databaseModel;
    NSURL *_databaseStoreURL;
    long long _databaseRecoveryOption;
    NSManagedObjectContext *_internalManagedObjectContext;
}

+ (id)primaryDatabaseContextConcurrencyType;
+ (void)configureDatabasePRAGMAs:(id)arg1;
+ (void)configureDatabaseOptions:(id)arg1;
- (void).cxx_destruct;
@property(readonly, nonatomic) NSPersistentStoreCoordinator *persistentStoreCoordinator; // @synthesize persistentStoreCoordinator=_persistentStoreCoordinator;
@property(readonly, nonatomic) NSString *logIdentifier; // @synthesize logIdentifier=_logIdentifier;
@property(readonly, nonatomic) _Bool skipBackup; // @synthesize skipBackup=_skipBackup;
@property(retain) NSManagedObjectContext *internalManagedObjectContext; // @synthesize internalManagedObjectContext=_internalManagedObjectContext;
@property(readonly, nonatomic) long long databaseRecoveryOption; // @synthesize databaseRecoveryOption=_databaseRecoveryOption;
@property(getter=isDatabaseLoaded) _Bool databaseLoaded; // @synthesize databaseLoaded=_databaseLoaded;
@property(readonly, nonatomic) NSURL *databaseStoreURL; // @synthesize databaseStoreURL=_databaseStoreURL;
@property(readonly, nonatomic) NSManagedObjectModel *databaseModel; // @synthesize databaseModel=_databaseModel;
- (_Bool)updateDatabaseMetadataIfLoaded:(CDUnknownBlockType)arg1 error:(id *)arg2;
- (id)loadDatabaseMetadata:(id *)arg1;
@property(readonly, copy) NSDictionary *databaseMetadata;
- (void)saveBackgroundContext:(id)arg1 identifier:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (_Bool)saveDatabase:(id *)arg1;
- (void)didSaveDatabaseContext:(id)arg1;
- (void)reportDatabaseContext:(id)arg1 saveError:(id)arg2;
- (_Bool)willSaveDatabaseContext:(id)arg1;
- (id)managedDatabaseObjectIDForURIRepresentation:(id)arg1;
- (void)handleDatabaseContext:(id)arg1 operation:(long long)arg2 error:(id)arg3;
- (long long)contextErrorHandlingOptions;
- (void)reportDatabaseContext:(id)arg1 queryError:(id)arg2;
- (_Bool)updateFetchedDatabaseResults:(id)arg1;
- (id)fetchedDatabaseResults:(id)arg1 delegate:(id)arg2 sectionNameKeyPath:(id)arg3;
- (void)internalMergeChanges:(id)arg1 withKey:(id)arg2 intoContext:(id)arg3;
- (id)executeDatabaseBatchUpdateAndMergeChanges:(id)arg1;
- (id)executeDatabaseBatchDeleteAndMergeChangesForFetchRequest:(id)arg1 error:(id *)arg2;
- (id)executeDatabaseBatchDeleteAndMergeChangesForFetchRequest:(id)arg1;
- (id)executeDatabaseRequest:(id)arg1 context:(id)arg2 error:(id *)arg3;
- (id)executeDatabaseRequest:(id)arg1 context:(id)arg2;
- (id)executeDatabaseRequest:(id)arg1;
- (id)countForDatabaseFetchRequest:(id)arg1 context:(id)arg2 error:(id *)arg3;
- (id)countForDatabaseFetchRequest:(id)arg1 context:(id)arg2;
- (id)countForDatabaseFetchRequest:(id)arg1;
- (id)executeDatabaseFetchRequest:(id)arg1 context:(id)arg2 error:(id *)arg3;
- (id)executeDatabaseFetchRequest:(id)arg1 context:(id)arg2;
- (id)executeDatabaseFetchRequest:(id)arg1;
- (void)performBackgroundContextBlockAndWait:(CDUnknownBlockType)arg1;
- (void)performBackgroundContextBlock:(CDUnknownBlockType)arg1;
- (id)createBackgroundContext;
@property(readonly) NSManagedObjectContext *managedObjectContext;
- (void)deleteDatabase;
- (void)dropDatabase;
- (_Bool)needsDatabaseMigrationForMetadata:(id)arg1;
- (_Bool)needsDatabaseRepairGetMetadata:(out id *)arg1;
- (unsigned long long)sizeOfDatabase;
- (void)reportDatabaseSizeDetails:(id)arg1;
- (long long)internalLoadDatabase;
- (_Bool)loadDatabase;
- (id)databaseLoadOptions;
- (void)willPerformRecoveryOption:(long long)arg1;
- (void)didCreateDatabase;
- (void)willCreateDatabase;
@property(readonly, copy, nonatomic) NSDictionary *databaseOptions;
- (id)initWithStorage:(id)arg1;
- (id)initWithModel:(id)arg1 storeURL:(id)arg2 logIdentifier:(id)arg3 maximumBackgroundContextCount:(unsigned long long)arg4 blacklistBackup:(_Bool)arg5;
- (void)transferBackgroundContextObjects:(id)arg1 backgroundContext:(id)arg2 prefetchedRelationshipKeyPaths:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)performCurrentQueueContextBlockAndWait:(CDUnknownBlockType)arg1;
- (void)loadDatabaseDangerouslyIfNeeded;
- (void)loadDatabaseDangerously;

@end

