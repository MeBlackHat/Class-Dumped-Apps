//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct 25 2017 03:49:04).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Payments/_TtC8Payments16WAPaymentManager.h>

#import <Payments/WAPaymentStorageDelegate-Protocol.h>

@class NSError, WARepeatingBlockTask, WATaskQueue;

@interface _TtC8Payments16WAPaymentManager (Payments) <WAPaymentStorageDelegate>
- (_Bool)canAddNewPaymentMethod;
- (void)syncMethodsFromResponse:(id)arg1;
- (void)addOrUpdateAccount:(id)arg1;
- (id)consumerAccounts;
- (void)saveUpdatedAccount:(id)arg1;
- (_Bool)storageContainsValidAccount:(id)arg1;
- (id)getCardAccounts;
- (id)getAccounts;
- (id)getAccountWithCredentialId:(id)arg1;
- (id)getDefaultReceivingAccount;
- (id)getDefaultPaymentAccount;
- (id)receiverInfoForUserJIDs:(id)arg1;
- (void)saveReceiverInfo:(id)arg1;
- (void)openChatViewControllerForTransaction:(id)arg1;
- (_Bool)openTransactionDetailsForMessageUniqueKey:(id)arg1 transactionId:(id)arg2;
- (void)openTransactionDetailsForTransaction:(id)arg1;
- (void)processIncomingPayNotification:(id)arg1;
- (void)registerXMPPNotificationHandler;
- (void)cancelProcessMissingDetailsTransactions;
- (void)rescheduleExpirePendingCollectRequestsTaskForNewRequest:(id)arg1;
- (void)scheduleExpirePendingCollectRequestsTask;
- (void)cancelProcessPendingTransactions;
- (void)scheduleBackgroundTasksToSyncDatabase;
- (void)scheduleCleanUpBackgroundTasks;
@property(nonatomic, readonly) WATaskQueue *queueForBackgroundTasks;
- (void)cancelSyncTransactionsTask;
- (void)scheduleSyncTransactionsTask;
- (void)cancelSyncPaymentMethodsTask;
- (void)scheduleSyncPaymentMethodsTask;
@property(nonatomic, readonly) WARepeatingBlockTask *syncPaymentMethodsTask;
- (void)cancelOutgoingCollectRequestForTransaction:(id)arg1 fromViewController:(id)arg2;
- (void)declineIncomingCollectRequestForTransaction:(id)arg1 fromViewController:(id)arg2;
- (id)requestIdentifierForOngoingAccountRequest:(id)arg1;
- (_Bool)shouldShowLoadingIndicatorForTransaction:(id)arg1;
- (_Bool)cancelIncomingCollectRequestWithTransaction:(id)arg1;
- (_Bool)declineOutgoingCollectRequestWithTransaction:(id)arg1;
- (void)checkFutureproofPaymentMessage:(id)arg1;
- (void)checkCollectRequestTransactionForIncomingPaymentMessage:(id)arg1;
- (void)addOrUpdatePaymentTransactionForIncomingCollectRequestMessage:(id)arg1;
- (void)reloadMessageBubbleForUpdatedTransactionWithMessageID:(id)arg1;
- (void)reloadMessageBubblesForUpdatedTransactions:(id)arg1;
- (id)coreDataTransactionWith:(id)arg1 messageID:(id)arg2;
- (id)addOutgoingTransactionForConfiguration:(id)arg1 newTransactionData:(id)arg2 messageID:(id)arg3 groupJID:(id)arg4 timestamp:(id)arg5 shouldSaveContext:(_Bool)arg6;
- (void)notifyFetchStateUpdateForMissingDetailsTransaction:(id)arg1;
- (id)updateTransactionFromStanzaForGroupParticipant:(id)arg1;
- (id)addOrUpdateTransactionFromStanza:(id)arg1 messageID:(id)arg2 messageDate:(id)arg3;
- (id)addOrUpdateTransactionWithResponse:(id)arg1 forceUpdate:(_Bool)arg2 messageDate:(id)arg3 suppressLocalNotification:(_Bool)arg4;
- (id)addOrUpdateTransactionWithResponse:(id)arg1 forceUpdate:(_Bool)arg2 suppressLocalNotification:(_Bool)arg3;
- (id)addOrUpdateTransactionWithResponse:(id)arg1 forceUpdate:(_Bool)arg2;
- (void)deleteTransactionWithMessageID:(id)arg1 referenceMessageID:(id)arg2;
- (id)baseTransactionsWithFetchRequest:(id)arg1;
- (id)transactionWithMessageID:(id)arg1;
- (id)transactionWithId:(id)arg1;
- (id)missingDetailsTransactions;
- (id)pendingP2PTransactions;
- (id)pendingCollectRequestTransactions:(long long)arg1;
- (id)transactions:(long long)arg1;
- (_Bool)canReceivePaymentForTransaction:(id)arg1;
- (_Bool)persistBaseTransaction:(id)arg1 inCoreDataTransaction:(id)arg2 save:(_Bool)arg3 error:(id *)arg4;
- (id)baseTransactionsForCoreDataTransactions:(id)arg1;
- (void)setPendingPaymentTransactionsToUnknown;
- (void)failAllPendingCollectRequests;
- (void)checkFutureproofTransactions;
@property(nonatomic, readonly) NSError *dbFailureError;
- (void)didCancelOutgoingCollectRequestTransaction:(id)arg1;
- (void)updateOutgoingCollectRequestStatusForMessageSend:(id)arg1;
- (id)addOutgoingCollectRequestForMessageID:(id)arg1 amount:(id)arg2 receiverJID:(id)arg3 senderJID:(id)arg4 groupJID:(id)arg5 localTransactionId:(id)arg6 messageDate:(id)arg7 expiryDate:(id)arg8 shouldSaveContext:(_Bool)arg9;
- (void)postTransactionUpdatedNotification:(id)arg1;
- (void)postTransactionAddOrUpdateNotificationForTransaction:(id)arg1 isNewTransaction:(_Bool)arg2;
- (void)deleteKVSValueForKey:(id)arg1;
- (void)updateKVSValue:(id)arg1 forKey:(id)arg2;
- (id)fetchKVSValueForKey:(id)arg1;
- (void)deleteCacheForTransaction:(id)arg1;
- (id)transactionCache:(id)arg1;
- (void)paymentStorage:(id)arg1 didAddOrUpdatePayoutsAssocaitedAccountWithId:(id)arg2;
- (void)paymentStorage:(id)arg1 didAddOrUpdateAccount:(id)arg2;
- (void)paymentStorageRequestFreshServerAccounts:(id)arg1;
- (void)paymentStorageDidCreateDatabase:(id)arg1;
- (void)performPaymentStorageCheckpointWithDispatchGroup:(id)arg1 timeout:(double)arg2 force:(_Bool)arg3;
- (void)didChangeAccountSetUpState;
- (void)performUpdatesForPotentialDatabaseRebuild;
- (_Bool)canSendAgainTransaction:(id)arg1;
- (void)fullyResetStateAndResetTOS:(_Bool)arg1 resetWAPIN:(_Bool)arg2;
- (_Bool)updateTransaction:(id)arg1 toStatusWithBlock:(CDUnknownBlockType)arg2 save:(_Bool)arg3;
- (void)cancelBackgroundTasksToSyncDatabase;
- (id)createPaymentFieldStatsManager;
- (id)createRequesterWithPersistentRequestManager:(id)arg1;
- (void)syncFinishedWithResults:(id)arg1;
- (void)updateErrorForTransaction:(id)arg1 errorCode:(long long)arg2 messagePaymentType:(unsigned long long)arg3;
@end

