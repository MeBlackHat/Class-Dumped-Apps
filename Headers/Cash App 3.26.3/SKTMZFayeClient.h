//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct 25 2017 03:49:04).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import <Smooch/SKTSRWebSocketDelegate-Protocol.h>

@class NSDictionary, NSMutableDictionary, NSMutableSet, NSSet, NSString, NSTimer, NSURL, SKTSRWebSocket;
@protocol SKTMZFayeClientDelegate;

@interface SKTMZFayeClient : NSObject <SKTSRWebSocketDelegate>
{
    _Bool _connected;
    _Bool _shouldRetryConnection;
    SKTSRWebSocket *_webSocket;
    NSURL *_url;
    NSString *_clientId;
    long long _sentMessageCount;
    double _retryInterval;
    long long _retryAttempt;
    long long _maximumRetryAttempts;
    id <SKTMZFayeClientDelegate> _delegate;
    NSMutableSet *_openChannelSubscriptions;
    NSMutableSet *_pendingChannelSubscriptions;
    NSDictionary *_connectHandlers;
    NSDictionary *_disconnectHandlers;
    NSMutableDictionary *_channelSubscribeHandlers;
    NSMutableDictionary *_channelUnsubscribeHandlers;
    NSMutableDictionary *_channelReceivedMessageHandlers;
    NSMutableDictionary *_sendMessageHandlers;
    NSMutableDictionary *_channelExtensions;
    NSTimer *_reconnectTimer;
}

+ (id)clientWithURL:(id)arg1;
@property(retain, nonatomic) NSTimer *reconnectTimer; // @synthesize reconnectTimer=_reconnectTimer;
@property(retain, nonatomic) NSMutableDictionary *channelExtensions; // @synthesize channelExtensions=_channelExtensions;
@property(retain, nonatomic) NSMutableDictionary *sendMessageHandlers; // @synthesize sendMessageHandlers=_sendMessageHandlers;
@property(retain, nonatomic) NSMutableDictionary *channelReceivedMessageHandlers; // @synthesize channelReceivedMessageHandlers=_channelReceivedMessageHandlers;
@property(retain, nonatomic) NSMutableDictionary *channelUnsubscribeHandlers; // @synthesize channelUnsubscribeHandlers=_channelUnsubscribeHandlers;
@property(retain, nonatomic) NSMutableDictionary *channelSubscribeHandlers; // @synthesize channelSubscribeHandlers=_channelSubscribeHandlers;
@property(retain, nonatomic) NSDictionary *disconnectHandlers; // @synthesize disconnectHandlers=_disconnectHandlers;
@property(retain, nonatomic) NSDictionary *connectHandlers; // @synthesize connectHandlers=_connectHandlers;
@property(retain, nonatomic) NSMutableSet *pendingChannelSubscriptions; // @synthesize pendingChannelSubscriptions=_pendingChannelSubscriptions;
@property(retain, nonatomic) NSMutableSet *openChannelSubscriptions; // @synthesize openChannelSubscriptions=_openChannelSubscriptions;
@property(nonatomic) __weak id <SKTMZFayeClientDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) long long maximumRetryAttempts; // @synthesize maximumRetryAttempts=_maximumRetryAttempts;
@property(nonatomic) long long retryAttempt; // @synthesize retryAttempt=_retryAttempt;
@property(nonatomic) double retryInterval; // @synthesize retryInterval=_retryInterval;
@property(nonatomic) _Bool shouldRetryConnection; // @synthesize shouldRetryConnection=_shouldRetryConnection;
@property(nonatomic, getter=isConnected) _Bool connected; // @synthesize connected=_connected;
@property(nonatomic) long long sentMessageCount; // @synthesize sentMessageCount=_sentMessageCount;
@property(retain, nonatomic) NSString *clientId; // @synthesize clientId=_clientId;
@property(readonly, nonatomic) NSURL *url; // @synthesize url=_url;
@property(retain, nonatomic) SKTSRWebSocket *webSocket; // @synthesize webSocket=_webSocket;
- (void).cxx_destruct;
- (void)webSocket:(id)arg1 didCloseWithCode:(long long)arg2 reason:(id)arg3 wasClean:(_Bool)arg4;
- (void)webSocket:(id)arg1 didFailWithError:(id)arg2;
- (void)webSocketDidOpen:(id)arg1;
- (void)webSocket:(id)arg1 didReceiveMessage:(id)arg2;
- (void)handleChannelReceivedMessage:(id)arg1;
- (void)handleMessageResponse:(id)arg1;
- (void)handleChannelUnsubscribe:(id)arg1;
- (void)handleChannelSubscribe:(id)arg1;
- (void)handleChannelDisconnect:(id)arg1;
- (void)handleChannelConnect:(id)arg1;
- (void)handleChannelHandshake:(id)arg1;
- (void)handleFayeMessages:(id)arg1;
- (void)didFailWithMessage:(id)arg1;
- (void)disconnectFromWebSocket;
- (void)connectToWebSocket;
- (void)writeMessageToWebSocket:(id)arg1;
- (void)reconnect;
- (void)invalidateReconnectTimer;
- (void)reconnectTimer:(id)arg1;
- (void)subscribePendingSubscriptions;
- (void)unsubscribeFromChannel:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (void)unsubscribeFromChannel:(id)arg1;
- (void)subscribeToChannel:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3 receivedMessage:(CDUnknownBlockType)arg4;
- (void)subscribeToChannel:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)subscribeToChannel:(id)arg1;
- (void)disconnect:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (void)disconnect;
- (void)connect:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (void)forceReconnect;
- (_Bool)connect;
- (_Bool)connectToURL:(id)arg1;
- (void)sendMessage:(id)arg1 toChannel:(id)arg2 usingExtension:(id)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (void)sendMessage:(id)arg1 toChannel:(id)arg2 usingExtension:(id)arg3;
- (void)sendMessage:(id)arg1 toChannel:(id)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (void)sendMessage:(id)arg1 toChannel:(id)arg2;
- (void)removeExtensionForChannel:(id)arg1;
- (void)setExtension:(id)arg1 forChannel:(id)arg2;
- (id)generateUniqueMessageId;
- (void)clearSubscriptions;
- (void)sendBayeuxPublishMessage:(id)arg1 toChannel:(id)arg2 usingExtension:(id)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (void)sendBayeuxUnsubscribeMessageWithChannel:(id)arg1;
- (void)sendBayeuxSubscribeMessageWithChannel:(id)arg1;
- (void)sendBayeuxDisconnectMessage;
- (void)sendBayeuxConnectMessage;
- (void)sendBayeuxHandshakeMessage;
- (id)initWithURL:(id)arg1;
- (id)init;
- (void)dealloc;
@property(readonly, nonatomic, getter=isWebSocketClosed) _Bool webSocketClosed;
@property(readonly, nonatomic, getter=isWebSocketOpen) _Bool webSocketOpen;
@property(readonly, nonatomic) NSDictionary *extensions;
@property(readonly, nonatomic) NSSet *openSubscriptions;
@property(readonly, nonatomic) NSSet *pendingSubscriptions;
@property(readonly, nonatomic) NSSet *subscriptions;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

