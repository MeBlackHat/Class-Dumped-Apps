//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct 25 2017 03:49:04).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@interface NGCKeyProvider : NSObject
{
}

+ (void)initialize;
- (_Bool)supportsSecureEnclave;
- (unsigned long long)getAccessControlFlagsForKeyAccessControl:(long long)arg1 requiresSecureEnclave:(_Bool)arg2;
- (_Bool)generateKeyPairWithKeyAccessPolicy:(long long)arg1 keyAccessControl:(long long)arg2 keyUsageType:(long long)arg3 keyEncryptionType:(long long)arg4 keyId:(out id *)arg5 error:(out id *)arg6;
- (_Bool)getAccessControlRefForKeyAccessPolicy:(long long)arg1 accessControlFlags:(unsigned long long)arg2 accessControlRef:(out struct __SecAccessControl **)arg3 error:(out id *)arg4;
- (_Bool)getNGCKeyProviderKeyEncryptionTypeForkeyChainAttribute:(id)arg1 keyEncryptionType:(out long long *)arg2 error:(out id *)arg3;
- (id)getDictionaryForKeychainQuery:(id)arg1 keyType:(long long)arg2;
- (_Bool)getKeyRef:(id)arg1 keyType:(long long)arg2 keyRef:(out id *)arg3 error:(out id *)arg4;
- (_Bool)getSymmetricCryptoProviderForEncryptionType:(long long)arg1 cryptoProvider:(out id *)arg2 error:(out id *)arg3;
- (_Bool)getAsymmetricCryptoProviderForEncryptionType:(long long)arg1 cryptoProvider:(out id *)arg2 error:(out id *)arg3;
- (_Bool)generateSharedSecretUsingPrivateKeyId:(id)arg1 publicKey:(id)arg2 sharedSecretSizeBytes:(unsigned int)arg3 sharedData:(id)arg4 sharedSecret:(out id *)arg5 error:(out id *)arg6;
- (_Bool)decryptDataUsingSymmetricKeyForKeyId:(id)arg1 dataToDecrypt:(id)arg2 initializationVector:(id)arg3 decryptedData:(out id *)arg4 error:(out id *)arg5;
- (_Bool)encryptDataUsingSymmetricKeyForKeyId:(id)arg1 dataToEncrypt:(id)arg2 initializationVector:(id)arg3 encryptedData:(out id *)arg4 error:(out id *)arg5;
- (_Bool)importKeyAndSetKeyAccessPolicy:(long long)arg1 keyUsageType:(long long)arg2 keyType:(long long)arg3 keyEncryptionType:(long long)arg4 key:(id)arg5 keyId:(out id *)arg6 error:(out id *)arg7;
- (_Bool)updateKeyAccessPolicyForKeyId:(id)arg1 keyType:(long long)arg2 keyAccessPolicy:(long long)arg3 error:(out id *)arg4;
- (_Bool)removeKeyForKeyId:(id)arg1 error:(out id *)arg2;
- (_Bool)exportCertificateSigningRequestForKeyRef:(id)arg1 certificateSigningRequest:(out id *)arg2 error:(out id *)arg3;
- (_Bool)exportCertificateSigningRequestForKeyId:(id)arg1 certificateSigningRequest:(out id *)arg2 error:(out id *)arg3;
- (_Bool)verifySignatureUsingKeyRef:(id)arg1 dataToSign:(id)arg2 signature:(id)arg3 error:(out id *)arg4;
- (_Bool)verifySignatureUsingKeyId:(id)arg1 dataToSign:(id)arg2 signature:(id)arg3 error:(out id *)arg4;
- (_Bool)signHashUsingKeyRef:(id)arg1 dataToSign:(id)arg2 signature:(out id *)arg3 error:(out id *)arg4;
- (_Bool)signHashUsingKeyId:(id)arg1 dataToSign:(id)arg2 signature:(out id *)arg3 error:(out id *)arg4;
- (_Bool)decryptDataUsingAsymmetricKeyForKeyRef:(id)arg1 dataToDecrypt:(id)arg2 decryptedData:(out id *)arg3 error:(out id *)arg4;
- (_Bool)decryptDataUsingAsymmetricKeyForKeyId:(id)arg1 dataToDecrypt:(id)arg2 decryptedData:(out id *)arg3 error:(out id *)arg4;
- (_Bool)encryptDataUsingAsymmetricKeyForKeyRef:(id)arg1 dataToEncrypt:(id)arg2 encryptedData:(out id *)arg3 error:(out id *)arg4;
- (_Bool)encryptDataUsingAsymmetricKeyForKeyId:(id)arg1 dataToEncrypt:(id)arg2 encryptedData:(out id *)arg3 error:(out id *)arg4;
- (_Bool)generateECKeyPairWithKeyAccessPolicy:(long long)arg1 keyAccessControl:(long long)arg2 keyUsageType:(long long)arg3 keyId:(out id *)arg4 error:(out id *)arg5;
- (_Bool)generateRSAKeyPairWithKeyAccessPolicy:(long long)arg1 keyAccessControl:(long long)arg2 keyUsageType:(long long)arg3 keyId:(out id *)arg4 error:(out id *)arg5;

@end

