//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct 25 2017 03:49:04).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class MSALExternalAccountHandler, MSALOauth2Provider, MSALPublicClientApplicationConfig, MSIDAccountMetadataCacheAccessor, MSIDAssymetricKeyLookupAttributes, MSIDCacheConfig, MSIDDefaultTokenCacheAccessor, MSIDDevicePopManager, MSIDExternalAADCacheSeeder, NSString, WKWebView;

@interface MSALPublicClientApplication : NSObject
{
    WKWebView *_customWebview;
    NSString *_defaultKeychainGroup;
    _Bool _validateAuthority;
    MSALPublicClientApplicationConfig *_configuration;
    MSALPublicClientApplicationConfig *_internalConfig;
    MSIDExternalAADCacheSeeder *_externalCacheSeeder;
    MSIDCacheConfig *_msidCacheConfig;
    MSIDDevicePopManager *_popManager;
    MSIDAssymetricKeyLookupAttributes *_keyPairAttributes;
    MSIDDefaultTokenCacheAccessor *_tokenCache;
    MSIDAccountMetadataCacheAccessor *_accountMetadataCache;
    MSALOauth2Provider *_msalOauth2Provider;
    MSALExternalAccountHandler *_externalAccountHandler;
}

+ (id)sdkVersion;
+ (id)defaultOIDCScopes;
+ (void)logOperation:(id)arg1 result:(id)arg2 error:(id)arg3 context:(id)arg4;
+ (_Bool)cancelCurrentWebAuthSession;
+ (_Bool)handleMSALResponse:(id)arg1 sourceApplication:(id)arg2;
+ (_Bool)handleMSALResponse:(id)arg1;
+ (void)load;
- (void).cxx_destruct;
@property(retain, nonatomic) MSALExternalAccountHandler *externalAccountHandler; // @synthesize externalAccountHandler=_externalAccountHandler;
@property(retain, nonatomic) MSALOauth2Provider *msalOauth2Provider; // @synthesize msalOauth2Provider=_msalOauth2Provider;
@property(retain, nonatomic) MSIDAccountMetadataCacheAccessor *accountMetadataCache; // @synthesize accountMetadataCache=_accountMetadataCache;
@property(retain, nonatomic) MSIDDefaultTokenCacheAccessor *tokenCache; // @synthesize tokenCache=_tokenCache;
@property(retain, nonatomic) MSIDAssymetricKeyLookupAttributes *keyPairAttributes; // @synthesize keyPairAttributes=_keyPairAttributes;
@property(retain, nonatomic) MSIDDevicePopManager *popManager; // @synthesize popManager=_popManager;
@property(retain, nonatomic) MSIDCacheConfig *msidCacheConfig; // @synthesize msidCacheConfig=_msidCacheConfig;
@property(retain, nonatomic) MSIDExternalAADCacheSeeder *externalCacheSeeder; // @synthesize externalCacheSeeder=_externalCacheSeeder;
@property(retain, nonatomic) MSALPublicClientApplicationConfig *internalConfig; // @synthesize internalConfig=_internalConfig;
@property(retain) WKWebView *customWebview; // @synthesize customWebview=_customWebview;
@property _Bool validateAuthority; // @synthesize validateAuthority=_validateAuthority;
@property(readonly) MSALPublicClientApplicationConfig *configuration; // @synthesize configuration=_configuration;
- (id)defaultRequestParametersWithError:(id *)arg1;
- (id)interactiveRequestAuthorityWithCustomAuthority:(id)arg1 error:(id *)arg2;
- (long long)requestType;
- (_Bool)shouldExcludeValidationForAuthority:(id)arg1;
- (_Bool)shouldValidateAuthorityForRequestAuthority:(id)arg1;
@property(readonly) _Bool isCompatibleAADBrokerAvailable;
- (void)getDeviceInformationWithParameters:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)signoutWithAccount:(id)arg1 signoutParameters:(id)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (_Bool)removeAccountImpl:(id)arg1 wipeAccount:(_Bool)arg2 error:(id *)arg3;
- (_Bool)removeAccount:(id)arg1 error:(id *)arg2;
- (void)acquireTokenWithParameters:(id)arg1 useWebviewTypeFromGlobalConfig:(_Bool)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (void)updateExternalAccountsWithResult:(id)arg1 context:(id)arg2;
- (id)initPrivateWithClientId:(id)arg1 keychainGroup:(id)arg2 authority:(id)arg3 redirectUri:(id)arg4 error:(id *)arg5;
- (void)acquireTokenSilentForScopes:(id)arg1 account:(id)arg2 authority:(id)arg3 claimsRequest:(id)arg4 forceRefresh:(_Bool)arg5 correlationId:(id)arg6 completionBlock:(CDUnknownBlockType)arg7;
- (void)acquireTokenSilentForScopes:(id)arg1 account:(id)arg2 authority:(id)arg3 completionBlock:(CDUnknownBlockType)arg4;
- (void)acquireTokenSilentForScopes:(id)arg1 account:(id)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (long long)accountStateForParameters:(id)arg1 error:(id *)arg2;
- (void)acquireTokenSilentWithParameters:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)acquireTokenForScopes:(id)arg1 account:(id)arg2 promptType:(unsigned long long)arg3 extraQueryParameters:(id)arg4 completionBlock:(CDUnknownBlockType)arg5;
- (void)acquireTokenForScopes:(id)arg1 account:(id)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (void)acquireTokenForScopes:(id)arg1 loginHint:(id)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (void)acquireTokenForScopes:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)acquireTokenWithParameters:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)getCurrentAccountWithParameters:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)accountsFromDeviceForParameters:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)allAccountsFilteredByAuthority:(CDUnknownBlockType)arg1;
- (id)accountForUsername:(id)arg1 error:(id *)arg2;
- (id)accountsForParameters:(id)arg1 error:(id *)arg2;
- (id)accountForIdentifier:(id)arg1 error:(id *)arg2;
- (id)accountForHomeAccountId:(id)arg1 error:(id *)arg2;
- (id)allAccounts:(id *)arg1;
- (_Bool)setupTokenCacheWithConfiguration:(id)arg1 error:(id *)arg2;
- (id)initWithClientId:(id)arg1 keychainGroup:(id)arg2 authority:(id)arg3 redirectUri:(id)arg4 error:(id *)arg5;
- (id)initWithConfiguration:(id)arg1 error:(id *)arg2;
- (id)initWithClientId:(id)arg1 authority:(id)arg2 redirectUri:(id)arg3 error:(id *)arg4;
- (id)initWithClientId:(id)arg1 authority:(id)arg2 error:(id *)arg3;
- (id)initWithClientId:(id)arg1 error:(id *)arg2;
@property long long webviewType;

@end

