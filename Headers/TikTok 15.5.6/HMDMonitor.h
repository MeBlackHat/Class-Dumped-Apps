//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "HeimdallrModule.h"

#import "HMDMonitorStorageDelegate-Protocol.h"

@class HMDMonitorCurve, HMDPerformanceReportRequest, NSLock, NSMutableArray, NSObject, NSString;
@protocol OS_dispatch_source;

@interface HMDMonitor : HeimdallrModule <HMDMonitorStorageDelegate>
{
    NSObject<OS_dispatch_source> *_timer;
    HMDMonitorCurve *_curve;
    NSMutableArray *_monitorCallbacks;
    NSLock *_monitorLock;
    HMDPerformanceReportRequest *_reportingRequest;
    NSString *_name;
    double _refreshInterval;
    double _curPageUsage;
}

+ (id)sharedMonitor;
@property(nonatomic) double curPageUsage; // @synthesize curPageUsage=_curPageUsage;
@property(nonatomic) double refreshInterval; // @synthesize refreshInterval=_refreshInterval;
@property(readonly, nonatomic) NSString *name; // @synthesize name=_name;
@property(readonly, nonatomic) HMDMonitorCurve *curve; // @synthesize curve=_curve;
@property(retain, nonatomic) HMDPerformanceReportRequest *reportingRequest; // @synthesize reportingRequest=_reportingRequest;
- (void).cxx_destruct;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)prepareForDefaultStart;
- (_Bool)performanceDataSource;
- (_Bool)needSyncStart;
- (void)updateConfig:(id)arg1;
- (void)cleanupWithConfig:(id)arg1;
- (Class)storeClass;
- (void)stop;
- (void)start;
- (void)setupWithHeimdallr:(id)arg1;
- (void)performanceDataSaveImmediately;
- (void)recordSizeCalculationWithRecord:(id)arg1;
- (_Bool)monitorCurve:(id)arg1 willSaveRecords:(id)arg2;
- (void)willLeaveScene:(id)arg1;
- (void)didEnterScene:(id)arg1;
- (void)removeMonitorCallbacks:(CDUnknownBlockType)arg1;
- (void)addMonitorCallbacks:(CDUnknownBlockType)arg1;
- (long long)dbMaxSize;
- (void)startWithInterval:(double)arg1;
- (void)setTimerRefresh:(double)arg1;
- (id)refresh;
- (void)removeKVO;
- (void)registerKVO;
- (id)init;
- (void)cleanupUnusedPerformanfeData;
- (void)cleanupNotUploadAndReportedPerformanceData;
- (void)cleanupPerformanceDataWithConfig:(id)arg1;
- (void)performanceDataDidReportSuccess:(_Bool)arg1;
- (id)debugRealPerformanceDataWithConfig:(id)arg1;
- (id)fetchRecordsWithStartTime:(double)arg1 endTime:(double)arg2 limitCount:(long long)arg3;
- (id)performanceDataWithLimitSizeFromTime:(double)arg1 endTime:(double)arg2 limitCount:(long long)arg3;
- (id)performanceDataWithCountLimit:(long long)arg1;
- (id)getDataWithRecords:(id)arg1;

@end

