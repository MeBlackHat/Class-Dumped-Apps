//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "BDWebImageDownloaderDelegate-Protocol.h"

@class BDImageCache, BDWebImageDecoder, BDWebImageURLFilter, NSDictionary, NSMutableDictionary;
@protocol BDWebImageDownloader;

@interface BDWebImageManager : NSObject <BDWebImageDownloaderDelegate>
{
    BDImageCache *_imageCache;
    NSMutableDictionary *_caches;
    NSMutableDictionary *_requests;
    struct _opaque_pthread_mutex_t _request_lock;
    struct _opaque_pthread_mutex_t _cache_lock;
    struct _opaque_pthread_mutex_t _manager_lock;
    NSMutableDictionary *_downloadContainer;
    unsigned long long _defaultDownloadImpl;
    _Bool _insulatedCache;
    _Bool _isDecoderForDisplay;
    _Bool _enableLog;
    _Bool _enableMultiThreadHeicDecoder;
    _Bool _enableCacheToMemory;
    _Bool _isSystemHeicDecoderFirst;
    _Bool _checkMimeType;
    _Bool _checkDataLength;
    _Bool _isCocurrentCallback;
    BDWebImageDecoder *_decoder;
    BDWebImageURLFilter *_urlFilter;
    id <BDWebImageDownloader> _downloadManager;
    NSDictionary *_downloadManagerDefaultHeaders;
    double _timeoutInterval;
    double _timeoutIntervalForResource;
    CDUnknownBlockType _bizTagURLFilterBlock;
}

+ (id)sharedManager;
@property(copy, nonatomic) CDUnknownBlockType bizTagURLFilterBlock; // @synthesize bizTagURLFilterBlock=_bizTagURLFilterBlock;
@property(nonatomic) _Bool isCocurrentCallback; // @synthesize isCocurrentCallback=_isCocurrentCallback;
@property(nonatomic) _Bool checkDataLength; // @synthesize checkDataLength=_checkDataLength;
@property(nonatomic) _Bool checkMimeType; // @synthesize checkMimeType=_checkMimeType;
@property(nonatomic) _Bool isSystemHeicDecoderFirst; // @synthesize isSystemHeicDecoderFirst=_isSystemHeicDecoderFirst;
@property(nonatomic) _Bool enableCacheToMemory; // @synthesize enableCacheToMemory=_enableCacheToMemory;
@property(nonatomic) _Bool enableMultiThreadHeicDecoder; // @synthesize enableMultiThreadHeicDecoder=_enableMultiThreadHeicDecoder;
@property(nonatomic) _Bool enableLog; // @synthesize enableLog=_enableLog;
@property(nonatomic) _Bool isDecoderForDisplay; // @synthesize isDecoderForDisplay=_isDecoderForDisplay;
@property(nonatomic) _Bool insulatedCache; // @synthesize insulatedCache=_insulatedCache;
@property(nonatomic) double timeoutIntervalForResource; // @synthesize timeoutIntervalForResource=_timeoutIntervalForResource;
@property(nonatomic) double timeoutInterval; // @synthesize timeoutInterval=_timeoutInterval;
@property(copy, nonatomic) NSDictionary *downloadManagerDefaultHeaders; // @synthesize downloadManagerDefaultHeaders=_downloadManagerDefaultHeaders;
@property(retain, nonatomic) id <BDWebImageDownloader> downloadManager; // @synthesize downloadManager=_downloadManager;
@property(retain, nonatomic) BDWebImageURLFilter *urlFilter; // @synthesize urlFilter=_urlFilter;
@property(retain, nonatomic) BDWebImageDecoder *decoder; // @synthesize decoder=_decoder;
@property(readonly, retain, nonatomic) BDImageCache *imageCache; // @synthesize imageCache=_imageCache;
- (void).cxx_destruct;
- (void)_recordPerformanceValuesForRequests:(id)arg1 withTask:(id)arg2;
- (void)_recordPerformanceValue:(id)arg1 forKey:(id)arg2 forTask:(id)arg3 forRequests:(id)arg4;
- (void)_callbackWithImage:(id)arg1 data:(id)arg2 savePath:(id)arg3 url:(id)arg4 forKey:(id)arg5;
- (void)downloader:(id)arg1 task:(id)arg2 didReceiveData:(id)arg3 incrementData:(id)arg4;
- (void)downloader:(id)arg1 task:(id)arg2 receivedSize:(long long)arg3 expectedSize:(long long)arg4;
- (void)downloader:(id)arg1 task:(id)arg2 finishedWithData:(id)arg3 savePath:(id)arg4;
- (void)trasformImageWithCache:(id)arg1 cacheKey:(id)arg2 cacheType:(unsigned long long)arg3 currentRequest:(id)arg4 data:(id)arg5 decodeError:(id *)arg6 downloader:(id)arg7 image:(id)arg8 needImage:(_Bool)arg9 realData:(id *)arg10 realImage:(id *)arg11 task:(id)arg12;
- (void)downloader:(id)arg1 task:(id)arg2 failedWithError:(id)arg3;
- (void)downloadImageWithRequest:(id)arg1;
- (void)queryCacheForRequest:(id)arg1 callback:(CDUnknownBlockType)arg2;
- (id)_queryCachePath:(id)arg1;
- (id)_imageFromDiskQuery:(id)arg1;
- (id)_imageFromMemoryQuery:(id)arg1;
- (void)cacheContainsImageForRequest:(id)arg1 cacheNoneBlock:(CDUnknownBlockType)arg2;
- (void)requestImage:(id)arg1;
- (void)_cancelRequest:(id)arg1;
- (id)requestImage:(id)arg1 alternativeURLs:(id)arg2 options:(long long)arg3 timeoutInterval:(double)arg4 cacheName:(id)arg5 transformer:(id)arg6 decryptBlock:(CDUnknownBlockType)arg7 progress:(CDUnknownBlockType)arg8 complete:(CDUnknownBlockType)arg9;
- (id)requestImage:(id)arg1 alternativeURLs:(id)arg2 options:(long long)arg3 timeoutInterval:(double)arg4 cacheName:(id)arg5 transformer:(id)arg6 progress:(CDUnknownBlockType)arg7 complete:(CDUnknownBlockType)arg8;
- (id)requestImage:(id)arg1 alternativeURLs:(id)arg2 options:(long long)arg3 cacheName:(id)arg4 transformer:(id)arg5 progress:(CDUnknownBlockType)arg6 complete:(CDUnknownBlockType)arg7;
- (id)requestImage:(id)arg1 alternativeURLs:(id)arg2 options:(long long)arg3 cacheName:(id)arg4 progress:(CDUnknownBlockType)arg5 complete:(CDUnknownBlockType)arg6;
- (id)requestImage:(id)arg1 progress:(CDUnknownBlockType)arg2 complete:(CDUnknownBlockType)arg3;
- (id)requestImage:(id)arg1 options:(long long)arg2 complete:(CDUnknownBlockType)arg3;
- (void)cancelAll;
- (void)cancelAllPrefetchs;
- (id)allPrefetchs;
- (id)prefetchImageWithURL:(id)arg1 cacheName:(id)arg2 category:(id)arg3 options:(long long)arg4;
- (id)prefetchImageWithURL:(id)arg1 category:(id)arg2 options:(long long)arg3;
- (id)prefetchImagesWithURLs:(id)arg1 cacheName:(id)arg2 category:(id)arg3 options:(long long)arg4;
- (id)prefetchImagesWithURLs:(id)arg1 category:(id)arg2 options:(long long)arg3;
- (id)requestsWithCategory:(id)arg1;
- (id)requestsWithURL:(id)arg1;
- (id)requestKeyWithURL:(id)arg1;
- (id)init;
- (void)dealloc;
- (void)setDownloaderWithClassName:(id)arg1;
@property(nonatomic) unsigned long long downloadImpl;
- (id)downloadManagerFromOption:(long long)arg1;
- (void)enumCacheForRequest:(id)arg1 block:(CDUnknownBlockType)arg2;
- (id)cacheForKey:(id)arg1;
- (void)registCache:(id)arg1 forKey:(id)arg2;
- (id)initWithCategory:(id)arg1;

@end

