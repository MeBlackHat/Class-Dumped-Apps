//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class HTSGLContext, IESMMSampleBufferInfo, NSLock, NSString;

@interface HTSGLFramebuffer : NSObject
{
    struct TECoreFrameBuffer *_framebuffer;
    _Bool _isFromExtra;
    _Bool _useOutPixelBuffer;
    unsigned int _framebufferId;
    struct __CVBuffer *_renderTarget;
    struct __CVBuffer *_renderTexture;
    _Bool _onlyTexture;
    _Bool _disableCache;
    unsigned int _textureId;
    NSString *_lookupHash;
    HTSGLContext *_context;
    long long _sourceID;
    NSString *_filterID;
    long long _videoTrackId;
    IESMMSampleBufferInfo *_sampleInfo;
    unsigned long long _framebufferReferenceCount;
    unsigned long long _readLockCount;
    NSLock *_refLock;
    struct CGSize _size;
}

@property(retain, nonatomic) NSLock *refLock; // @synthesize refLock=_refLock;
@property unsigned long long readLockCount; // @synthesize readLockCount=_readLockCount;
@property unsigned long long framebufferReferenceCount; // @synthesize framebufferReferenceCount=_framebufferReferenceCount;
@property(retain, nonatomic) IESMMSampleBufferInfo *sampleInfo; // @synthesize sampleInfo=_sampleInfo;
@property(nonatomic) long long videoTrackId; // @synthesize videoTrackId=_videoTrackId;
@property(retain, nonatomic) NSString *filterID; // @synthesize filterID=_filterID;
@property(nonatomic) long long sourceID; // @synthesize sourceID=_sourceID;
@property(readonly, nonatomic) _Bool disableCache; // @synthesize disableCache=_disableCache;
@property(readonly, nonatomic) HTSGLContext *context; // @synthesize context=_context;
@property(retain, nonatomic) NSString *lookupHash; // @synthesize lookupHash=_lookupHash;
@property(readonly, nonatomic) _Bool onlyTexture; // @synthesize onlyTexture=_onlyTexture;
@property(readonly, nonatomic) struct CGSize size; // @synthesize size=_size;
- (void).cxx_destruct;
- (unsigned int)getFrameBufferId;
@property(readonly, nonatomic) unsigned int textureId; // @synthesize textureId=_textureId;
- (struct __CVBuffer *)pixelBuffer;
- (char *)byteBuffer;
- (unsigned long long)bytesPerRow;
- (void)unlockAfterReading;
- (void)lockForReading;
- (void)restoreRenderTarget;
- (struct CGImage *)newCGImageFromFramebufferContents;
- (void)clearAllLocks;
- (void)unlock;
- (void)lock;
- (void)deActivateFramebuffer;
- (void)activateFramebuffer:(int)arg1 offsetY:(int)arg2 width:(int)arg3 height:(int)arg4;
- (void)activateFramebuffer;
- (void)generateFramebufferWithPixelBuffer:(struct __CVBuffer *)arg1;
- (void)generateFramebuffer;
- (void)generateTexture;
- (void)destroyFramebuffer;
- (void)dealloc;
- (id)initWithCppFrameBuffer:(void *)arg1 context:(id)arg2;
- (id)initWithPixelBuffer:(struct __CVBuffer *)arg1 context:(id)arg2;
- (id)initWithSize:(struct CGSize)arg1 onlyTexture:(_Bool)arg2 disableCache:(_Bool)arg3 context:(id)arg4;
- (id)initWithSize:(struct CGSize)arg1 onlyTexture:(_Bool)arg2 disableCache:(_Bool)arg3;
- (id)initWithSize:(struct CGSize)arg1 disableCache:(_Bool)arg2;
- (id)initWithSize:(struct CGSize)arg1 onlyTexture:(_Bool)arg2;
- (id)initWithSize:(struct CGSize)arg1;
- (long long)getFramebufferReferenceCount;

@end

