//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "HTSFilterInterface.h"

#import "HTSGLInput-Protocol.h"

@class HTSGLContext, HTSGLFramebuffer, IESGLesBaseRenderer, NSMutableDictionary, NSObject, NSString;
@protocol OS_dispatch_semaphore;

@interface HTSGLFilter : HTSFilterInterface <HTSGLInput>
{
    HTSGLFramebuffer *_firstInputFramebuffer;
    float _backgroundColorRed;
    float _backgroundColorGreen;
    float _backgroundColorBlue;
    float _backgroundColorAlpha;
    _Bool _isEndProcessing;
    struct CGSize _currentFilterSize;
    unsigned long long _inputRotation;
    _Bool _currentlyReceivingMonochromeInput;
    NSMutableDictionary *_uniformStateRestorationBlocks;
    NSObject<OS_dispatch_semaphore> *_imageCaptureSemaphore;
    IESGLesBaseRenderer *_glRenderer;
    _Bool _preventRendering;
    _Bool _breakNextRendering;
    struct __CVBuffer *_renderTarget;
    CDUnknownBlockType _exceptionBlock;
    struct CGSize _outputFrameSize;
}

+ (const float *)textureCoordinatesForRotation:(unsigned long long)arg1;
@property(copy, nonatomic) CDUnknownBlockType exceptionBlock; // @synthesize exceptionBlock=_exceptionBlock;
@property(nonatomic) struct CGSize outputFrameSize; // @synthesize outputFrameSize=_outputFrameSize;
@property(nonatomic) _Bool breakNextRendering; // @synthesize breakNextRendering=_breakNextRendering;
@property struct __CVBuffer *renderTarget; // @synthesize renderTarget=_renderTarget;
@property(nonatomic) _Bool currentlyReceivingMonochromeInput; // @synthesize currentlyReceivingMonochromeInput=_currentlyReceivingMonochromeInput;
@property(nonatomic) _Bool preventRendering; // @synthesize preventRendering=_preventRendering;
- (void).cxx_destruct;
- (_Bool)wantsMonochromeInput;
- (void)endProcessing;
- (struct CGSize)maximumOutputSize;
- (void)forceProcessingAtSizeRespectingAspectRatio:(struct CGSize)arg1;
- (void)forceProcessingAtSize:(struct CGSize)arg1;
- (void)setInputRotation:(unsigned long long)arg1 atIndex:(long long)arg2;
- (void)setInputSize:(struct CGSize)arg1 atIndex:(long long)arg2;
- (struct CGSize)rotatedSize:(struct CGSize)arg1 forIndex:(long long)arg2;
- (void)setInputFramebuffer:(id)arg1 atIndex:(long long)arg2;
- (long long)nextAvailableTextureIndex;
- (void)newFrameReadyAtTime:(CDStruct_1b6d18a9)arg1 atIndex:(long long)arg2 exceptionBlock:(CDUnknownBlockType)arg3;
- (void)newFrameReadyAtTime:(CDStruct_1b6d18a9)arg1 atIndex:(long long)arg2;
- (void)resetRenderEnv;
- (void)setIntegerArray:(int *)arg1 length:(int)arg2 uniformName:(id)arg3;
- (void)setPointArray:(struct CGPoint *)arg1 length:(int)arg2 uniformName:(id)arg3;
- (void)setMatrix4f:(struct HTSGPUMatrix4x4)arg1 uniformName:(id)arg2;
- (void)setMatrix3f:(struct HTSGPUMatrix3x3)arg1 uniformName:(id)arg2;
- (void)setFloatArray:(float *)arg1 length:(int)arg2 forUniform:(id)arg3;
- (void)setFloatVec4:(struct HTSGPUVector4)arg1 forUniform:(id)arg2;
- (void)setFloatVec3:(struct HTSGPUVector3)arg1 forUniformName:(id)arg2;
- (void)setPoint:(struct CGPoint)arg1 forUniformName:(id)arg2;
- (void)setSize:(struct CGSize)arg1 forUniformName:(id)arg2;
- (void)setFloat:(float)arg1 forUniformName:(id)arg2;
- (void)setInteger:(int)arg1 forUniformName:(id)arg2;
- (void)setBackgroundColorRed:(float)arg1 green:(float)arg2 blue:(float)arg3 alpha:(float)arg4;
- (void)informTargetsAboutNewFrameAtTime:(CDStruct_1b6d18a9)arg1;
- (void)renderToTextureWithVertices:(const float *)arg1 textureCoordinates:(const float *)arg2;
- (struct CGSize)sizeOfFBO;
- (struct CGImage *)newCGImageFromCurrentlyProcessedOutput;
- (void)useNextFrameForImageCapture;
- (void)dealloc;
- (void)setupFilterForSize:(struct CGSize)arg1;
- (void)initializeAttributes;
- (void)initializeRenderer:(id)arg1;
- (id)initWithContext:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly) HTSGLContext *context;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

