//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class NSDictionary;
@protocol OS_dispatch_queue;

@interface BDTrackerBaseManager : NSObject
{
    NSObject<OS_dispatch_queue> *_trackHookQueue;
    NSObject<OS_dispatch_queue> *_insertBlockQueue;
    struct _opaque_pthread_mutex_t _didStartSDKLock;
    _Bool _didStartSDK;
    NSDictionary *_logHookDict;
}

+ (void)ttTrackEventWithCustomKeys:(id)arg1 label:(id)arg2 value:(id)arg3 source:(id)arg4 extraDic:(id)arg5;
+ (void)category:(id)arg1 event:(id)arg2 label:(id)arg3 dict:(id)arg4 json:(id)arg5;
+ (void)category:(id)arg1 event:(id)arg2 label:(id)arg3 dict:(id)arg4;
+ (void)category:(id)arg1 event:(id)arg2 label:(id)arg3 json:(id)arg4;
+ (void)event:(id)arg1 label:(id)arg2 json:(id)arg3;
+ (void)event:(id)arg1 label:(id)arg2 value:(id)arg3 extValue:(id)arg4 extValue2:(id)arg5 dict:(id)arg6;
+ (void)event:(id)arg1 label:(id)arg2 value:(id)arg3 extValue:(id)arg4 extValue2:(id)arg5;
+ (void)eventData:(id)arg1 policy:(long long)arg2;
+ (void)eventData:(id)arg1;
+ (void)event:(id)arg1 label:(id)arg2 eventIndex:(id)arg3;
+ (void)event:(id)arg1 label:(id)arg2;
+ (void)event:(id)arg1;
+ (void)eventData:(id)arg1 policy:(long long)arg2 version:(long long)arg3 eventIndex:(id)arg4;
+ (void)eventData:(id)arg1 policy:(long long)arg2 version:(long long)arg3;
+ (void)eventData:(id)arg1 version:(long long)arg2;
+ (void)eventV3:(id)arg1 params:(id)arg2 isDoubleSending:(_Bool)arg3;
+ (void)eventV3:(id)arg1 params:(id)arg2;
+ (void)setLaunchFrom:(unsigned long long)arg1;
+ (void)setSDKEnable:(_Bool)arg1;
+ (id)shareInstance;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *insertBlockQueue; // @synthesize insertBlockQueue=_insertBlockQueue;
- (void).cxx_destruct;
@property(nonatomic) _Bool didStartSDK; // @synthesize didStartSDK=_didStartSDK;
@property(copy, nonatomic) NSDictionary *logHookDict; // @synthesize logHookDict=_logHookDict;
- (void)setDebugLogServerAddress:(id)arg1;
- (void)setDebugLogServerHost:(id)arg1;
- (void)setIsInHouseVersion:(_Bool)arg1;
- (void)registerWithServiceID:(id)arg1 willCacheOneLogBlock:(CDUnknownBlockType)arg2;
- (void)_reportStartupEvent;
- (void)startWithConfig:(id)arg1;
- (id)init;

@end

