//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <UIKit/UIColor.h>

@interface UIColor (BDAUtils)
+ (id)bda_colorWithHexString:(id)arg1 alpha:(float)arg2;
+ (id)bda_colorWithRGB:(unsigned int)arg1;
+ (id)bda_colorWithRGB:(unsigned int)arg1 alpha:(unsigned int)arg2;
+ (id)bda_colorWithARGBHexString:(id)arg1 defaultColor:(id)arg2;
+ (id)bda_colorWithARGBHexString:(id)arg1;
+ (id)bda_colorWithHexString:(id)arg1;
+ (id)turing_colorWithRGB:(unsigned int)arg1 alpha:(double)arg2;
+ (id)turing_colorWithRGBString:(id)arg1 alpha:(double)arg2;
+ (id)btd_hexStringFromColor:(id)arg1;
+ (id)btd_colorWithHexString:(id)arg1;
+ (id)live_colorForRoomSceneIfNeededWithColorName:(id)arg1 alpha:(double)arg2 baseColorName:(id)arg3;
+ (id)live_colorForRoomSceneIfNeededWithColorName:(id)arg1 baseColorName:(id)arg2;
+ (id)live_colorForRoomSceneIfNeededWithColorName:(id)arg1 alpha:(double)arg2 baseRoomScene:(long long)arg3;
+ (id)live_colorForRoomSceneIfNeededWithColorName:(id)arg1 baseRoomScene:(long long)arg2;
+ (id)live_colorForRoomSceneIfNeededWithColorName:(id)arg1 alpha:(double)arg2;
+ (id)live_colorForRoomSceneIfNeededWithColorName:(id)arg1;
+ (id)live_colorForAudienceRoomSceneIfNeededWithColorName:(id)arg1;
+ (id)live_colorWithColorName:(id)arg1 alpha:(double)arg2;
+ (id)live_colorWithColorName:(id)arg1;
+ (id)colorWithHex:(unsigned int)arg1 andAlpha:(double)arg2;
+ (id)colorWithARGBHex:(unsigned int)arg1;
+ (id)live_colorWithHex:(unsigned int)arg1;
+ (id)live_colorWithARGBHexString:(id)arg1 defaultColorName:(id)arg2;
+ (id)live_colorWithARGBHexString:(id)arg1 defaultColor:(id)arg2;
+ (id)live_colorWithARGBHexString:(id)arg1;
+ (id)live_colorWithHexString:(id)arg1;
+ (id)warmGrey;
+ (id)tomatoRed;
+ (id)ttad_colorWithHexString:(id)arg1 alpha:(float)arg2;
+ (id)ttad_colorWithRGB:(unsigned int)arg1 alpha:(unsigned int)arg2;
+ (id)ttad_colorWithHexString:(id)arg1;
+ (id)colorWithHex:(unsigned long long)arg1;
+ (id)colorWithCSS:(id)arg1;
+ (id)yam_colorWithHex:(id)arg1 alpha:(double)arg2;
+ (id)yam_colorWithHex:(id)arg1;
+ (id)LOT_colorByLerpingFromColor:(id)arg1 toColor:(id)arg2 amount:(double)arg3;
+ (id)LOT_colorWithName:(id)arg1;
+ (id)LOT_colorWithHexString:(id)arg1;
+ (id)LOT_colorWithRGBHex:(unsigned int)arg1;
+ (id)LOT_randomColor;
+ (id)LOT_colorWithString:(id)arg1;
+ (id)searchForColorByName:(id)arg1;
+ (id)GMSx_goo_interpolateFromColor:(id)arg1 toColor:(id)arg2 percent:(double)arg3;
+ (id)awe_colorWithHexString:(id)arg1;
+ (id)awe_colorWithHexString:(id)arg1;
+ (id)aweSearch_colorWithARGBHexString:(id)arg1 defaultColor:(id)arg2;
+ (id)aweSearch_colorWithARGBHexString:(id)arg1;
+ (id)mixColor1:(id)arg1 withColor2:(id)arg2;
+ (id)bdug_colorWithHexString:(id)arg1;
+ (id)bdug_colorWithHex:(unsigned int)arg1;
+ (id)bdug_colorWithARGBHex:(unsigned int)arg1;
+ (id)bdug_colorWithHex:(unsigned int)arg1 andAlpha:(double)arg2;
+ (id)acc_colorWithHex:(id)arg1 alpha:(double)arg2;
+ (id)acc_colorWithHex:(id)arg1;
+ (id)acc_colorWithHexString:(id)arg1;
+ (id)acc_hexStringFromColor:(id)arg1;
+ (id)acc_mixColor1:(id)arg1 withColor2:(id)arg2;
+ (id)acc_darkNameWithColorName:(id)arg1;
+ (id)acc_colorWithColorName:(id)arg1;
+ (id)colorFromHexString:(id)arg1;
+ (id)colorWithInteger:(unsigned long long)arg1;
+ (id)colorWithUInt:(unsigned int)arg1 withAlpha:(float)arg2;
- (id)htslive_imgaeWithSize:(struct CGSize)arg1;
- (id)cssString;
- (id)hexString;
- (unsigned int)hex;
- (id)LOT_hexStringValue;
- (id)LOT_stringFromColor;
- (id)LOT_colorByDarkeningToColor:(id)arg1;
- (id)LOT_colorByLighteningToColor:(id)arg1;
- (id)LOT_colorByAddingColor:(id)arg1;
- (id)LOT_colorByMultiplyingByColor:(id)arg1;
- (id)LOT_colorByDarkeningTo:(double)arg1;
- (id)LOT_colorByLighteningTo:(double)arg1;
- (id)LOT_colorByAdding:(double)arg1;
- (id)LOT_colorByMultiplyingBy:(double)arg1;
- (id)LOT_colorByDarkeningToRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4;
- (id)LOT_colorByLighteningToRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4;
- (id)LOT_colorByAddingRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4;
- (id)LOT_colorByMultiplyingByRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4;
- (id)LOT_colorByLuminanceMapping;
@property(readonly, nonatomic) unsigned int rgbHex;
@property(readonly, nonatomic) double alpha;
@property(readonly, nonatomic) double white;
@property(readonly, nonatomic) double blue;
@property(readonly, nonatomic) double green;
@property(readonly, nonatomic) double red;
- (_Bool)LOT_red:(double *)arg1 green:(double *)arg2 blue:(double *)arg3 alpha:(double *)arg4;
- (id)LOT_arrayFromRGBAComponents;
@property(readonly, nonatomic) _Bool canProvideRGBComponents;
- (id)LOT_colorSpaceString;
@property(readonly, nonatomic) int colorSpaceModel;
- (double)GMSx_goo_perceivedLuminance;
- (_Bool)GMSx_goo_requiresLightContent;
- (unsigned int)bdug_hexValue;
@end

