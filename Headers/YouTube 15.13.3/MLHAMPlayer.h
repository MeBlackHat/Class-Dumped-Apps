//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import <Module_Framework/HAMPlayerInternalDelegate-Protocol.h>
#import <Module_Framework/MLABRPolicyDelegate-Protocol.h>
#import <Module_Framework/MLAdaptiveLiveControllerDelegate-Protocol.h>
#import <Module_Framework/MLBitrateCapDelegate-Protocol.h>
#import <Module_Framework/MLCaptionControllerDelegate-Protocol.h>
#import <Module_Framework/MLDRMControllerDelegate-Protocol.h>
#import <Module_Framework/MLHAMPlayerProtocol-Protocol.h>
#import <Module_Framework/MLManifestlessPartialResponseHandlerDelegate-Protocol.h>
#import <Module_Framework/MLOnesieVideoDataQOEErrorDelegate-Protocol.h>
#import <Module_Framework/MLPlayerItemInternal-Protocol.h>
#import <Module_Framework/MLViewportSizeObserver-Protocol.h>
#import <Module_Framework/YTAudioSessionInterruptionObserver-Protocol.h>
#import <Module_Framework/YTAudioSessionOutputDeviceUnavailableObserver-Protocol.h>
#import <Module_Framework/YTAudioSessionRouteChangeObserver-Protocol.h>
#import <Module_Framework/YTSystemNotificationsObserver-Protocol.h>

@class GIMMe, HAMEventCenter, HAMFormatSelection, HAMPlayerContext, HAMPlayerInternal, MLABRPolicy, MLAdaptiveLiveController, MLAudioSession, MLBitrateCap, MLChunkLoader, MLDRMController, MLFormat, MLFormat3Captions, MLMediaDataLoader, MLOnesieVideoData, MLPlayerEventCenter, MLPlayerItemEventCenter, MLPlayerStickySettings, MLRAMCachePinHandle, MLSegmentTimeline, MLTextTrackRenderer, MLVideo, MLVideoDecoderFactory, MLViewportSize, NSArray, NSData, NSDictionary, NSError, NSString, NSURL, UIView, YTIHamplayerConfig, YTIHamplayerHotConfig, YTReachabilityController, YTSystemNotifications;
@protocol HAMAudioTrackRenderer, HAMCache, HAMClock, HAMFrameSourceDelegate, HAMNetworkStatsProvider, HAMVideoTrackRenderer, MLAudioFormatConstraint, MLCaptionController, MLCaptionDisplayController, MLCaptionTrack, MLCuepointCollector, MLHAMPlayerViewProtocol, MLNetworkRequestObserver, MLPlayerCaptionDelegate, MLPlayerConfig, MLPlayerDelegate, MLPlayerItemDelegate, MLPlayerItemInternal, MLTextFormatConstraint, MLVideoFormatConstraint, MLVideoSplicer, MLViewportSizeProvider, OS_dispatch_queue;

@interface MLHAMPlayer : NSObject <HAMPlayerInternalDelegate, MLABRPolicyDelegate, MLAdaptiveLiveControllerDelegate, MLBitrateCapDelegate, MLCaptionControllerDelegate, MLDRMControllerDelegate, MLManifestlessPartialResponseHandlerDelegate, MLOnesieVideoDataQOEErrorDelegate, MLViewportSizeObserver, YTAudioSessionInterruptionObserver, YTAudioSessionOutputDeviceUnavailableObserver, YTAudioSessionRouteChangeObserver, YTSystemNotificationsObserver, MLHAMPlayerProtocol, MLPlayerItemInternal>
{
    long long _firstRequestNumber;
    MLAudioSession *_audioSession;
    id <HAMFrameSourceDelegate> _frameSourceDelegate;
    NSObject<OS_dispatch_queue> *_playerQueue;
    HAMEventCenter *_hamEventCenter;
    YTIHamplayerConfig *_hamplayerConfig;
    YTIHamplayerHotConfig *_hamplayerHotConfig;
    MLOnesieVideoData *_onesieVideoData;
    YTSystemNotifications *_systemNotifications;
    YTReachabilityController *_reachabilityController;
    id <HAMClock> _clock;
    _Bool _isLive;
    _Bool _isPostLiveDVR;
    MLBitrateCap *_bitrateCap;
    MLPlayerStickySettings *_stickySettings;
    id <HAMCache> _cache;
    MLRAMCachePinHandle *_cachePinHandle;
    HAMPlayerInternal *_player;
    MLMediaDataLoader *_mediaDataLoader;
    MLVideoDecoderFactory *_videoDecoderFactory;
    id <HAMVideoTrackRenderer> _videoTrackRenderer;
    id <HAMAudioTrackRenderer> _audioTrackRenderer;
    MLTextTrackRenderer *_textTrackRenderer;
    MLABRPolicy *_videoABRPolicy;
    MLABRPolicy *_audioABRPolicy;
    MLABRPolicy *_textABRPolicy;
    MLChunkLoader *_chunkLoader;
    _Bool _foregroundAudioOnly;
    NSURL *_probeURLOnVideoPlay;
    long long _pendingSeeks;
    double _initialSeekTime;
    double _initialSeekToleranceBefore;
    double _initialSeekToleranceAfter;
    _Bool _isInBackground;
    NSError *_playerError;
    long long _playerStatus;
    NSArray *_startedTrackRenderers;
    int _startedTrackRendererMediaContentType;
    double _lastReportedCurrentTime;
    double _lastReportedBufferedTime;
    _Bool _userRequestedPlay;
    _Bool _isAutoSeeking;
    _Bool _allStreamsAreLocal;
    MLAdaptiveLiveController *_liveController;
    HAMFormatSelection *_videoFormatSelection;
    HAMFormatSelection *_audioFormatSelection;
    _Bool _sentFormatChangeEvent;
    id <MLCaptionController> _captionController;
    MLFormat3Captions *_loadedFormat3Captions;
    id <MLTextFormatConstraint> _textFormatConstraint;
    id <HAMNetworkStatsProvider> _networkStatsProvider;
    id <MLNetworkRequestObserver> _networkRequestObserver;
    double _readaheadCap;
    id <MLViewportSizeProvider> _viewportSizeProvider;
    _Bool _playerIsLive;
    MLDRMController *_DRMController;
    _Bool _preloadAndLocalStateUpdated;
    _Bool _currentVideoIsLocal;
    _Bool _muted;
    _Bool _externalPlaybackFullscreen;
    _Bool _externalPlaybackAllowed;
    _Bool _peggedToLive;
    float _rate;
    float _volume;
    id <MLAudioFormatConstraint> _audioFormatConstraint;
    double _bufferedMediaTime;
    id <MLCaptionDisplayController> _captionDisplayController;
    id <MLPlayerConfig> _config;
    id <MLPlayerDelegate> _delegate;
    NSError *_error;
    MLPlayerEventCenter *_playerEventCenter;
    MLPlayerItemEventCenter *_playerItemEventCenter;
    double _maximumSeekableTime;
    double _minimumSeekableTime;
    MLSegmentTimeline *_segmentTimeline;
    NSArray *_selectableAudioFormats;
    NSArray *_selectableVideoFormats;
    MLFormat *_selectedAudioFormat;
    MLFormat *_selectedVideoFormat;
    long long _state;
    MLVideo *_video;
    id <MLVideoFormatConstraint> _videoFormatConstraint;
    HAMPlayerContext *_context;
    UIView<MLHAMPlayerViewProtocol> *_playerView;
    id <MLPlayerCaptionDelegate> _captionDelegate;
    GIMMe *_gimme;
    CDStruct_d60ef703 _currentTime;
}

@property(nonatomic) _Bool peggedToLive; // @synthesize peggedToLive=_peggedToLive;
@property(nonatomic) __weak GIMMe *gimme; // @synthesize gimme=_gimme;
@property(nonatomic) _Bool externalPlaybackAllowed; // @synthesize externalPlaybackAllowed=_externalPlaybackAllowed;
@property(nonatomic) _Bool externalPlaybackFullscreen; // @synthesize externalPlaybackFullscreen=_externalPlaybackFullscreen;
@property(nonatomic) __weak id <MLPlayerCaptionDelegate> captionDelegate; // @synthesize captionDelegate=_captionDelegate;
@property(readonly, nonatomic) UIView<MLHAMPlayerViewProtocol> *playerView; // @synthesize playerView=_playerView;
@property(readonly, nonatomic) HAMPlayerContext *context; // @synthesize context=_context;
@property(nonatomic) float volume; // @synthesize volume=_volume;
@property(retain, nonatomic) id <MLVideoFormatConstraint> videoFormatConstraint; // @synthesize videoFormatConstraint=_videoFormatConstraint;
@property(readonly, nonatomic) MLVideo *video; // @synthesize video=_video;
@property(readonly, nonatomic) long long state; // @synthesize state=_state;
@property(readonly, nonatomic) MLFormat *selectedVideoFormat; // @synthesize selectedVideoFormat=_selectedVideoFormat;
@property(readonly, nonatomic) MLFormat *selectedAudioFormat; // @synthesize selectedAudioFormat=_selectedAudioFormat;
@property(readonly, nonatomic) NSArray *selectableVideoFormats; // @synthesize selectableVideoFormats=_selectableVideoFormats;
@property(readonly, nonatomic) NSArray *selectableAudioFormats; // @synthesize selectableAudioFormats=_selectableAudioFormats;
@property(readonly, nonatomic) MLSegmentTimeline *segmentTimeline; // @synthesize segmentTimeline=_segmentTimeline;
@property(nonatomic) float rate; // @synthesize rate=_rate;
@property(nonatomic, getter=isMuted) _Bool muted; // @synthesize muted=_muted;
@property(readonly, nonatomic) double minimumSeekableTime; // @synthesize minimumSeekableTime=_minimumSeekableTime;
@property(readonly, nonatomic) double maximumSeekableTime; // @synthesize maximumSeekableTime=_maximumSeekableTime;
@property(readonly, nonatomic) MLPlayerItemEventCenter *playerItemEventCenter; // @synthesize playerItemEventCenter=_playerItemEventCenter;
@property(readonly, nonatomic) MLPlayerEventCenter *playerEventCenter; // @synthesize playerEventCenter=_playerEventCenter;
@property(readonly, nonatomic) NSError *error; // @synthesize error=_error;
@property(nonatomic) __weak id <MLPlayerItemDelegate> delegate;
@property(readonly, nonatomic) _Bool currentVideoIsLocal; // @synthesize currentVideoIsLocal=_currentVideoIsLocal;
@property(readonly, nonatomic) CDStruct_d60ef703 currentTime; // @synthesize currentTime=_currentTime;
@property(readonly, nonatomic) id <MLPlayerConfig> config; // @synthesize config=_config;
@property(readonly, nonatomic) id <MLCaptionDisplayController> captionDisplayController; // @synthesize captionDisplayController=_captionDisplayController;
@property(readonly, nonatomic) double bufferedMediaTime; // @synthesize bufferedMediaTime=_bufferedMediaTime;
@property(retain, nonatomic) id <MLAudioFormatConstraint> audioFormatConstraint; // @synthesize audioFormatConstraint=_audioFormatConstraint;
- (void).cxx_destruct;
- (id)frameSourceDelegate;
- (void)onSelectableVideoFormats:(id)arg1;
- (void)onSelectableTextFormats:(id)arg1;
- (void)onSelectableAudioFormats:(id)arg1;
- (void)terminatePlayerWithError:(id)arg1;
- (void)updateCaptionControllerAudioTrack;
- (void)maybeSwitchToAVPlayer;
- (void)setUpCaptionDisplayController;
- (void)setUpCaptionController;
- (void)updateSelectedFormatsWithFormatSelectionReason:(long long)arg1;
- (void)emitQOEError:(id)arg1 fatal:(_Bool)arg2;
- (void)emitQOEErrorWithNSError:(id)arg1 fatal:(_Bool)arg2;
- (void)updateABRPoliciesWithReadaheadCap;
- (void)updateABRPoliciesWithBitrateCap:(long long)arg1;
- (void)updateNetworkUsageNotifier;
- (void)updateActiveTrackRenderers;
- (void)internalSeekToTime:(CDStruct_1b6d18a9)arg1 toleranceBefore:(CDStruct_1b6d18a9)arg2 toleranceAfter:(CDStruct_1b6d18a9)arg3;
- (void)updateForegroundAudioOnlyPlaybackState;
- (void)updatePeggedToLive;
- (void)updatePreloadAndLocalStateFromMPD:(id)arg1;
- (void)registerWithEventCenter;
- (void)updateVolume;
- (void)setState:(long long)arg1;
- (void)updateTextFormatConstraint;
- (void)onFormatSelectionEvent:(id)arg1;
- (void)failWithError:(id)arg1;
- (id)createChunkLoaderWithDataLoader:(id)arg1;
- (void)setupTextWithMPDProvider:(id)arg1 isManifestless:(_Bool)arg2;
- (void)setupAudioWithMPDProvider:(id)arg1;
- (void)setupVideoWithMPDProvider:(id)arg1;
- (void)ABRPolicy:(id)arg1 selectableFormatsDidChange:(id)arg2;
- (void)syncToLive;
- (void)rejoinStreamForMediaChunk:(id)arg1;
- (void)DRMController:(id)arg1 didFailWithError:(id)arg2;
- (void)bitrateCapDidChange:(long long)arg1 formatPacingBitrateCap:(long long)arg2;
- (void)appDidBecomeActive:(id)arg1;
- (void)appDidEnterBackground:(id)arg1;
- (void)disablePlayerCaptions;
- (void)setPlayerCaptionsTextStyleRule:(id)arg1;
- (void)enablePlayerCaptionsWithOption:(id)arg1;
- (void)viewportSizeDidChange:(id)arg1;
- (void)recordNonFatalQOEError:(id)arg1;
- (void)didLoadFormat3Captions:(id)arg1;
- (void)captionControllerDidFailWithError:(id)arg1;
- (void)availableCaptionTracksDidChange:(id)arg1;
- (void)activeCaptionTrackDidChange:(id)arg1;
- (void)outputRouteDidChange;
- (void)outputDeviceDidBecomeUnavailable;
- (void)didReceiveAudioSessionInterruptionWithType:(unsigned long long)arg1 options:(unsigned long long)arg2;
- (void)setLive:(_Bool)arg1;
- (void)playerDidTerminate;
- (void)playerWillFailWithError:(id)arg1;
- (void)trackRenderer:(id)arg1 didFailWithError:(id)arg2;
- (void)setStartedTrackRenderers:(id)arg1;
- (void)setSeekableTimeRange:(CDStruct_e83c9415)arg1;
- (void)setStatus:(long long)arg1;
- (void)setCurrentTime:(CDStruct_576a8307)arg1;
- (void)setBufferedTime:(CDStruct_1b6d18a9)arg1;
@property(readonly, nonatomic) NSString *playerViewDebugType;
@property(readonly, nonatomic) id <MLPlayerItemInternal> currentPlayerItem;
@property(readonly, nonatomic) float oversendFactor;
@property(readonly, nonatomic) MLViewportSize *viewportSize;
- (void)flushEvents;
@property(readonly, nonatomic) long long bitrate;
@property(readonly, nonatomic) long long itemState;
- (void)registerQOEController:(id)arg1;
@property(readonly, nonatomic) id <MLVideoSplicer> videoSplicer;
- (void)setPeakBitrateFraction:(float)arg1;
- (void)setPreferredMaxReadahead:(double)arg1;
@property(readonly, nonatomic) id <MLCuepointCollector> cuepointCollector;
@property(readonly, nonatomic) int playerType;
@property(readonly, nonatomic) NSArray *availableCaptionTracks;
@property(readonly, nonatomic) id <MLCaptionTrack> activeCaptionTrack;
@property(readonly, nonatomic) NSDictionary *debugParameters;
@property(readonly, nonatomic) NSData *debugLogs;
@property(readonly, nonatomic) _Bool externalPlaybackActive;
@property(readonly, nonatomic) double totalMediaTime;
- (void)setViewportSizeProvider:(id)arg1;
- (void)setTextFormatConstraint:(id)arg1;
- (void)setLiveCaptionsVerticalRatio:(double)arg1;
- (void)enableCaptionsIfAvailable;
- (void)setActiveCaptionTrack:(id)arg1;
- (void)seekToEnd;
- (void)seekToProductionTime:(double)arg1;
- (void)seekToTime:(double)arg1 toleranceBefore:(double)arg2 toleranceAfter:(double)arg3;
- (void)seekToTime:(double)arg1;
- (void)pause;
- (void)playASAP;
- (void)play;
- (void)terminate;
- (void)load;
- (void)makeActivePlayer;
- (id)initWithVideo:(id)arg1 playerConfig:(id)arg2 stickySettings:(id)arg3 playerView:(id)arg4 frameSourceDelegate:(id)arg5;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

