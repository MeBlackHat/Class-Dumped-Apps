//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <UIKit/UICollectionViewController.h>

#import "UICollectionViewDelegateFlowLayout-Protocol.h"
#import "YTAutonavCountdownObserver-Protocol.h"
#import "YTConnectionStatusControllerObserver-Protocol.h"
#import "YTHotConfigObserver-Protocol.h"
#import "YTNGWatchCollectionViewLayoutDataSource-Protocol.h"
#import "YTNGWatchContainerViewController-Protocol.h"
#import "YTNGWatchQueueCollectionViewController-Protocol.h"
#import "YTNGWatchQueueObserver-Protocol.h"
#import "YTSlimStatusBarControllerObserver-Protocol.h"
#import "YTSystemNotificationsObserver-Protocol.h"

@class GIMMe, NSHashTable, NSString, UICollectionViewLayout, UIPanGestureRecognizer, UIViewController, YTDownwardPanInteractionController, YTImpactFeedbackGenerator, YTNGWatchQueue;
@protocol YTAutonavControllerProtocol, YTNGWatchUIStateResponderProvider, YTResponder, YTWatchPlayerViewControllerDelegate;

@interface YTNGWatchCollectionViewController : UICollectionViewController <YTAutonavCountdownObserver, YTSlimStatusBarControllerObserver, YTConnectionStatusControllerObserver, YTHotConfigObserver, YTSystemNotificationsObserver, UICollectionViewDelegateFlowLayout, YTNGWatchCollectionViewLayoutDataSource, YTNGWatchContainerViewController, YTNGWatchQueueCollectionViewController, YTNGWatchQueueObserver>
{
    int _playerViewLayout;
    _Bool _recenterCurrentCellAfterRotation;
    _Bool _isInsertingBeforeCurrentIndex;
    YTImpactFeedbackGenerator *_impactFeedbackGenerator;
    _Bool _updatingItems;
    UICollectionViewLayout *_layout;
    id <YTNGWatchUIStateResponderProvider> _ngwUIStateResponderProvider;
    _Bool _inManualSwipe;
    id <YTAutonavControllerProtocol> _autonavController;
    _Bool _isKeyboardVisible;
    struct CGPoint _contentOffsetBeforeKeyboardVisible;
    _Bool _swipePausePlaybackEnabled;
    _Bool _swipePauseKeepAudioEnabled;
    double _swipePauseRatio;
    _Bool _swipingEnabled;
    _Bool _swipeBackOnAdsEnabled;
    _Bool _fullscreen;
    _Bool _activated;
    _Bool _currentlyCastingScreen;
    _Bool _isTransitioningLayout;
    _Bool _speedBumpActivated;
    _Bool _playbackPausedDuringSwipe;
    _Bool _scrollingToNewIndex;
    id <YTResponder> _parentResponder;
    GIMMe *_gimme;
    YTDownwardPanInteractionController *_dismissMiniBarTransitionController;
    YTNGWatchQueue *_watchQueue;
    UIViewController<YTWatchPlayerViewControllerDelegate> *_playerViewController;
    NSHashTable *_eventObservers;
}

@property(nonatomic) _Bool scrollingToNewIndex; // @synthesize scrollingToNewIndex=_scrollingToNewIndex;
@property(nonatomic) _Bool playbackPausedDuringSwipe; // @synthesize playbackPausedDuringSwipe=_playbackPausedDuringSwipe;
@property(readonly, nonatomic) NSHashTable *eventObservers; // @synthesize eventObservers=_eventObservers;
@property(nonatomic, getter=isSpeedBumpActivated) _Bool speedBumpActivated; // @synthesize speedBumpActivated=_speedBumpActivated;
@property(nonatomic) __weak UIViewController<YTWatchPlayerViewControllerDelegate> *playerViewController; // @synthesize playerViewController=_playerViewController;
@property(readonly, nonatomic) __weak YTNGWatchQueue *watchQueue; // @synthesize watchQueue=_watchQueue;
@property(nonatomic) _Bool isTransitioningLayout; // @synthesize isTransitioningLayout=_isTransitioningLayout;
@property(nonatomic, getter=isCurrentlyCastingScreen) _Bool currentlyCastingScreen; // @synthesize currentlyCastingScreen=_currentlyCastingScreen;
@property(nonatomic) __weak YTDownwardPanInteractionController *dismissMiniBarTransitionController; // @synthesize dismissMiniBarTransitionController=_dismissMiniBarTransitionController;
@property(nonatomic, getter=isActivated) _Bool activated; // @synthesize activated=_activated;
@property(nonatomic) __weak GIMMe *gimme; // @synthesize gimme=_gimme;
@property(readonly, nonatomic) __weak id <YTResponder> parentResponder; // @synthesize parentResponder=_parentResponder;
@property(nonatomic, getter=isFullscreen) _Bool fullscreen; // @synthesize fullscreen=_fullscreen;
- (void).cxx_destruct;
- (void)voiceOverStatusChangedNotification:(id)arg1;
- (void)resumePlaybackAfterSwipe;
- (void)suspendPlaybackDuringSwipe;
- (void)UIKeyboardDidHideNotification:(id)arg1;
- (void)keyboardWillShowNotification:(id)arg1;
- (void)showOfflineDisabledActionIfNeeded;
- (id)slimStatusBarReusableView;
- (id)arrayFromIndexSet:(id)arg1;
- (id)currentWatchViewController;
- (id)watchViewControllerAtIndex:(unsigned long long)arg1;
- (unsigned long long)allowedFullScreenOrientations;
- (id)watchCellForIndex:(long long)arg1;
- (void)logSwipeToSkip;
- (void)logSwipeNavigationWithOldIndex:(long long)arg1 newIndex:(long long)arg2;
- (void)clampScrollView:(id)arg1;
- (struct CGRect)cellRectForIndexPath:(id)arg1;
- (double)collectionViewTopMargin_compact;
- (double)collectionViewTopMargin_regular;
- (double)collectionViewTopMargin;
- (double)clampedTranslationXInScrollView:(id)arg1;
- (double)speedBumpMaxOffset;
- (_Bool)shouldSkipCurrentAd;
- (double)logisticFunctionForFraction:(double)arg1;
- (_Bool)isSwipeToSkipEnabled;
- (_Bool)isSpeedbumpEnabled;
- (void)appDidBecomeActive:(id)arg1;
- (_Bool)accessibilityScroll:(long long)arg1;
- (void)slimStatusBarDisplayStatusDidChange;
- (void)connectionStatusDidChange:(_Bool)arg1;
- (struct CGSize)collectionView:(id)arg1 layout:(id)arg2 sizeForItemAtIndexPath:(id)arg3;
- (void)maybeResetContentViews:(id)arg1;
- (void)collectionView:(id)arg1 didEndDisplayingCell:(id)arg2 forItemAtIndexPath:(id)arg3;
- (void)collectionView:(id)arg1 willDisplayCell:(id)arg2 forItemAtIndexPath:(id)arg3;
- (id)collectionView:(id)arg1 viewForSupplementaryElementOfKind:(id)arg2 atIndexPath:(id)arg3;
- (id)collectionView:(id)arg1 cellForItemAtIndexPath:(id)arg2;
- (long long)collectionView:(id)arg1 numberOfItemsInSection:(long long)arg2;
- (long long)numberOfSectionsInCollectionView:(id)arg1;
- (void)autonavCountdownDidStopWithEndscreenCancelled:(_Bool)arg1;
- (void)autonavCountdownDidUpdateWithRemainingInterval:(long long)arg1;
- (void)autonavCountdownDidStartWithSeconds:(double)arg1;
- (void)setAutonavController:(id)arg1;
- (void)didClearWatchQueue;
- (void)didCreateWatchViewController:(id)arg1 forIndex:(long long)arg2;
- (void)didClearPlayerViewControllerWithThumbnailView:(id)arg1 forIndex:(unsigned long long)arg2;
- (void)didSetPlayerViewController:(id)arg1 forIndex:(long long)arg2;
- (void)didSetCurrentIndexFromIndex:(long long)arg1 toIndex:(long long)arg2 withInPlaceUpdate:(_Bool)arg3;
- (void)willInsertItemsChangingCurrentIndex:(long long)arg1 toNewIndex:(long long)arg2;
- (void)playbackControllerWillFailWithError:(id)arg1;
- (void)playbackControllerPlayerStateDidChange;
- (void)playbackControllerStateDidChange;
- (void)performQueueUpdateWithInsertionIndexes:(id)arg1 deletionIndexes:(id)arg2 updateBlock:(CDUnknownBlockType)arg3;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(_Bool)arg2;
- (void)scrollViewDidEndScrollingAnimation:(id)arg1;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewWillEndDragging:(id)arg1 withVelocity:(struct CGPoint)arg2 targetContentOffset:(inout struct CGPoint *)arg3;
- (void)scrollViewDidScroll:(id)arg1;
- (void)scrollViewWillBeginDragging:(id)arg1;
- (_Bool)canSkipAd;
- (long long)currentIndex;
- (struct CGSize)cellSize;
- (long long)queueCount;
- (long long)numberOfCells;
- (void)hotConfigDidChange:(id)arg1;
@property(readonly, nonatomic) UIPanGestureRecognizer *panGestureRecognizer;
- (_Bool)isCollectionViewMoving;
- (void)removeEventObserver:(id)arg1;
- (void)addEventObserver:(id)arg1;
- (struct CGRect)frameForCurrentPlayerView:(_Bool)arg1;
- (void)setThumbnailForCurrentCell:(id)arg1;
- (void)updatePlayerBar;
- (void)setSwipingEnabled:(_Bool)arg1;
- (void)viewDidLayoutSubviews;
- (void)viewDidLoad;
- (void)loadView;
- (id)initWithWatchQueue:(id)arg1 collectionViewLayout:(id)arg2 parentResponder:(id)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

